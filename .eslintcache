[{"H:\\hbank\\src\\index.js":"1","H:\\hbank\\src\\pages\\assets\\assetsdetail.js":"2","H:\\hbank\\src\\api\\jsonrpc.js":"3","H:\\hbank\\src\\pages\\home\\home.js":"4","H:\\hbank\\src\\pages\\assets\\assets.js":"5","H:\\hbank\\src\\api\\abi.js":"6","H:\\hbank\\src\\pages\\financial\\financial.js":"7","H:\\hbank\\src\\pages\\my\\my.js":"8","H:\\hbank\\src\\component\\nav.js":"9","H:\\hbank\\src\\App.js":"10","H:\\hbank\\src\\i18n.js":"11","H:\\hbank\\src\\api\\common.js":"12","H:\\hbank\\src\\pages\\register\\register.js":"13","H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js":"14","H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js":"15","H:\\hbank\\src\\pages\\userlist\\userlist.js":"16","H:\\hbank\\src\\pages\\bank\\bank.js":"17"},{"size":178,"mtime":1608885154044,"results":"18","hashOfConfig":"19"},{"size":10092,"mtime":1610335882323,"results":"20","hashOfConfig":"19"},{"size":1057,"mtime":1605506526591,"results":"21","hashOfConfig":"19"},{"size":11487,"mtime":1609385602158,"results":"22","hashOfConfig":"19"},{"size":12496,"mtime":1610456869232,"results":"23","hashOfConfig":"19"},{"size":30625,"mtime":1610456821559,"results":"24","hashOfConfig":"19"},{"size":2728,"mtime":1610337342681,"results":"25","hashOfConfig":"19"},{"size":7134,"mtime":1610449719947,"results":"26","hashOfConfig":"19"},{"size":5909,"mtime":1609998366224,"results":"27","hashOfConfig":"19"},{"size":1368,"mtime":1608616207219,"results":"28","hashOfConfig":"19"},{"size":861,"mtime":1609143452585,"results":"29","hashOfConfig":"19"},{"size":1793,"mtime":1606827437794,"results":"30","hashOfConfig":"19"},{"size":24443,"mtime":1610432340673,"results":"31","hashOfConfig":"19"},{"size":13887,"mtime":1609735850138,"results":"32","hashOfConfig":"19"},{"size":16325,"mtime":1610456113465,"results":"33","hashOfConfig":"19"},{"size":20032,"mtime":1610455703865,"results":"34","hashOfConfig":"19"},{"size":16364,"mtime":1610337437873,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"hpi79g",{"filePath":"39","messages":"40","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},"H:\\hbank\\src\\index.js",[],["86","87"],"H:\\hbank\\src\\pages\\assets\\assetsdetail.js",["88","89","90","91","92","93","94","95","96","97","98","99","100"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport Nav from '../../component/nav'\r\nimport './assetsdetail.css'\r\nimport abi from '../../api/abi.js'\r\nimport i18n from '../../i18n'\r\n\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Assetsdetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            cy: \"\",\r\n            account: {},\r\n            iRate: \"\",\r\n            datalist: [],\r\n            len: 40000000,\r\n            count: 10,\r\n            profitday: 0\r\n        }\r\n    }\r\n\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        self.setState({ isLoading: true });\r\n        self.getData(self.state.account.mainPKr, self.state.cy, self.state.len, self.state.count + 10, function (res, profitday) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let cy = this.props.location.state.cy;\r\n        let account = this.props.location.state.account;\r\n        let iRate = this.props.location.state.iRate;\r\n        self.setState({\r\n            cy: cy,\r\n            account: account,\r\n            iRate: iRate\r\n        });\r\n        self.getData(account.mainPKr, cy, self.state.len, self.state.count, function (res, profitday, isLoading) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: isLoading\r\n            });\r\n        });\r\n    }\r\n    getData(mainPKr, cy, len, count, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.getRecords(mainPKr, cy, len, count, function (res) {\r\n            console.log(res)\r\n            if (res.len == \"0\") {\r\n                callback([], 0, false)\r\n            } else {\r\n                for (let i = 0; i < res.list.length; i++) {\r\n                    if (i >= 1) {\r\n                        let obj = {\r\n                            type: 0,\r\n                            time: \"\",\r\n                            value: \"\",\r\n                            state: 0\r\n                        }\r\n                        obj.state = res.statusList[i];\r\n                        obj.type = res.list[i].rType;\r\n                        obj.time = self.formatTime(res.list[i].time * 1000, 'Y.M.D h:m');\r\n                        obj.value = new BigNumber(res.list[i].value).dividedBy(10 ** 18).toFixed(3, 1);\r\n                        arr.push(obj);\r\n                    }\r\n                }\r\n                console.log(res.list[0])\r\n                callback(arr, new BigNumber(res.list[0].value).dividedBy(10 ** 18).toFixed(3, 1), false)\r\n            }\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {\r\n                                        item.type == 1 ? <span>{i18n.t(\"Recharge\")}</span> : <span>\r\n                                            {\r\n                                                item.type == 2 ? <span>\r\n                                                    {\r\n                                                        item.state == 1 ? <span>{i18n.t(\"Withdrawalreview\")}</span> : <span> {\r\n                                                            item.state == 2 ? <span>{i18n.t(\"Withdrawalreviewfailed\")}</span> : <span>{i18n.t(\"withdraw\")}</span>\r\n                                                        }</span>\r\n                                                    }\r\n                                                </span> : <span>{\r\n                                                    item.type == 3 ? <span>{i18n.t(\"profit\")}</span> : <span>{\r\n                                                        item.type == 4 ? <span>{i18n.t(\"Sell\")}</span> : <span>{\r\n                                                            item.type == 5 ? <span>{i18n.t(\"purchase\")}</span> : <span>理财</span>\r\n                                                        }</span>\r\n                                                    }</span>\r\n                                                }</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center detailnum\">\r\n                                    {\r\n                                        item.type == 1 || item.type == 3 || item.type == 5 ? <span>+</span> : <span>\r\n                                            {\r\n                                                item.state == 3 ? <span></span> : <span>-</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                    {item.value}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">{item.time}</Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"1\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Balancedetails\")}</Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"AnnualInterestRate\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.iRate}%\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"Undrawnincome\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.profitday}\r\n                        </Flex.Item>\r\n\r\n                    </Flex>\r\n                    <div className=\"detailcontent\">\r\n\r\n                        <div className=\"detailcontent-box\">\r\n                            <ListView\r\n                                ref={el => this.lv = el}\r\n                                dataSource={this.state.dataSource}\r\n                                renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                    {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                                </div>)}\r\n                                renderBodyComponent={() => <MyBody />}\r\n                                renderRow={row}\r\n                                renderSeparator={separator}\r\n                                style={{\r\n                                    height: this.state.height,\r\n                                    overflow: 'auto',\r\n                                }}\r\n                                onScroll={() => { console.log('scroll'); }}\r\n                                scrollRenderAheadDistance={400}\r\n                                onEndReached={this.onEndReached}\r\n                                onEndReachedThreshold={10}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assetsdetail;","H:\\hbank\\src\\api\\jsonrpc.js",["101"],"import axios from 'axios'\r\n\r\n\r\nclass JsonRpc {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    seroRpc(rpc, _method, _params, callback) {\r\n        let data = {\r\n            id: 0,\r\n            jsonrpc: \"2.0\",\r\n            method: _method,\r\n            params: _params,\r\n        };\r\n        axios.post(rpc, data).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(\"req error: \", error);\r\n        })\r\n    }\r\n\r\n    post(url, data, timeout, callback) {\r\n        axios.post(url, data, {timeout: timeout}).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            callback(null, error);\r\n        })\r\n    }\r\n\r\n    get(url, cb) {\r\n        axios.get(url).then(function (rest) {\r\n            if (cb) {\r\n                cb(rest.data)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport {JsonRpc}\r\n","H:\\hbank\\src\\pages\\home\\home.js",["102"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport Nav from '../../component/nav'\r\nimport i18n from '../../i18n'\r\nimport { WingBlank, WhiteSpace, List, Flex, Modal, InputItem, Toast } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport abi from '../../api/abi.js'\r\nimport { bytes32ToToken, showPK, trimNumber } from \"../../api/common\";\r\nimport logo from '../../images/logo.png'\r\nimport './home.css'\r\n\r\nimport swap_icon from '../../icons/swap.png'\r\n\r\nconst operation = Modal.operation;\r\nconst alert = Modal.alert;\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            account: {},\r\n            pairs: [],\r\n            retValue: 0,\r\n            isManager: false,\r\n            balances: [],\r\n            changeType: {\r\n                value: 0,\r\n                label: `${i18n.t(\"Localaccount\")}`\r\n            },\r\n            choosedata: [\r\n                { value: 0, label:  `${i18n.t(\"Localaccount\")}` },\r\n                { value: 1, label:  `${i18n.t(\"BankAccount\")}` },\r\n            ]\r\n        }\r\n    }\r\n\r\n    fetchInfo(mainPKr) {\r\n        if (!mainPKr && this.state.account) {\r\n            mainPKr = this.state.account.mainPKr;\r\n        }\r\n\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (pairs) {\r\n            self.setState({ pairs: pairs });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({ account: obj });\r\n        self.getIsManager(obj.mainPKr);\r\n        self.fetchInfo(obj.mainPKr);\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    getIsManager(mainPKr) {\r\n        let self = this;\r\n        abi.isManager(mainPKr, function (res) {\r\n            if (res) {\r\n                abi.balanceOf(function (balances) {\r\n                    self.setState({ balances: balances });\r\n                })\r\n            }\r\n\r\n            self.setState({\r\n                isManager: res\r\n            })\r\n        })\r\n    }\r\n\r\n    changAccount() {\r\n        let self = this;\r\n        abi.init\r\n            .then(() => {\r\n                abi.accountList(function (accounts) {\r\n                    let actions = [];\r\n                    accounts.forEach(function (account, index) {\r\n                        actions.push(\r\n                            {\r\n                                text: <span key={index}>{account.name + \":\" + showPK(account.pk)}</span>, onPress: () => {\r\n                                    self.getIsManager(account.mainPKr);\r\n                                    self.setState({\r\n                                        account: account\r\n                                    })\r\n                                    sessionStorage.setItem('account', JSON.stringify(account));\r\n                                }\r\n                            }\r\n                        );\r\n                    });\r\n                    operation(actions);\r\n                });\r\n            })\r\n    }\r\n\r\n    changeType() {\r\n        let self = this;\r\n        let actions = [];\r\n        self.state.choosedata.forEach(function (item, index) {\r\n            actions.push(\r\n                {\r\n                    text: <span key={index}>{item.label}</span>, onPress: () => {\r\n                        self.setState({ changeType: item });\r\n                    }\r\n                }\r\n            );\r\n        });\r\n        operation(actions);\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        let pairs = this.state.pairs.map((each, index) => {\r\n            let tokenA = bytes32ToToken(each.tokenA);\r\n            let tokenB = bytes32ToToken(each.tokenB);\r\n            if (!tokenA || !tokenB) {\r\n                return;\r\n            }\r\n            if (new BigNumber(each.price).isZero()) {\r\n                return;\r\n            }\r\n            let price = new BigNumber(each.price).div(1e9).toFixed(9);\r\n            if (each.flag) {\r\n                tokenA = bytes32ToToken(each.tokenB);\r\n                tokenB = bytes32ToToken(each.tokenA);\r\n                price = new BigNumber(1e9).div(each.price).toFixed(9);\r\n            }\r\n            price = trimNumber(price, 9);\r\n            return (\r\n                <List.Item key={index}>\r\n\r\n                    <Flex style={{ textAlign: 'center' }}>\r\n                        <Flex.Item>\r\n                            {tokenA}\r\n                        </Flex.Item>\r\n                        <Flex.Item><a onClick={() => {\r\n                            let pairs = this.state.pairs;\r\n                            pairs[index].flag = !pairs[index].flag;\r\n                            this.setState({ pairs: pairs });\r\n                        }}><img src={swap_icon} /></a></Flex.Item>\r\n                        <Flex.Item>{tokenB}</Flex.Item>\r\n                        <Flex.Item>\r\n                            {price}\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <span className=\"exchange\" onClick={() => {\r\n                                alert('', <div>\r\n                                    <div>\r\n                                        <InputItem\r\n                                            value={price} disabled={true}\r\n                                        >Price</InputItem>\r\n                                        <InputItem\r\n                                            placeholder=\"amount\" ref={el => this.sendInputRef = el}\r\n                                            onChange={(value) => {\r\n                                                this.retInputRef.value = new BigNumber(value * Number(price)).toFixed(6);\r\n                                            }}>{tokenA}</InputItem>\r\n                                        <div className=\"am-list-item am-input-item am-list-item-middle\">\r\n                                            <div className=\"am-list-line\">\r\n                                                <div className=\"am-input-label am-input-label-5\">{tokenB}</div>\r\n                                                <div className=\"am-input-control\">\r\n                                                    <input disabled placeholder=\"amount\"\r\n                                                        ref={el => this.retInputRef = el} type=\"text\" value=\"\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>, [\r\n                                    { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                    {\r\n                                        text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                            let value = new BigNumber(this.sendInputRef.state.value).multipliedBy(1e18);\r\n                                            console.log(value, \">>>>>>>>>>>>>\")\r\n                                            if (this.state.changeType.value == 0) {\r\n                                                abi.exchange(this.state.account.pk, this.state.account.mainPKr, tokenB, value, tokenA, function (hash, err) {\r\n                                                    if (err) {\r\n                                                        Toast.fail(err);\r\n                                                    } else {\r\n                                                        abi.startGetTxReceipt(hash, function (data) {\r\n                                                            self.getIsManager(self.state.account.mainPKr);\r\n                                                            self.fetchInfo(self.state.account.mainPKr);\r\n                                                        });\r\n                                                    }\r\n                                                });\r\n                                            } else {\r\n                                                abi.hbankexchange(this.state.account.pk, this.state.account.mainPKr, tokenB, value.toFixed(0), tokenA, function (hash, err) {\r\n                                                    if (err) {\r\n                                                        Toast.fail(err);\r\n                                                    } else {\r\n\r\n                                                        abi.startGetTxReceipt(hash, function (data) {\r\n                                                            self.getIsManager(self.state.account.mainPKr);\r\n                                                            self.fetchInfo(self.state.account.mainPKr);\r\n                                                        });\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                ])\r\n                            }}>{i18n.t(\"exchange\")}</span>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </List.Item>\r\n            )\r\n        });\r\n        return (\r\n            <WingBlank>\r\n                <Nav selectedTab=\"2\">\r\n                    <div className=\"tabcontent\">\r\n                        <Flex className=\"header\">\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <img src={logo} alt=\"logo\" />\r\n                                <p className='title'>\r\n                                    {i18n.t(\"assetexchange\")}\r\n                                </p>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex className=\"changAccount tabcontent-box\" style={{ textAlign: 'center' }}>\r\n                            <Flex.Item\r\n                                className=\"changAccount-name\">{i18n.t(\"Exchangeaccount\")}:{this.state.changeType.label}</Flex.Item>\r\n                            <Flex.Item>\r\n                                <a onClick={() => {\r\n                                    this.changeType();\r\n                                }}>{i18n.t(\"Switchaccount\")}</a>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <List className=\"tabcontent-box\">\r\n                            {/* <Flex className=\"listheader \">\r\n                                <Flex.Item>{i18n.t(\"Originalassets\")}</Flex.Item>\r\n                                <Flex.Item>&nbsp;</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"Targetasset\")}</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"price\")}</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"operation\")}</Flex.Item>\r\n                            </Flex> */}\r\n                            {pairs}\r\n                        </List>\r\n                    </div>\r\n                </Nav>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;",["103","104"],"H:\\hbank\\src\\pages\\assets\\assets.js",["105","106"],"H:\\hbank\\src\\api\\abi.js",["107","108","109","110","111"],"import seropp from 'sero-pp'\r\nimport serojs from \"serojs\";\r\nimport BigNumber from 'bignumber.js'\r\nimport { Toast } from \"antd-mobile\";\r\nimport i18n from '../i18n';\r\nimport { JsonRpc } from \"./jsonrpc\";\r\nimport keccak256 from \"keccak256\";\r\nconst rpc = new JsonRpc();\r\n\r\nconst config = {\r\n\tname: \"HBank\",\r\n\tcontractAddress: \"T3kGAQ8nA4PZi6qUYVRBSeySHCFzEUo93pWYee4QiF55YiFaiZiDjMvea82Zm9wPzQrAdKbz6Hauvh1yEa1fKwV\",\r\n\thbankAddress: \"2LaPfgdkTzWPxy6o2e81PFpU5oBAZdy58eE1ScdHGeeov9oxaAmBybJ8C2DBH8o7fKSjPgR25gTC7zDnGehymj4V\",\r\n\tgithub: \"https://github.com/dececash/hbank\",\r\n\tauthor: \"hbank\",\r\n\turl: document.location.href,\r\n\tlogo: document.location.protocol + '//' + document.location.host + '/logo.png',\r\n\tbarColor: \"#414691\",\r\n\tnavColor: \"#414691\",\r\n\tbarMode: \"dark\",\r\n\tnavMode: \"light\"\r\n};\r\n\r\nconst abiJson =[\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"exchange\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getPrice\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"keys\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"manager\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_start\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_end\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"pairList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Swap.Pair[]\",\r\n\t\t\t\t\"name\": \"rets\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"pairs\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setFeeRate\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_manager\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setManager\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setPair\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"withdraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"receive\"\r\n\t}\r\n]\r\n\r\nconst contract = serojs.callContract(abiJson, config.contractAddress);\r\n\r\nconst hbankjson =[\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_swap\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"keys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"flag\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"check\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address[]\",\r\n\t\t\t\t\"name\": \"list\",\r\n\t\t\t\t\"type\": \"address[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"flag\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"checkUsers\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"exchange\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"financeAddr\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenStr\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"params\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"financing\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"currencys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getBalances\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"cy\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"lasttime\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetAsset[]\",\r\n\t\t\t\t\"name\": \"item\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getCheckList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"key\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"status\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetCheck[]\",\r\n\t\t\t\t\"name\": \"retcheck\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"currencys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getInterestsList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"cy\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetInterest[]\",\r\n\t\t\t\t\"name\": \"item\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"index\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"count\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getRecords\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"len\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"enum Hbank.OperateType\",\r\n\t\t\t\t\t\t\"name\": \"rType\",\r\n\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.Record[]\",\r\n\t\t\t\t\"name\": \"list\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256[]\",\r\n\t\t\t\t\"name\": \"statusList\",\r\n\t\t\t\t\"type\": \"uint256[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getRegisterList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"components\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"enum Hbank.KycState\",\r\n\t\t\t\t\t\t\t\t\"name\": \"state\",\r\n\t\t\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"internalType\": \"struct Hbank.UserInfo\",\r\n\t\t\t\t\t\t\"name\": \"info\",\r\n\t\t\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetuserInfo[]\",\r\n\t\t\t\t\"name\": \"retuserInfo\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"UserAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getUserInfo\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"enum Hbank.KycState\",\r\n\t\t\t\t\t\t\"name\": \"state\",\r\n\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.UserInfo\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"pageIndex\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"pageCount\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getUserInfoList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"len\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"components\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"enum Hbank.KycState\",\r\n\t\t\t\t\t\t\t\t\"name\": \"state\",\r\n\t\t\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"internalType\": \"struct Hbank.UserInfo\",\r\n\t\t\t\t\t\t\"name\": \"info\",\r\n\t\t\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetuserInfo[]\",\r\n\t\t\t\t\"name\": \"retuserInfo\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"pageIndex\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"pageCount\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getWithdrawList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"len\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"key\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"status\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetCheck[]\",\r\n\t\t\t\t\"name\": \"retcheck\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"hbankWithdraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"interests\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"manager\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"userAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"modifyInformation\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"data\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"recharge\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"register\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_swap\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setHSwap\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setInterest\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_manager\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setManager\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"withDraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"receive\"\r\n\t}\r\n]\r\n\r\nconst hbank = serojs.callContract(hbankjson, config.hbankAddress);\r\n\r\nclass Abi {\r\n\r\n\tconstructor() {\r\n\t\tlet self = this;\r\n\t\tself.init = new Promise(\r\n\t\t\t(resolve, reject) => {\r\n\t\t\t\tseropp.init(config, function (rest) {\r\n\t\t\t\t\tif (rest === 'success') {\r\n\t\t\t\t\t\treturn resolve()\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject(rest)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tthis.getPopupInfo();\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\thash(data, callback) {\r\n\t\tcallback(keccak256(data).toString('hex'))\r\n\t}\r\n\r\n\tgetFullAddress(pkrs, callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getFullAddress\", [pkrs], function (rets) {\r\n\t\t\t\tcallback(rets);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetShortAddress(mianPKr, callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getShortAddress\", [mianPKr], function (rets) {\r\n\t\t\t\tcallback(rets);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tinitLanguage(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\tcallback(info.language);\r\n\t\t});\r\n\t}\r\n\r\n\tgetPopupInfo() {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\tlocalStorage.setItem(\"language\", info.language)\r\n\t\t\ti18n.changeLanguage(info.language).catch()\r\n\t\t});\r\n\t}\r\n\r\n\tgetTransactionReceipt(txHash, callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getTransactionReceipt\", [txHash], function (rest) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rest)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tstartGetTxReceipt(hash, callback) {\r\n\t\tconst self = this;\r\n\t\tToast.loading(\"Loading...\", 60)\r\n\t\tthis.getTransactionReceipt(hash, function (res) {\r\n\t\t\tif (res && res.result) {\r\n\t\t\t\tToast.hide();\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(res)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tself.startGetTxReceipt(hash, callback)\r\n\t\t\t\t}, 5000)\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcurrentAccount(callback) {\r\n\t\tseropp.getAccountList(function (datas) {\r\n\t\t\tfor (var i = 0; i < datas.length; i++) {\r\n\t\t\t\tif (datas[i].IsCurrent == undefined || datas[i].IsCurrent) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\tpk: datas[i].PK,\r\n\t\t\t\t\t\tmainPKr: datas[i].MainPKr,\r\n\t\t\t\t\t\tname: datas[i].Name,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\taccountDetails(pk, callback) {\r\n\t\tif (!pk) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseropp.getAccountDetail(pk, function (item) {\r\n\t\t\tcallback({ pk: item.PK, mainPKr: item.MainPKr, name: item.Name })\r\n\t\t});\r\n\t}\r\n\r\n\taccountList(callback) {\r\n\t\tseropp.getAccountList(function (data) {\r\n\t\t\tlet accounts = [];\r\n\t\t\tdata.forEach(function (item, index) {\r\n\t\t\t\taccounts.push({\r\n\t\t\t\t\tpk: item.PK,\r\n\t\t\t\t\tmainPKr: item.MainPKr,\r\n\t\t\t\t\tname: item.Name,\r\n\t\t\t\t\tIsCurrent: item.IsCurrent\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tcallback(accounts)\r\n\t\t});\r\n\t}\r\n\r\n\tisManager(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(contract, 'manager', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tisOwner(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(contract, 'owner', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tbalanceOf(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getBalance\", [contract.address, \"latest\"], function (rets) {\r\n\t\t\t\tlet balances = [];\r\n\t\t\t\tif (rets.result.tkn) {\r\n\t\t\t\t\tlet map = new Map(Object.entries(rets.result.tkn));\r\n\t\t\t\t\tmap.forEach((val, key) => {\r\n\t\t\t\t\t\tbalances.push({ token: key, value: new BigNumber(val).dividedBy(1e18).toFixed(3) });\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(balances);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\thbankBalanceOf(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getBalance\", [hbank.address, \"latest\"], function (rets) {\r\n\t\t\t\tlet balances = [];\r\n\t\t\t\tif (rets.result.tkn) {\r\n\t\t\t\t\tlet map = new Map(Object.entries(rets.result.tkn));\r\n\t\t\t\t\tmap.forEach((val, key) => {\r\n\t\t\t\t\t\tbalances.push({ token: key, value: new BigNumber(val).dividedBy(1e18).toFixed(3) });\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(balances);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpair(mainPKr, tokenA, tokenB, callback) {\r\n\t\tthis.callMethod(contract, 'pair', mainPKr, [tokenA, tokenB], function (rets) {\r\n\t\t\tcallback(rets[0]);\r\n\t\t});\r\n\t}\r\n\r\n\tpairList(mainPKr, callback) {\r\n\t\tthis.callMethod(contract, 'pairList', mainPKr, [0, 100], function (rets) {\r\n\t\t\tcallback(rets[0]);\r\n\t\t});\r\n\t}\r\n\r\n\tsetFeeRate(pk, mainPKr, tokenA, tokenB, fee, callback) {\r\n\t\tthis.executeMethod(contract, 'setFeeRate', pk, mainPKr, [tokenA, tokenB, fee], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tsetPair(pk, mainPKr, tokenA, tokenB, price, callback) {\r\n\t\tthis.executeMethod(contract, 'setPair', pk, mainPKr, [tokenA, tokenB, price], \"DECE\", 0, callback);\r\n\t}\r\n\texchange(pk, mainPKr, tokenA, value, tokenB, callback) {\r\n\t\tthis.executeMethod(contract, 'exchange', pk, mainPKr, [tokenA], tokenB, value, callback);\r\n\t}\r\n\r\n\twithdraw(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(contract, 'withdraw', pk, mainPKr, [token, value], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tsend(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(contract, '', pk, mainPKr, [], token, value, callback);\r\n\t}\r\n\r\n\tWithdrawIsManager(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(hbank, 'hbankWithdraw', pk, mainPKr, [token, value], \"DECE\", 0, callback);\r\n\t}\r\n\thbankFinancing(pk, mainPKr, financeAddr, tokenStr, value, params, callback) {\r\n\t\tthis.executeMethod(hbank, 'financing', pk, mainPKr, [financeAddr, tokenStr, value, params], \"DECE\", 0, callback)\r\n\t}\r\n\r\n\thbankSend(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(hbank, '', pk, mainPKr, [], token, value, callback);\r\n\t}\r\n\r\n\thbankexchange(pk, mainPKr, tokenA, value, tokenB, callback) {\r\n\t\tthis.executeMethod(hbank, 'exchange', pk, mainPKr, [tokenB, value, tokenA], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\thbankRecharge(pk, mainPKr, value, data, currency, callback) {\r\n\t\tthis.executeMethod(hbank, 'recharge', pk, mainPKr, [data], currency, value, callback);\r\n\t}\r\n\thbankWithDraw(pk, mainPKr, value, currency, callback) {\r\n\t\tthis.executeMethod(hbank, 'withDraw', pk, mainPKr, [currency, value], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\r\n\thbankisManager(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'manager', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\thbankisOwner(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'owner', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tgetBalances(mainPKr, callback) {\r\n\t\tlet value = [\"DECE\", \"DKRW\"];\r\n\t\tthis.callMethod(hbank, 'getBalances', mainPKr, [value], function (res) {\r\n\t\t\tcallback(res.item);\r\n\t\t})\r\n\t}\r\n\r\n\tgetRecords(mainPKr, cy, index, count, callback) {\r\n\t\tthis.callMethod(hbank, 'getRecords', mainPKr, [cy, index, count], function (res) {\r\n\t\t\tcallback(res);\r\n\t\t})\r\n\t}\r\n\r\n\tgetUserInfoList(mainPKr,pageindex,pagecount, callback) {\r\n\t\tlet self = this;\r\n\r\n\t\tself.callMethod(hbank, 'getUserInfoList', mainPKr, [pageindex,pagecount], function (res) {\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retuserInfo,res.len);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\tgetCheckList(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'getCheckList', mainPKr, [], function (res) {\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retcheck);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tgetWithdrawList(mainPKr,pageindex,pagecount, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'getWithdrawList', mainPKr, [pageindex,pagecount], function (res) {\r\n\t\t\tconsole.log(res,res.len,\"--------------------------getWithdrawList\")\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retcheck,res.len);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tgetRegisterList(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'getRegisterList', mainPKr, [], function (res) {\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retuserInfo);\r\n\t\t\t})\r\n\r\n\t\t})\r\n\t}\r\n\tgetInterestsList(mainPKr, callback) {\r\n\t\tlet value = [\"DECE\", \"DKRW\"];\r\n\t\tthis.callMethod(hbank, 'getInterestsList', mainPKr, [value], function (res) {\r\n\t\t\tcallback(res.item);\r\n\t\t})\r\n\t}\r\n\r\n\tsetInterest(pk, mainPKr, cy, iRate, callback) {\r\n\t\tthis.executeMethod(hbank, 'setInterest', pk, mainPKr, [cy, iRate], \"DECE\", 0, callback)\r\n\t}\r\n\r\n\tregister(pk, mainPKr, name, phone, email, code, callback) {\r\n\t\tthis.executeMethod(hbank, 'register', pk, mainPKr, [name, phone, email, code], \"DECE\", 0, callback)\r\n\t}\r\n\r\n\tgetUserInfo(mainPKr, callback) {\r\n\t\tthis.callMethod(hbank, 'getUserInfo', mainPKr, [mainPKr], function (res) {\r\n\t\t\tcallback(res);\r\n\t\t})\r\n\t}\r\n\r\n\treviewUser(pk, mainPKr, keys, whether, callback) {\r\n\t\tthis.executeMethod(hbank, 'checkUsers', pk, mainPKr, [keys, whether], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\treview(pk, mainPKr, keys, whether, callback) {\r\n\t\tthis.executeMethod(hbank, 'check', pk, mainPKr, [keys, whether], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tcallMethod(contract, _method, from, _args, callback) {\r\n\t\tlet packData = contract.packData(_method, _args);\r\n\t\tlet callParams = {\r\n\t\t\tfrom: from,\r\n\t\t\tto: contract.address,\r\n\t\t\tdata: packData\r\n\t\t};\r\n\t\tconsole.log(_method, \"callParams\", callParams)\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_call\", [callParams, \"latest\"], function (rets) {\r\n\t\t\t\tlet data = rets.result\r\n\t\t\t\tif (data !== \"0x0\") {\r\n\t\t\t\t\tlet res = contract.unPackDataEx(_method, data);\r\n\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\tcallback(res);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback(\"0x0\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\texecuteMethod(contract, _method, pk, mainPKr, args, tokenName, value, callback) {\r\n\t\tconsole.log(_method, args);\r\n\t\tlet packData = \"0x\";\r\n\r\n\t\tif (\"\" !== _method) {\r\n\t\t\tpackData = contract.packData(_method, args);\r\n\t\t}\r\n\r\n\t\tlet executeData = {\r\n\t\t\tfrom: pk,\r\n\t\t\tto: contract.address,\r\n\t\t\tvalue: \"0x\" + value.toString(16),\r\n\t\t\tdata: packData,\r\n\t\t\tgasPrice: \"0x\" + new BigNumber(\"1000000000\").toString(16),\r\n\t\t\tcy: tokenName\r\n\t\t};\r\n\r\n\t\tlet estimateParam = {\r\n\t\t\tfrom: mainPKr,\r\n\t\t\tto: contract.address,\r\n\t\t\tvalue: \"0x\" + value.toString(16),\r\n\t\t\tdata: packData,\r\n\t\t\tgasPrice: \"0x\" + new BigNumber(\"1000000000\").toString(16),\r\n\t\t\tcy: tokenName\r\n\t\t};\r\n\r\n\t\tconsole.log(estimateParam, \"estimateParam\")\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_estimateGas\", [estimateParam], function (ret) {\r\n\t\t\t\tif (ret.error) {\r\n\t\t\t\t\tToast.fail(\"Failed to execute smart contract\")\r\n\t\t\t\t} else {\r\n\t\t\t\t\texecuteData[\"gas\"] = ret.result;\r\n\t\t\t\t\tseropp.executeContract(executeData, function (res, error) {\r\n\t\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\t\tcallback(res, error)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst abi = new Abi();\r\nexport default abi;","H:\\hbank\\src\\pages\\financial\\financial.js",["112","113"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, Button } from 'antd-mobile';\r\nimport Nav from '../../component/nav'\r\nimport BigNumber from 'bignumber.js'\r\nimport i18n from '../../i18n';\r\nimport logo from '../../images/logo.png'\r\nimport abi from '../../api/abi';\r\n\r\nconst Web3EthAbi = require('web3-eth-abi');\r\nconst bs58 = require('bs58')\r\n\r\nclass Financial extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    hbankFinancing = (financeAddr, tokenStr, value, useraddress, detail) => {\r\n        let self = this;\r\n        self.addressTranslation(financeAddr, function (financeAddrres) {\r\n            abi.getShortAddress(useraddress, function (data) {\r\n                let arr = [];\r\n                arr[0] = data.result\r\n                arr[1] = detail;\r\n                let params = Web3EthAbi.encodeParameters(['address', 'string'], arr);\r\n                abi.hbankFinancing(self.state.account.pk, self.state.account.mainPKr, financeAddrres, tokenStr, value, params, function (res) {\r\n                    console.log(res)\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    addressTranslation = (financeAddr, callback) => {\r\n        let bytes = bs58.decode(financeAddr).toString('hex') + '0000000000000000000000000000000000000000000000000000000000000000';\r\n        callback(bs58.encode(Buffer.from(bytes, 'hex')))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                DeFi{i18n.t(\"assetmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <div className=\"content\">\r\n                    {/* <Button onClick={() => this.hbankFinancing('5ef4Wu3CgBjy5hNWv4qxRRbRs47NkP6ZXUB3D8whrbcxRLLmz77UsKYVbdyBjJasLXiG8HUKNocJorQVnmAd8p1K', 'DKRW', new BigNumber(12e21).toString(), this.state.account.mainPKr, 'iS6nMFMbwZY')}>测试</Button> */}\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Financial;\r\n","H:\\hbank\\src\\pages\\my\\my.js",[],"H:\\hbank\\src\\component\\nav.js",[],"H:\\hbank\\src\\App.js",[],["114","115"],"H:\\hbank\\src\\i18n.js",[],["116","117"],"H:\\hbank\\src\\api\\common.js",["118"],"import BigNumber from \"bignumber.js\";\r\n\r\nexport function bytes32ToToken(data) {\r\n    try{\r\n        let index = data.indexOf(\"00\", 2);\r\n        let bytes = Buffer.from(data.substring(2, index), \"hex\");\r\n\r\n        return String.fromCharCode.apply(String, bytes).trim();\r\n    }catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\nexport function tokenToBytes(token) {\r\n    try {\r\n        let bytes = Buffer.alloc(32);\r\n        bytes.fill(token, 0, token.length);\r\n        return \"0x\" + bytes.toString('hex');\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function showValue(val, decimals, decimalPlaces) {\r\n    if (!val) {\r\n        val = 0;\r\n    }\r\n    if (!decimals) {\r\n        decimals = 18;\r\n    }\r\n    if (!decimalPlaces) {\r\n        decimalPlaces = 3;\r\n    }\r\n    let num = new BigNumber(val).dividedBy(new BigNumber(10).pow(decimals));\r\n\r\n    return num.toFixed(decimalPlaces, 1);\r\n}\r\n\r\nexport function showPK(pk, len) {\r\n    if (!pk) {\r\n        return \"\";\r\n    }\r\n    if (!len) {\r\n        len = 8;\r\n    }\r\n    return pk.slice(0, len) + \"...\" + pk.slice(-len)\r\n}\r\n\r\nexport function trimNumber(numberStr, decimalPlaces) {\r\n    let vals = numberStr.split(\".\")\r\n    if (vals.length < 2) {\r\n        return numberStr;\r\n    } else {\r\n        let index = -1;\r\n        let decimal = vals[1];\r\n        for (let i = decimal.length - 1; i >= 0; i--) {\r\n            if (decimal.charAt(i) != '0') {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        decimal = decimal.substring(0, index + 1);\r\n        let numStr = vals[0];\r\n        if (decimal.length > decimalPlaces) {\r\n            decimal = decimal.substring(0, decimalPlaces);\r\n        }\r\n        if (decimal.length > 0) {\r\n            numStr += \".\" + decimal;\r\n        }\r\n        return numStr\r\n    }\r\n}\r\n",["119","120"],"H:\\hbank\\src\\pages\\register\\register.js",["121","122","123","124","125","126"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n// import { randomBytes } from \"crypto\";\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, InputItem, Button, WhiteSpace } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n'\r\nimport logo from '../../images/logo.png';\r\nimport './register.css';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport abi from '../../api/abi';\r\nimport axios from 'axios'\r\nimport { bigNumberify } from 'serojs/js-sero-utils/utils';\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            hasError: false,\r\n            emailError: false,\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            userState: 0,\r\n            submitLoading: false,\r\n            file: '',\r\n            imgurl: '',\r\n            imgurlone: '',\r\n            idstr: \"\",\r\n            imgtype: \"\",\r\n        }\r\n        this.fileInputEl = React.createRef();\r\n        this.fileInputEls = React.createRef();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getUser(obj.mainPKr);\r\n        console.log(obj);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = \"\";\r\n            if (res[0].state == '0') {\r\n                codestr = \"idcard\";\r\n            } else {\r\n                codestr = res[0].code.substring(2, res[0].code.length);\r\n            }\r\n            self.setState({\r\n                name: res[0].name,\r\n                phone: res[0].phone,\r\n                email: res[0].email,\r\n                imgurl: 'https://13.124.240.238/images/' + codestr + '_0.png',\r\n                imgurlone: 'https://13.124.240.238/images/' + codestr + '_1.png',\r\n                userState: res[0].state\r\n            })\r\n        })\r\n    }\r\n\r\n    handlePhoto = async (event, type) => {\r\n        let self = this;\r\n        const files = [...event.target.files];\r\n        console.log(files[0])\r\n        self.compressImage(files[0], function (img) {\r\n            console.log(img)\r\n            var formData = new FormData();\r\n            formData.append(\"image\", img);\r\n            abi.hash(self.state.account.pk, function (code) {\r\n                console.log(code)\r\n                let urls = 'https://13.124.240.238/upload/?nomark=0&accessToken=000&id=' + type + '&code=' + code;\r\n                axios({\r\n                    method: 'post',\r\n                    url: urls,\r\n                    data: formData\r\n                }).then((res) => {\r\n                    Toast.success(`${i18n.t(\"UploadSuccessfully\")}`, 2);\r\n                    let str = 'https://13.124.240.238/images/' + code + '_' + type + '.png' + \"?v=\" + new Date().getTime();\r\n                    if (type === 0) {\r\n                        self.setState({\r\n                            imgurl: str\r\n                        })\r\n                    } else {\r\n                        self.setState({\r\n                            imgurlone: str\r\n                        })\r\n                    }\r\n                    self.forceUpdate();\r\n                }).catch((err) => {\r\n                    Toast.fail(`${i18n.t(\"ReselectPicture\")}`, 2);\r\n                    console.log(err);\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n    compressImage = (file, callback) => {\r\n        let maxsize = Math.pow(1024, 2);\r\n        let quality = 0;\r\n        if (file.size < maxsize) {\r\n            quality = 1;\r\n        } else {\r\n            quality = new BigNumber(maxsize).div(file.size).toFixed(1);\r\n        }\r\n        console.log(quality)\r\n        var name = file.name;\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function (e) {\r\n            var src = e.target.result;\r\n            var img = new Image();\r\n            img.src = src;\r\n            img.onload = function (e) {\r\n                var w = img.width;\r\n                var h = img.height;\r\n                var canvas = document.createElement('canvas');\r\n                var ctx = canvas.getContext('2d');\r\n                var anw = document.createAttribute(\"width\");\r\n                anw.nodeValue = w;\r\n                var anh = document.createAttribute(\"height\");\r\n                anh.nodeValue = h;\r\n                canvas.setAttributeNode(anw);\r\n                canvas.setAttributeNode(anh);\r\n                ctx.fillStyle = \"#fff\";\r\n                ctx.fillRect(0, 0, w, h);\r\n                ctx.drawImage(img, 0, 0, w, h);\r\n                var base64 = canvas.toDataURL('image/webp', quality); \r\n                var bytes = window.atob(base64.split(',')[1]);\r\n                var ab = new ArrayBuffer(bytes.length);\r\n                var ia = new Uint8Array(ab);\r\n                for (var i = 0; i < bytes.length; i++) {\r\n                    ia[i] = bytes.charCodeAt(i);\r\n                }\r\n                file = new Blob([ab], { type: 'image/png' });\r\n                file.name = name;\r\n                callback(file);\r\n            };\r\n\r\n            img.onerror = function (e) {\r\n                console.error(e)\r\n            };\r\n        };\r\n        reader.onerror = function (e) {\r\n            console.error(e)\r\n        };\r\n    };\r\n\r\n    onErrorClick = () => {\r\n        if (this.state.hasError) {\r\n            Toast.info('Please enter 11 digits');\r\n        }\r\n    }\r\n\r\n    onEmailErrorClick = () => {\r\n        if (this.state.emailError) {\r\n            Toast.info('Please enter e-mail');\r\n        }\r\n    }\r\n    onChangesphone = (value) => {\r\n        // if (value.replace(/^(00)?82\\-?0[71](?:\\d{8,9})$/, '').length < 11) {\r\n        //     this.setState({\r\n        //         hasError: true,\r\n        //     });\r\n        // } else {\r\n        //     this.setState({\r\n        //         hasError: false,\r\n        //     });\r\n        // }\r\n        this.setState({\r\n            phone: value\r\n        });\r\n    }\r\n    onChangesname = (value) => {\r\n        this.setState({\r\n            name: value\r\n        });\r\n    }\r\n    changeState = () => {\r\n        this.setState({\r\n            userState: 0\r\n        })\r\n        this.forceUpdate();\r\n\r\n        console.log(this.state.userState)\r\n    }\r\n    onChangesemail = (value) => {\r\n        // if (value.replace(/^(00)?82\\-?0[71](?:\\d{8,9})$/, '').length < 11) {\r\n        //     this.setState({\r\n        //         emailError: true,\r\n        //     });\r\n        // } else {\r\n        //     this.setState({\r\n        //         emailError: false,\r\n        //     });\r\n        // }\r\n        this.setState({\r\n            email: value\r\n        });\r\n    }\r\n\r\n    submit = () => {\r\n        let self = this;\r\n        if (self.state.name.length > 0 && self.state.phone.length > 0 && self.state.email.length > 0) {\r\n            abi.hash(self.state.account.pk, function (code) {\r\n\r\n                abi.register(self.state.account.pk, self.state.account.pk, self.state.name, self.state.phone, self.state.email, \"0x\" + code, function (hash, err) {\r\n                    if (err) {\r\n                        Toast.fail(err);\r\n                    } else {\r\n                        abi.startGetTxReceipt(hash, function (data) {\r\n                            self.getUser(self.state.account.mainPKr);\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"RegistrationMessage\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    {\r\n                        self.state.userState == '0' ? <div>\r\n                            <div className=\"content\">\r\n                                <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                    <InputItem\r\n                                        type=\"text\"\r\n                                        placeholder=\"input your name\"\r\n                                        onChange={this.onChangesname}\r\n                                        value={this.state.name}\r\n                                    >{i18n.t(\"Name\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"phone\"\r\n                                        placeholder=\"input your phone\"\r\n                                        // error={this.state.hasError}\r\n                                        // onErrorClick={this.onErrorClick}\r\n                                        onChange={this.onChangesphone}\r\n                                        value={this.state.phone}\r\n                                    >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"email\"\r\n                                        placeholder=\"input your e-mail\"\r\n                                        // error={this.state.emailError}\r\n                                        // onErrorClick={this.onEmailErrorClick}\r\n                                        onChange={this.onChangesemail}\r\n                                        value={this.state.email}\r\n                                    >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"FrontofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEl}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 0)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEl.current.click() }} src={this.state.imgurl} />\r\n                                    </div>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"ReversesideofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEls}\r\n                                                accept=\"image/*\"\r\n                                                // accept=\".jpg,.jpeg,.jpg\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 1)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEls.current.click() }} src={this.state.imgurlone} />\r\n                                    </div>\r\n                                    <WhiteSpace size=\"sm\" />\r\n                                </List>\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                            <div className=\"content\">\r\n                                <Button size='small' type='primary' onClick={() => this.submit()}>{i18n.t(\"submit\")}</Button>\r\n                            </div>\r\n                        </div> : <div>\r\n                                {\r\n                                    self.state.userState == '1' ? <div>\r\n                                        <div className=\"content\">\r\n                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                <InputItem\r\n                                                    type=\"text\"\r\n                                                    disabled\r\n                                                    value={this.state.name}\r\n                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"phone\"\r\n                                                    disabled\r\n                                                    value={this.state.phone}\r\n                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"email\"\r\n                                                    disabled\r\n                                                    value={this.state.email}\r\n                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurl} />\r\n                                                </div>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurlone} />\r\n                                                </div>\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                            </List>\r\n                                        </div>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <div className=\"content\">\r\n                                            <Button size='small'>{i18n.t(\"UnderReview\")}</Button>\r\n                                        </div>\r\n                                    </div> : <div>\r\n                                            {\r\n                                                self.state.userState == '2' ? <div>\r\n                                                    <div className=\"content\">\r\n                                                        <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                            <InputItem\r\n                                                                type=\"text\"\r\n                                                                disabled\r\n                                                                value={this.state.name}\r\n                                                            >{i18n.t(\"Name\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"phone\"\r\n                                                                disabled\r\n                                                                value={this.state.phone}\r\n                                                            >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"email\"\r\n                                                                disabled\r\n                                                                value={this.state.email}\r\n                                                            >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"FrontofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurl} />\r\n                                                            </div>\r\n                                                            <WhiteSpace />\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurlone} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                        </List>\r\n                                                    </div>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div> : <div>\r\n                                                        <div className=\"content\">\r\n                                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                                <InputItem\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.name}\r\n                                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"phone\"\r\n                                                                    value={this.state.phone}\r\n                                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"email\"\r\n                                                                    value={this.state.email}\r\n                                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurl} />\r\n                                                                </div>\r\n                                                                <WhiteSpace />\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurlone} />\r\n                                                                </div>\r\n                                                                <WhiteSpace size=\"sm\" />\r\n                                                            </List>\r\n                                                        </div>\r\n                                                        <WhiteSpace size=\"sm\" />\r\n                                                        <div className=\"content\">\r\n                                                            <Flex>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='warning'>{i18n.t(\"RegistrationInformation\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='primary' onClick={() => this.changeState()}>{i18n.t(\"edit\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            }\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                    }\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n",["127","128"],"H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js",["129","130"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, InputItem, Modal, WhiteSpace, Toast, Card, Button } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n';\r\nimport BigNumber from 'bignumber.js'\r\nimport logo from '../../images/logo.png';\r\nimport './ratesetting.css';\r\nimport abi from '../../api/abi';\r\nconst alert = Modal.alert;\r\n\r\nclass Ratesetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            interestslist: [],\r\n            dataList: []\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getInterestsList(obj.mainPKr);\r\n        self.getBalanceOf();\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getBalanceOf() {\r\n        let self = this;\r\n        abi.getInterestsList(self.state.account.mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {\r\n                    token: \"\",\r\n                    value: 0,\r\n                    url: \"\",\r\n                    iRate: 0\r\n                }\r\n                obj.iRate =new BigNumber(res[i].iRate ).div(10**9).toFixed(3,1);\r\n                obj.token = res[i].cy;\r\n                obj.url = 'https://13.124.240.238/images/a' + res[i].cy + '_0.png';\r\n                arr.push(obj);\r\n            }\r\n            abi.hbankBalanceOf(function (data) {\r\n                if (data != \"\") {\r\n                    for (let j = 0; j < data.length; j++) {\r\n                        for (let k = 0; k < arr.length; k++) {\r\n                            if (data[j].token == arr[k].token) {\r\n                                arr[k].value = data[j].value\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                self.setState({\r\n                    dataList: arr\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getInterestsList(mainPKr) {\r\n        let self = this;\r\n        abi.getInterestsList(mainPKr, function (res) {\r\n            self.setState({\r\n                interestslist: res\r\n            })\r\n        })\r\n    }\r\n\r\n    hbankSend(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.hbankSend(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    WithdrawIsManager(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.WithdrawIsManager(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setInterest(pk, mainPKr, cy, value) {\r\n        let self = this;\r\n        abi.setInterest(pk, mainPKr, cy, new BigNumber(value).multipliedBy(10**9).toFixed(0)*1, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"Bankmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                {\r\n                                    self.state.dataList.map((item, key) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Card key={key}>\r\n                                                    <Card.Header\r\n                                                        title={item.token}\r\n                                                        thumb={item.url}\r\n                                                        extra={<div>\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"Balance\")}： */}\r\n                                                                {item.value}</span></div>\r\n                                                                <WhiteSpace />\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"AnnualInterestRate\")}： */}\r\n                                                                {item.iRate}% &nbsp;<a onClick={() => {\r\n                                                                    alert(\"\", <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder={item.iRate}\r\n                                                                                extra=\"%\"\r\n                                                                                ref={el => this.feeInputRef = el}>RATE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let rate = this.feeInputRef.state.value;\r\n                                                                                self.setInterest(self.state.account.pk, self.state.account.mainPKr, token, rate)\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"modify\")}</a></span></div>\r\n                                                        </div>}\r\n                                                    />\r\n                                                    <Card.Body>\r\n                                                        <Flex style={{ textAlign: 'center' }}>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                                self.hbankSend(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                                self.WithdrawIsManager(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                        </Flex>\r\n                                                        <WhiteSpace />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <WhiteSpace />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ratesetting;","H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js",["131","132"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, Checkbox, Button, WhiteSpace, Modal, Pagination, Tabs } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js';\r\nimport i18n from '../../i18n'\r\nimport Nav from '../../component/nav';\r\nimport logo from '../../images/logo.png';\r\nimport './withdrawlist.css';\r\nimport abi from '../../api/abi';\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\nconst tabs2 = [\r\n    { title: `${i18n.t(\"Auditlist\")}`, sub: '1' },\r\n    { title: `${i18n.t(\"WithdrawalList\")}`, sub: '2' },\r\n];\r\nclass Withdrawlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            datalist: [],\r\n            Withdrawlist: [],\r\n            WithdrawlistState: true,\r\n            pageIndex: 0,\r\n            pageCount: 10,\r\n            len: 0,\r\n            showmodal: false,\r\n            username: \"\",\r\n            useremail: \"\",\r\n            userphone: \"\",\r\n            userimgurl: \"\",\r\n            userimgurlone: \"\",\r\n            userstate: \"\",\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getData(obj.mainPKr);\r\n        self.getWithdrawList(obj.mainPKr, 0, self.state.pageCount)\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getreview(whether) {\r\n        let self = this;\r\n        let keys = [];\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].checked) {\r\n                keys.push(arr[i].key)\r\n            }\r\n        }\r\n        if (keys.length > 0) {\r\n            abi.review(self.state.account.pk, self.state.account.mainPKr, keys, whether, function (hash, err) {\r\n                if (err) {\r\n                    Toast.fail(err);\r\n                } else {\r\n                    abi.startGetTxReceipt(hash, function () {\r\n                        self.getData(self.state.account.mainPKr);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    getData(mainPKr) {\r\n        let self = this;\r\n        abi.getCheckList(mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                obj.checked = false;\r\n                arr.push(obj);\r\n            }\r\n            self.setState({\r\n                datalist: arr\r\n            })\r\n        })\r\n    }\r\n\r\n    getWithdrawList(mainPKr, pageIndex, pageCount) {\r\n        let self = this;\r\n        abi.getWithdrawList(mainPKr, pageIndex, pageCount, function (res, len) {\r\n            if (len == 0) {\r\n                self.setState({\r\n                    WithdrawlistState: false\r\n                })\r\n            }\r\n            let pageNum = Math.ceil(len / self.state.pageCount) - 1;\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.status = res[i].status;\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                arr.push(obj);\r\n            }\r\n\r\n            self.setState({\r\n                Withdrawlist: arr,\r\n                len: pageNum,\r\n                pageIndex: pageIndex,\r\n            })\r\n            Toast.hide()\r\n        })\r\n    }\r\n\r\n    onChange = (val) => {\r\n        let self = this;\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].i === val) {\r\n                arr[i].checked = !arr[i].checked;\r\n            }\r\n        }\r\n        this.setState({\r\n            datalist: arr\r\n        })\r\n    }\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        Toast.loading(\"Loading...\", 5)\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = res[0].code.substring(2, res[0].code.length);\r\n            self.setState({\r\n                username: res[0].name,\r\n                useremail: res[0].email,\r\n                userphone: res[0].phone,\r\n                userimgurl: 'https://13.124.240.238/images/' + codestr + '_0.png',\r\n                userimgurlone: 'https://13.124.240.238/images/' + codestr + '_1.png',\r\n                userstate: \"\",\r\n                showmodal: true\r\n            })\r\n        })\r\n    }\r\n    goToPage = (index) => {\r\n        let self = this;\r\n        let pageIndex = self.state.pageIndex + index;\r\n        if (pageIndex >= 0 && pageIndex <= self.state.len) {\r\n            Toast.loading(\"Loading...\", 60)\r\n            self.getWithdrawList(self.state.account.mainPKr, pageIndex, self.state.pageCount);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"WithdrawalReview\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <div>\r\n                            <div className=\"mytabboxs\">\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <Tabs tabs={tabs2}\r\n                                    initialPage={0}\r\n                                    animated={false}\r\n                                    useOnPan={false}\r\n                                    renderTab={tab => <span>{tab.title}</span>\r\n                                    }\r\n                                    onTabClick={console.log(\"111\")}\r\n                                >\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        <List className=\"mytabbox-item\">\r\n                                            {self.state.datalist.map(item => (\r\n                                                <CheckboxItem checked={item.checked} key={item.i} onChange={() => this.onChange(item.i)}>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：{item.time}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex className=\"textover\">\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>{i18n.t(\"WalletAddress\")}：{item.owner.substring(0, 6)}···{item.owner.substring(item.owner.length - 6, item.owner.length)}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                </CheckboxItem>\r\n                                            ))}\r\n                                        </List>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        {\r\n                                            self.state.datalist.length > 0 ? <div>\r\n                                                <Flex>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' type='primary' onClick={() => this.getreview(true)}>{i18n.t(\"Pass\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' onClick={() => this.getreview(false)}>{i18n.t(\"Fail\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                            </div> : <div className=\"center\">{i18n.t(\"NoAuditRecord\")}</div>\r\n                                        }\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n\r\n\r\n\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        {self.state.Withdrawlist.map(item => (\r\n                                            <List className=\"mytabbox-item\">\r\n\r\n                                                <div key={item.i} >\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：<span style={{ wordWrap: \"break-word\" }}>{item.time}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"status\")}：<span>{item.status == '0' ? <span>{i18n.t(\"passed\")}</span> : <span>{i18n.t(\"notpass\")}</span>}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex className=\"textover\">\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>{i18n.t(\"WalletAddress\")}：{item.owner.substring(0, 10)}···{item.owner.substring(item.owner.length - 8, item.owner.length)}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div>\r\n                                            </List>\r\n                                        ))}\r\n\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <Flex>\r\n                                            <Pagination\r\n                                                total={self.state.len + 1}\r\n                                                className=\"custom-pagination-with-icon\"\r\n                                                current={self.state.pageIndex + 1}\r\n                                                locale={{\r\n                                                    prevText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(-1)}>{i18n.t(\"Prev\")}</Button>),\r\n                                                    nextText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(1)}>{i18n.t(\"Next\")}</Button>),\r\n                                                }}\r\n                                            />\r\n                                        </Flex>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n\r\n\r\n                <Modal\r\n                    visible={this.state.showmodal}\r\n                    transparent\r\n                    maskClosable={false}\r\n                    title={i18n.t(\"UserInfo\")}\r\n                    footer={[{\r\n                        text: `${i18n.t(\"close\")}`, onPress: () => {\r\n                            self.setState({\r\n                                showmodal: false\r\n                            })\r\n                        }\r\n                    }]}\r\n                >\r\n                    <div>\r\n                        <List className=\"mytabbox-item\">\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"username\")}：{self.state.username}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"phone\")}：{self.state.userphone}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"mail\")}：{self.state.useremail}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"FrontofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimg\">\r\n                                <img src={self.state.userimgurl} />\r\n                            </div>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimg\">\r\n                                <img src={self.state.userimgurlone} />\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                        </List>\r\n                    </div>\r\n                </Modal>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Withdrawlist;","H:\\hbank\\src\\pages\\userlist\\userlist.js",["133","134"],"H:\\hbank\\src\\pages\\bank\\bank.js",["135","136","137","138","139","140"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport Nav from '../../component/nav'\r\nimport i18n from '../../i18n'\r\nimport { WingBlank, WhiteSpace, Flex, Modal, InputItem, Toast, Card, Button } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport abi from '../../api/abi.js'\r\nimport logo from '../../images/logo.png'\r\nimport { bytes32ToToken } from \"../../api/common\";\r\nimport { call } from 'sero-pp';\r\nimport { callbackHandler } from 'sero-pp/lib/sero-pp';\r\n\r\n\r\nconst alert = Modal.alert;\r\nclass Bank extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            balances: [],\r\n            dataList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({ account: obj });\r\n        self.getList(obj.mainPKr);\r\n    }\r\n\r\n    getList(mainPKr) {\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (data) {\r\n            let arr = [];\r\n            if (data != []) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    arr.push(bytes32ToToken(data[i].tokenA));\r\n                    arr.push(bytes32ToToken(data[i].tokenB));\r\n                }\r\n            }\r\n            let arrimg = [];\r\n            if (Array.from(new Set(arr)) != []) {\r\n                for (let i = 0; i < Array.from(new Set(arr)).length; i++) {\r\n                    let obj = {\r\n                        token: \"\",\r\n                        value: '0.000',\r\n                        url: \"\"\r\n                    }\r\n                    obj.token = Array.from(new Set(arr))[i];\r\n                    obj.url = 'https://13.124.240.238/images/a' + Array.from(new Set(arr))[i] + '_0.png';\r\n                    arrimg.push(obj);\r\n                }\r\n            }\r\n            self.getBalanceOf(arrimg);\r\n        })\r\n    }\r\n    getBalanceOf(arr) {\r\n        let self = this;\r\n\r\n        abi.balanceOf(function (res) {\r\n            console.log(res)\r\n            if (res != []) {\r\n                for (let i = 0; i < res.length; i++) {\r\n                    for (let j = 0; j < arr.length; j++) {\r\n                        if (res[i].token == arr[j].token) {\r\n                            arr[j].value = res[i].value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            self.setState({\r\n                dataList: arr\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    send(token, value) {\r\n        let self = this;\r\n        abi.send(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    withdraw(token, value) {\r\n        let self = this;\r\n        abi.withdraw(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setPair(tokenA, tokenB, price) {\r\n        let self = this;\r\n\r\n        abi.setPair(this.state.account.pk, this.state.account.mainPKr, tokenA, tokenB, price, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setFeeRate(tokenA, tokenB, fee) {\r\n        let self = this;\r\n        abi.setFeeRate(this.state.account.pk, this.state.account.mainPKr, tokenA, tokenB, fee, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <WingBlank>\r\n                <Nav selectedTab=\"4\">\r\n                    <div className=\"tabcontent\">\r\n                        <Flex className=\"header\">\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <img src={logo} alt=\"logo\" />\r\n                                <p className='title'>\r\n                                    {i18n.t(\"Exchangemanagement\")}\r\n                                </p>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <Flex style={{ textAlign: 'center' }}>\r\n                                    <Flex.Item>\r\n                                        <Button size=\"small\" onClick={() => {\r\n                                            alert(\"\", <div>\r\n                                                <div>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenA\"\r\n                                                        ref={el => this.tokenAInputRef = el}>TOKENA:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenB\"\r\n                                                        ref={el => this.tokenBInputRef = el} onChange={() => {\r\n\r\n                                                        }}>TOKENB:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"price\"\r\n                                                        ref={el => this.priceInputRef = el}>Price:</InputItem>\r\n                                                </div>\r\n                                            </div>, [\r\n                                                { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                {\r\n                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                        let tokenA = this.tokenAInputRef.state.value.trim();\r\n                                                        let tokenB = this.tokenBInputRef.state.value.trim();\r\n                                                        let price = new BigNumber(this.priceInputRef.state.value).multipliedBy(1e9).toFixed(0);\r\n                                                        self.setPair(tokenA, tokenB, price);\r\n                                                    }\r\n                                                },\r\n                                            ])\r\n                                        }}>{i18n.t(\"SetPrice\")}</Button>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <Button size=\"small\" onClick={() => {\r\n                                            alert(\"\", <div>\r\n                                                <div>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenA\"\r\n                                                        ref={el => this.tokenAInputRef = el}>TOKENA:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenB\"\r\n                                                        ref={el => this.tokenBInputRef = el} onChange={() => {\r\n\r\n                                                        }}>TOKENB:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"fee\"\r\n                                                        extra=\"%\"\r\n                                                        ref={el => this.feeInputRef = el}>Fee:</InputItem>\r\n                                                </div>\r\n                                            </div>, [\r\n                                                { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                {\r\n                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                        let tokenA = this.tokenAInputRef.state.value.trim();\r\n                                                        let tokenB = this.tokenBInputRef.state.value.trim();\r\n                                                        let fee = new BigNumber(this.feeInputRef.state.value).multipliedBy(100).toFixed(0);\r\n                                                        self.setFeeRate(tokenA, tokenB, fee)\r\n                                                    }\r\n                                                },\r\n                                            ])\r\n                                        }}>{i18n.t(\"SetRate\")}</Button>\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                {\r\n                                    self.state.dataList.map((item, key) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Card key={key}>\r\n                                                    <Card.Header\r\n                                                        title={item.token}\r\n                                                        thumb={item.url}\r\n                                                        extra={<span>{item.value}</span>}\r\n                                                    />\r\n                                                    <Card.Body>\r\n                                                        <Flex style={{ textAlign: 'center' }}>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                                self.send(token, value);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                                self.withdraw(token, value);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                        </Flex>\r\n                                                        <WhiteSpace />\r\n\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <WhiteSpace />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                    </div>\r\n                </Nav>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bank;",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":88,"column":25,"nodeType":"147","messageId":"148","endLine":88,"endColumn":27},{"ruleId":"145","severity":1,"message":"146","line":153,"column":51,"nodeType":"147","messageId":"148","endLine":153,"endColumn":53},{"ruleId":"145","severity":1,"message":"146","line":155,"column":59,"nodeType":"147","messageId":"148","endLine":155,"endColumn":61},{"ruleId":"145","severity":1,"message":"146","line":157,"column":68,"nodeType":"147","messageId":"148","endLine":157,"endColumn":70},{"ruleId":"145","severity":1,"message":"146","line":158,"column":72,"nodeType":"147","messageId":"148","endLine":158,"endColumn":74},{"ruleId":"145","severity":1,"message":"146","line":162,"column":63,"nodeType":"147","messageId":"148","endLine":162,"endColumn":65},{"ruleId":"145","severity":1,"message":"146","line":163,"column":67,"nodeType":"147","messageId":"148","endLine":163,"endColumn":69},{"ruleId":"145","severity":1,"message":"146","line":164,"column":71,"nodeType":"147","messageId":"148","endLine":164,"endColumn":73},{"ruleId":"145","severity":1,"message":"146","line":174,"column":51,"nodeType":"147","messageId":"148","endLine":174,"endColumn":53},{"ruleId":"145","severity":1,"message":"146","line":174,"column":69,"nodeType":"147","messageId":"148","endLine":174,"endColumn":71},{"ruleId":"145","severity":1,"message":"146","line":174,"column":87,"nodeType":"147","messageId":"148","endLine":174,"endColumn":89},{"ruleId":"145","severity":1,"message":"146","line":176,"column":60,"nodeType":"147","messageId":"148","endLine":176,"endColumn":62},{"ruleId":"149","severity":1,"message":"150","line":217,"column":87,"nodeType":"147","messageId":"151","endLine":217,"endColumn":88},{"ruleId":"152","severity":1,"message":"153","line":6,"column":5,"nodeType":"154","messageId":"155","endLine":7,"endColumn":6},{"ruleId":"145","severity":1,"message":"146","line":183,"column":77,"nodeType":"147","messageId":"148","endLine":183,"endColumn":79},{"ruleId":"141","replacedBy":"156"},{"ruleId":"143","replacedBy":"157"},{"ruleId":"145","severity":1,"message":"158","line":75,"column":26,"nodeType":"147","messageId":"148","endLine":75,"endColumn":28},{"ruleId":"145","severity":1,"message":"146","line":78,"column":44,"nodeType":"147","messageId":"148","endLine":78,"endColumn":46},{"ruleId":"145","severity":1,"message":"146","line":1140,"column":28,"nodeType":"147","messageId":"148","endLine":1140,"endColumn":30},{"ruleId":"145","severity":1,"message":"146","line":1181,"column":35,"nodeType":"147","messageId":"148","endLine":1181,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":1192,"column":35,"nodeType":"147","messageId":"148","endLine":1192,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":1291,"column":35,"nodeType":"147","messageId":"148","endLine":1291,"endColumn":37},{"ruleId":"145","severity":1,"message":"146","line":1302,"column":35,"nodeType":"147","messageId":"148","endLine":1302,"endColumn":37},{"ruleId":"159","severity":1,"message":"160","line":6,"column":16,"nodeType":"161","messageId":"162","endLine":6,"endColumn":22},{"ruleId":"159","severity":1,"message":"163","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":17},{"ruleId":"141","replacedBy":"164"},{"ruleId":"143","replacedBy":"165"},{"ruleId":"141","replacedBy":"166"},{"ruleId":"143","replacedBy":"167"},{"ruleId":"145","severity":1,"message":"158","line":57,"column":35,"nodeType":"147","messageId":"148","endLine":57,"endColumn":37},{"ruleId":"141","replacedBy":"168"},{"ruleId":"143","replacedBy":"169"},{"ruleId":"159","severity":1,"message":"170","line":16,"column":10,"nodeType":"161","messageId":"162","endLine":16,"endColumn":22},{"ruleId":"145","severity":1,"message":"146","line":55,"column":30,"nodeType":"147","messageId":"148","endLine":55,"endColumn":32},{"ruleId":"149","severity":1,"message":"150","line":88,"column":93,"nodeType":"147","messageId":"151","endLine":88,"endColumn":94},{"ruleId":"145","severity":1,"message":"146","line":243,"column":46,"nodeType":"147","messageId":"148","endLine":243,"endColumn":48},{"ruleId":"145","severity":1,"message":"146","line":317,"column":58,"nodeType":"147","messageId":"148","endLine":317,"endColumn":60},{"ruleId":"145","severity":1,"message":"146","line":365,"column":70,"nodeType":"147","messageId":"148","endLine":365,"endColumn":72},{"ruleId":"141","replacedBy":"171"},{"ruleId":"143","replacedBy":"172"},{"ruleId":"145","severity":1,"message":"158","line":52,"column":26,"nodeType":"147","messageId":"148","endLine":52,"endColumn":28},{"ruleId":"145","severity":1,"message":"146","line":55,"column":47,"nodeType":"147","messageId":"148","endLine":55,"endColumn":49},{"ruleId":"145","severity":1,"message":"146","line":116,"column":21,"nodeType":"147","messageId":"148","endLine":116,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":273,"column":106,"nodeType":"147","messageId":"148","endLine":273,"endColumn":108},{"ruleId":"145","severity":1,"message":"146","line":131,"column":21,"nodeType":"147","messageId":"148","endLine":131,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":213,"column":66,"nodeType":"147","messageId":"148","endLine":213,"endColumn":68},{"ruleId":"159","severity":1,"message":"173","line":13,"column":10,"nodeType":"161","messageId":"162","endLine":13,"endColumn":14},{"ruleId":"159","severity":1,"message":"174","line":14,"column":10,"nodeType":"161","messageId":"162","endLine":14,"endColumn":25},{"ruleId":"145","severity":1,"message":"158","line":40,"column":22,"nodeType":"147","messageId":"148","endLine":40,"endColumn":24},{"ruleId":"145","severity":1,"message":"158","line":47,"column":42,"nodeType":"147","messageId":"148","endLine":47,"endColumn":44},{"ruleId":"145","severity":1,"message":"158","line":67,"column":21,"nodeType":"147","messageId":"148","endLine":67,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":70,"column":42,"nodeType":"147","messageId":"148","endLine":70,"endColumn":44},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["175"],["176"],"Expected '!==' and instead saw '!='.","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'BigNumber' is defined but never used.",["175"],["176"],["175"],["176"],["175"],["176"],"'bigNumberify' is defined but never used.",["175"],["176"],"'call' is defined but never used.","'callbackHandler' is defined but never used.","no-global-assign","no-unsafe-negation"]