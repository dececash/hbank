[{"/Users/clearsweet/home/sero/wsbank/src/index.js":"1","/Users/clearsweet/home/sero/wsbank/src/pages/regular/regular.js":"2","/Users/clearsweet/home/sero/wsbank/src/pages/my/my.js":"3","/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/investmentlist.js":"4","/Users/clearsweet/home/sero/wsbank/src/api/pgnode.js":"5","/Users/clearsweet/home/sero/wsbank/src/images/financial/index.js":"6","/Users/clearsweet/home/sero/wsbank/src/App.js":"7","/Users/clearsweet/home/sero/wsbank/src/pages/register/register.js":"8","/Users/clearsweet/home/sero/wsbank/src/pages/rechange/rechange.js":"9","/Users/clearsweet/home/sero/wsbank/src/pages/assets/assetsdetail.js":"10","/Users/clearsweet/home/sero/wsbank/src/api/common.js":"11","/Users/clearsweet/home/sero/wsbank/src/component/dkrwAccessList/index.js":"12","/Users/clearsweet/home/sero/wsbank/src/pages/home/home.js":"13","/Users/clearsweet/home/sero/wsbank/src/api/abi.js":"14","/Users/clearsweet/home/sero/wsbank/src/i18n.js":"15","/Users/clearsweet/home/sero/wsbank/src/pages/bank/bank.js":"16","/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/worldshare.js":"17","/Users/clearsweet/home/sero/wsbank/src/pages/dkrwaccess/dkrwaccess.js":"18","/Users/clearsweet/home/sero/wsbank/src/pages/withdrawlist/withdrawlist.js":"19","/Users/clearsweet/home/sero/wsbank/src/pages/fixedprod/fixedprod.js":"20","/Users/clearsweet/home/sero/wsbank/src/component/nav.js":"21","/Users/clearsweet/home/sero/wsbank/src/pages/ratesetting/ratesetting.js":"22","/Users/clearsweet/home/sero/wsbank/src/pages/dkrwaccess/dkrwaccessmanager.js":"23","/Users/clearsweet/home/sero/wsbank/src/images/cyicon/index.js":"24","/Users/clearsweet/home/sero/wsbank/src/pages/assets/assets.js":"25","/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/worldshareapp.js":"26"},{"size":183,"mtime":1637663844982,"results":"27","hashOfConfig":"28"},{"size":13178,"mtime":1637663844994,"results":"29","hashOfConfig":"28"},{"size":9895,"mtime":1643102458661,"results":"30","hashOfConfig":"28"},{"size":6924,"mtime":1637663844992,"results":"31","hashOfConfig":"28"},{"size":2925,"mtime":1638340942274,"results":"32","hashOfConfig":"28"},{"size":380,"mtime":1637663844955,"results":"33","hashOfConfig":"28"},{"size":2694,"mtime":1643102078624,"results":"34","hashOfConfig":"28"},{"size":23680,"mtime":1641549316806,"results":"35","hashOfConfig":"28"},{"size":6208,"mtime":1637663844989,"results":"36","hashOfConfig":"28"},{"size":10117,"mtime":1637663844997,"results":"37","hashOfConfig":"28"},{"size":1793,"mtime":1637663844943,"results":"38","hashOfConfig":"28"},{"size":13105,"mtime":1642424197551,"results":"39","hashOfConfig":"28"},{"size":10233,"mtime":1637724224267,"results":"40","hashOfConfig":"28"},{"size":23912,"mtime":1643180459772,"results":"41","hashOfConfig":"28"},{"size":897,"mtime":1637663844949,"results":"42","hashOfConfig":"28"},{"size":17110,"mtime":1643104479504,"results":"43","hashOfConfig":"28"},{"size":9947,"mtime":1637663844992,"results":"44","hashOfConfig":"28"},{"size":30464,"mtime":1638349114809,"results":"45","hashOfConfig":"28"},{"size":17164,"mtime":1637663844986,"results":"46","hashOfConfig":"28"},{"size":3849,"mtime":1637663844989,"results":"47","hashOfConfig":"28"},{"size":7238,"mtime":1643102393381,"results":"48","hashOfConfig":"28"},{"size":14526,"mtime":1637663844991,"results":"49","hashOfConfig":"28"},{"size":19423,"mtime":1637663844996,"results":"50","hashOfConfig":"28"},{"size":277,"mtime":1637663844965,"results":"51","hashOfConfig":"28"},{"size":13331,"mtime":1643179332323,"results":"52","hashOfConfig":"28"},{"size":1261,"mtime":1637663844993,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"gcv0k3",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"97"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/clearsweet/home/sero/wsbank/src/index.js",[],["127","128"],"/Users/clearsweet/home/sero/wsbank/src/pages/regular/regular.js",["129"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, Modal, Toast, Card, InputItem, Button, WhiteSpace } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport i18n from '../../i18n'\r\nimport abi from '../../api/abi';\r\nimport Nav from '../../component/nav'\r\nimport logo from '../../images/logo.png';\r\nimport './regular.less';\r\nconst alert = Modal.alert;\r\n\r\nclass Regular extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            balance: {\r\n                value: 0\r\n            },\r\n            index: 0,\r\n            classManager: false\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getBalance();\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getBalance() {\r\n        let self = this;\r\n        abi.fixedprodBalance(function (res) {\r\n            if (res[0] != undefined) {\r\n                self.setState({\r\n                    balance: res[0]\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    send(token, value) {\r\n        let self = this;\r\n        abi.fixedprodsend(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalance()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    withdraw(token, value) {\r\n        let self = this;\r\n        abi.fixedprodwithdraw(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalance()\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setRate(rate) {\r\n        let self = this;\r\n        abi.classSetRate(this.state.account.pk, this.state.account.mainPKr, \"DECE\", rate, self.state.index, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    isClassManager(mainPKr) {\r\n        let self = this;\r\n        abi.classisManager(mainPKr, function (res) {\r\n            self.setState({\r\n                classManager: res[0]\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"5\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"Regularmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                    <div className=\"content\">\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <div>\r\n                                    <Card >\r\n                                        <Card.Header\r\n                                            title=\"DECE\"\r\n                                            thumb=\"/static/media/DECE.a13a904b.png\"\r\n                                            extra={<span>{self.state.balance.value}</span>}\r\n                                        />\r\n                                        <Card.Body>\r\n                                            <Flex style={{ textAlign: 'center' }}>\r\n                                                <Flex.Item>\r\n                                                    <Button size=\"small\" onClick={() => {\r\n                                                        alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                            <div>\r\n                                                                <InputItem\r\n                                                                    value={self.state.balance.token}\r\n                                                                    disabled\r\n                                                                    ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                <InputItem\r\n                                                                    placeholder=\"value\"\r\n                                                                    ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                            </div>\r\n                                                        </div>, [\r\n                                                            { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                            {\r\n                                                                text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                    let token = this.tokenInputRef.state.value.trim();\r\n                                                                    let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                    self.send(token, value);\r\n                                                                }\r\n                                                            },\r\n                                                        ])\r\n                                                    }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                </Flex.Item>\r\n\r\n                                                <Flex.Item>\r\n                                                    <Button size=\"small\" onClick={() => {\r\n                                                        alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                            <div>\r\n                                                                <InputItem\r\n                                                                    value={self.state.balance.token}\r\n                                                                    disabled\r\n                                                                    ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                <InputItem\r\n                                                                    placeholder=\"value\"\r\n                                                                    ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                            </div>\r\n                                                        </div>, [\r\n                                                            { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                            {\r\n                                                                text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                    let token = this.tokenInputRef.state.value.trim();\r\n                                                                    let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                    self.withdraw(token, value);\r\n                                                                }\r\n                                                            },\r\n                                                        ])\r\n                                                    }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                </Flex.Item>\r\n                                                {\r\n                                                    self.state.classManager ? <Flex.Item>\r\n                                                        <Button size=\"small\" onClick={() => {\r\n                                                            alert(<span>{i18n.t(\"Setinterest\")}</span>, <div>\r\n                                                                <div>\r\n                                                                    <div style={{ display: \"flex\", padding: \"3px\" }}>\r\n                                                                        <div style={{ flex: \"2\" }}>\r\n                                                                            <p style={{ fontSize: \"17px\", color: \"#000\", textAlign: \"left\", paddingLeft: \"15px\", margin: \"0px\" }}>Class:</p>\r\n                                                                        </div>\r\n                                                                        <div style={{ flex: \"3\" }}>\r\n                                                                            <select style={{ width: \"100%\" }} onChange={(event) => {\r\n                                                                                // console.log(event.target.value)\r\n                                                                                self.setState({\r\n                                                                                    index: event.target.value\r\n                                                                                })\r\n                                                                            }}>\r\n                                                                                <option value=\"0\">0-1{i18n.t(\"Months\")}</option>\r\n                                                                                <option value=\"1\">0-3{i18n.t(\"Months\")}</option>\r\n                                                                                <option value=\"2\">3-6{i18n.t(\"Months\")}</option>\r\n                                                                                <option value=\"3\">6-9{i18n.t(\"Months\")}</option>\r\n                                                                                <option value=\"4\">9-12{i18n.t(\"Months\")}</option>\r\n                                                                                <option value=\"5\">12{i18n.t(\"Months\")}-</option>\r\n                                                                            </select>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <InputItem placeholder=\"value\" extra=\"%\" ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                </div>\r\n                                                            </div>, [\r\n                                                                { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                {\r\n                                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                        let value = 0;\r\n                                                                        if (parseFloat(this.valueInputRef.state.value) > 0) {\r\n                                                                            value = this.valueInputRef.state.value * 100 + 32768;\r\n                                                                        } else {\r\n                                                                            value = this.valueInputRef.state.value * 100;\r\n                                                                        }\r\n                                                                        self.setRate(Math.abs(value))\r\n                                                                    }\r\n                                                                },\r\n                                                            ])\r\n                                                        }}>{i18n.t(\"Setinterest\")}</Button>\r\n                                                    </Flex.Item> : <></>\r\n                                                }\r\n                                                \r\n                                            </Flex>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Regular;","/Users/clearsweet/home/sero/wsbank/src/pages/my/my.js",[],"/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/investmentlist.js",["130"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport Nav from '../../component/nav'\r\nimport './worldshare.css';\r\nimport i18n from '../../i18n';\r\nimport abi from '../../api/abi';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nclass Investmentlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            account: {},\r\n            datalist: [],\r\n            pagestart: 100000,\r\n            pagecount: 10,\r\n        }\r\n    }\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        self.setState({ isLoading: true });\r\n        self.queryUserInvestment(self.state.account.mainPKr, self.state.pagestart, self.state.pagecount + 10, function (res) {\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                pagecount: self.state.pagecount + 10\r\n            });\r\n        });\r\n        self.setState({ isLoading: true });\r\n    }\r\n    componentWillMount() {\r\n        let self = this;\r\n\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.queryUserInvestment(obj.mainPKr, self.state.pagestart, self.state.pagecount, function (res) {\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                account: obj\r\n            });\r\n        });\r\n    }\r\n    queryUserInvestment(mainPKr, pagestart, pagecount, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.queryUserInvestment(mainPKr, pagestart, pagecount, function (res) {\r\n            let list = res[0];\r\n            for (let i = 0; i < list.length; i++) {\r\n                let obj = {};\r\n                obj.investmentAmount = new BigNumber(list[i].investmentAmount).dividedBy(10 ** 18).toFixed(2, 1);\r\n                obj.investmentTime = self.formatTime(list[i].investmentTime * 1000, 'Y.M.D h:m');\r\n                arr.push(obj)\r\n            }\r\n            callback(arr)\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.investmentAmount}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.investmentTime}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Investmentlist\")}</Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"investmentamount\")}</span>\r\n                    </Flex.Item>\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"Investmenttime\")}</span>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <div className=\"detailcontent\">\r\n                    <div className=\"detailcontent-box\">\r\n                        <ListView\r\n                            ref={el => this.lv = el}\r\n                            dataSource={this.state.dataSource}\r\n                            renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                            </div>)}\r\n                            renderBodyComponent={() => <MyBody />}\r\n                            renderRow={row}\r\n                            renderSeparator={separator}\r\n                            style={{\r\n                                height: this.state.height,\r\n                                overflow: 'auto',\r\n                            }}\r\n                            onScroll={() => { console.log('scroll'); }}\r\n                            scrollRenderAheadDistance={400}\r\n                            onEndReached={this.onEndReached}\r\n                            onEndReachedThreshold={10}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Investmentlist;\r\n",["131","132"],"/Users/clearsweet/home/sero/wsbank/src/api/pgnode.js",["133","134","135"],"/Users/clearsweet/home/sero/wsbank/src/images/financial/index.js",[],"/Users/clearsweet/home/sero/wsbank/src/App.js",[],["136","137"],"/Users/clearsweet/home/sero/wsbank/src/pages/register/register.js",["138","139","140","141"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n// import { randomBytes } from \"crypto\";\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, InputItem, Button, WhiteSpace } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n'\r\nimport logo from '../../images/logo.png';\r\nimport idcard_0 from '../../images/idcard_0.png';\r\nimport idcard_1 from '../../images/idcard_1.png';\r\nimport './register.css';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport abi from '../../api/abi';\r\nimport axios from 'axios'\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            hasError: false,\r\n            emailError: false,\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            userState: 0,\r\n            submitLoading: false,\r\n            file: '',\r\n            imgurl: '',\r\n            imgurlone: '',\r\n            idstr: \"\",\r\n            imgtype: \"\",\r\n        }\r\n        this.fileInputEl = React.createRef();\r\n        this.fileInputEls = React.createRef();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getUser(obj.mainPKr);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = \"\";\r\n            if (res[0].state == '0') {//eslint-disable-line\r\n                self.setState({\r\n                    name: res[0].name,\r\n                    phone: res[0].phone,\r\n                    email: res[0].email,\r\n                    imgurl: idcard_0,\r\n                    imgurlone: idcard_1,\r\n                    userState: res[0].state\r\n                })\r\n            } else {\r\n                codestr = res[0].code.substring(2, res[0].code.length);\r\n                self.setState({\r\n                    name: res[0].name,\r\n                    phone: res[0].phone,\r\n                    email: res[0].email,\r\n                    imgurl: 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png',\r\n                    imgurlone: 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png',\r\n                    userState: res[0].state\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handlePhoto = async (event, type) => {\r\n        let self = this;\r\n        const files = [...event.target.files];\r\n        self.compressImage(files[0], function (img) {\r\n            var formData = new FormData();\r\n            formData.append(\"image\", img);\r\n            abi.hash(self.state.account.pk, function (code) {\r\n                let urls = 'https://ginkgobank.dece.cash/upload/?nomark=0&accessToken=000&id=' + type + '&code=' + code;\r\n                axios({\r\n                    method: 'post',\r\n                    url: urls,\r\n                    data: formData\r\n                }).then((res) => {\r\n                    Toast.success(`${i18n.t(\"UploadSuccessfully\")}`, 2);\r\n                    let str = 'https://ginkgobank.dece.cash/images/' + code + '_' + type + '.png' + \"?v=\" + new Date().getTime();\r\n                    if (type === 0) {\r\n                        self.setState({\r\n                            imgurl: str\r\n                        })\r\n                    } else {\r\n                        self.setState({\r\n                            imgurlone: str\r\n                        })\r\n                    }\r\n                    self.forceUpdate();\r\n                }).catch((err) => {\r\n                    Toast.fail(`${i18n.t(\"ReselectPicture\")}`, 2);\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n    compressImage = (file, callback) => {\r\n        let maxsize = Math.pow(1024, 2);\r\n        let quality = 0;\r\n        if (file.size < maxsize) {\r\n            quality = 1;\r\n        } else {\r\n            quality = new BigNumber(maxsize).div(file.size).toFixed(1);\r\n        }\r\n        var name = file.name;\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function (e) {\r\n            var src = e.target.result;\r\n            var img = new Image();\r\n            img.src = src;\r\n            img.onload = function (e) {\r\n                var w = img.width;\r\n                var h = img.height;\r\n                var canvas = document.createElement('canvas');\r\n                var ctx = canvas.getContext('2d');\r\n                var anw = document.createAttribute(\"width\");\r\n                anw.nodeValue = w;\r\n                var anh = document.createAttribute(\"height\");\r\n                anh.nodeValue = h;\r\n                canvas.setAttributeNode(anw);\r\n                canvas.setAttributeNode(anh);\r\n                ctx.fillStyle = \"#fff\";\r\n                ctx.fillRect(0, 0, w, h);\r\n                ctx.drawImage(img, 0, 0, w, h);\r\n                var base64 = canvas.toDataURL('image/webp', quality);\r\n                var bytes = window.atob(base64.split(',')[1]);\r\n                var ab = new ArrayBuffer(bytes.length);\r\n                var ia = new Uint8Array(ab);\r\n                for (var i = 0; i < bytes.length; i++) {\r\n                    ia[i] = bytes.charCodeAt(i);\r\n                }\r\n                file = new Blob([ab], { type: 'image/png' });\r\n                file.name = name;\r\n                callback(file);\r\n            };\r\n\r\n            img.onerror = function (e) {\r\n                console.error(e)\r\n            };\r\n        };\r\n        reader.onerror = function (e) {\r\n            console.error(e)\r\n        };\r\n    };\r\n\r\n    onErrorClick = () => {\r\n        if (this.state.hasError) {\r\n            Toast.info('Please enter 11 digits');\r\n        }\r\n    }\r\n\r\n    onEmailErrorClick = () => {\r\n        if (this.state.emailError) {\r\n            Toast.info('Please enter e-mail');\r\n        }\r\n    }\r\n    onChangesphone = (value) => {\r\n        this.setState({\r\n            phone: value\r\n        });\r\n    }\r\n    onChangesname = (value) => {\r\n        this.setState({\r\n            name: value\r\n        });\r\n    }\r\n    changeState = () => {\r\n        this.setState({\r\n            userState: 0\r\n        })\r\n        this.forceUpdate();\r\n\r\n        console.log(this.state.userState)\r\n    }\r\n    onChangesemail = (value) => {\r\n        this.setState({\r\n            email: value\r\n        });\r\n    }\r\n\r\n    submit = () => {\r\n        let self = this;\r\n        if (self.state.name.length > 0 && self.state.phone.length > 0 && self.state.email.length > 0) {\r\n            abi.hash(self.state.account.pk, function (code) {\r\n\r\n                abi.register(self.state.account.pk, self.state.account.pk, self.state.name, self.state.phone, self.state.email, \"0x\" + code, function (hash, err) {\r\n                    if (err) {\r\n                        Toast.fail(err);\r\n                    } else {\r\n                        abi.startGetTxReceipt(hash, function (data) {\r\n                            self.getUser(self.state.account.mainPKr);\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"5\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"RegistrationMessage\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    {\r\n                        self.state.userState == '0' ? <div>\r\n                            <div className=\"content\">\r\n                                <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                    <InputItem\r\n                                        type=\"text\"\r\n                                        placeholder=\"input your name\"\r\n                                        onChange={this.onChangesname}\r\n                                        value={this.state.name}\r\n                                    >{i18n.t(\"Name\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"phone\"\r\n                                        placeholder=\"input your phone\"\r\n                                        onChange={this.onChangesphone}\r\n                                        value={this.state.phone}\r\n                                    >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"email\"\r\n                                        placeholder=\"input your e-mail\"\r\n\r\n                                        onChange={this.onChangesemail}\r\n                                        value={this.state.email}\r\n                                    >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"FrontofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEl}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 0)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEl.current.click() }} src={this.state.imgurl} />\r\n                                    </div>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"ReversesideofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEls}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 1)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEls.current.click() }} src={this.state.imgurlone} />\r\n                                    </div>\r\n                                    <WhiteSpace size=\"sm\" />\r\n                                </List>\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                            <div className=\"content\">\r\n                                <Button size='small' type='primary' onClick={() => this.submit()}>{i18n.t(\"submit\")}</Button>\r\n                            </div>\r\n                        </div> : <div>\r\n                                {\r\n                                    self.state.userState == '1' ? <div>\r\n                                        <div className=\"content\">\r\n                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                <InputItem\r\n                                                    type=\"text\"\r\n                                                    disabled\r\n                                                    value={this.state.name}\r\n                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"phone\"\r\n                                                    disabled\r\n                                                    value={this.state.phone}\r\n                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"email\"\r\n                                                    disabled\r\n                                                    value={this.state.email}\r\n                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurl} />\r\n                                                </div>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurlone} />\r\n                                                </div>\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                            </List>\r\n                                        </div>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <div className=\"content\">\r\n                                            <Button size='small'>{i18n.t(\"UnderReview\")}</Button>\r\n                                        </div>\r\n                                    </div> : <div>\r\n                                            {\r\n                                                self.state.userState == '2' ? <div>\r\n                                                    <div className=\"content\">\r\n                                                        <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                            <InputItem\r\n                                                                type=\"text\"\r\n                                                                disabled\r\n                                                                value={this.state.name}\r\n                                                            >{i18n.t(\"Name\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"phone\"\r\n                                                                disabled\r\n                                                                value={this.state.phone}\r\n                                                            >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"email\"\r\n                                                                disabled\r\n                                                                value={this.state.email}\r\n                                                            >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"FrontofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurl} />\r\n                                                            </div>\r\n                                                            <WhiteSpace />\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurlone} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                        </List>\r\n                                                    </div>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div> : <div>\r\n                                                        <div className=\"content\">\r\n                                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                                <InputItem\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.name}\r\n                                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"phone\"\r\n                                                                    value={this.state.phone}\r\n                                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"email\"\r\n                                                                    value={this.state.email}\r\n                                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurl} />\r\n                                                                </div>\r\n                                                                <WhiteSpace />\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurlone} />\r\n                                                                </div>\r\n                                                                <WhiteSpace size=\"sm\" />\r\n                                                            </List>\r\n                                                        </div>\r\n                                                        <WhiteSpace size=\"sm\" />\r\n                                                        <div className=\"content\">\r\n                                                            <Flex>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='warning'>{i18n.t(\"RegistrationInformation\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='primary' onClick={() => this.changeState()}>{i18n.t(\"edit\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            }\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                    }\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n",["142","143"],"/Users/clearsweet/home/sero/wsbank/src/pages/rechange/rechange.js",[],"/Users/clearsweet/home/sero/wsbank/src/pages/assets/assetsdetail.js",["144","145","146","147","148","149","150","151","152","153","154","155","156"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport Nav from '../../component/nav'\r\nimport './assetsdetail.css'\r\nimport abi from '../../api/abi.js'\r\nimport i18n from '../../i18n'\r\n\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Assetsdetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n        \r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            cy: \"\",\r\n            account: {},\r\n            iRate: \"\",\r\n            datalist: [],\r\n            len: 40000000,\r\n            count: 10,\r\n            profitday: 0\r\n        }\r\n    }\r\n\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        self.setState({ isLoading: true });\r\n        self.getData(self.state.account.mainPKr, self.state.cy, self.state.len, self.state.count + 10, function (res, profitday) {\r\n            console.log(res)\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                count:self.state.count+10\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let cy = this.props.location.state.cy;\r\n        let account = this.props.location.state.account;\r\n        let iRate = this.props.location.state.iRate;\r\n        self.setState({\r\n            cy: cy,\r\n            account: account,\r\n            iRate: iRate\r\n        });\r\n        self.getData(account.mainPKr, cy, self.state.len, self.state.count, function (res, profitday, isLoading) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: isLoading\r\n            });\r\n        });\r\n    }\r\n\r\n    getData(mainPKr, cy, len, count, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.getRecords(mainPKr, cy, len, count, function (res) {\r\n            if (res.len == \"0\") {\r\n                callback([], 0, false)\r\n            } else {\r\n                for (let i = 0; i < res.list.length; i++) {\r\n                    if (i >= 1) {\r\n                        let obj = {\r\n                            type: 0,\r\n                            time: \"\",\r\n                            value: \"\",\r\n                            state: 0\r\n                        }\r\n                        obj.state = res.statusList[i];\r\n                        obj.type = res.list[i].rType;\r\n                        obj.time = self.formatTime(res.list[i].time * 1000, 'Y.M.D h:m');\r\n                        obj.value = new BigNumber(res.list[i].value).dividedBy(10 ** 18).toFixed(3, 1);\r\n                        arr.push(obj);\r\n                    }\r\n                }\r\n                callback(arr, new BigNumber(res.list[0].value).dividedBy(10 ** 18).toFixed(3, 1), false)\r\n            }\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {\r\n                                        item.type == 1 ? <span>{i18n.t(\"Recharge\")}</span> : <span>\r\n                                            {\r\n                                                item.type == 2 ? <span>\r\n                                                    {\r\n                                                        item.state == 1 ? <span>{i18n.t(\"Withdrawalreview\")}</span> : <span> {\r\n                                                            item.state == 2 ? <span>{i18n.t(\"Withdrawalreviewfailed\")}</span> : <span>{i18n.t(\"withdraw\")}</span>\r\n                                                        }</span>\r\n                                                    }\r\n                                                </span> : <span>{\r\n                                                    item.type == 3 ? <span>{i18n.t(\"profit\")}</span> : <span>{\r\n                                                        item.type == 4 ? <span>{i18n.t(\"Sell\")}</span> : <span>{\r\n                                                            item.type == 5 ? <span>{i18n.t(\"purchase\")}</span> : <span>{i18n.t(\"Financial\")}</span>\r\n                                                        }</span>\r\n                                                    }</span>\r\n                                                }</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center detailnum\">\r\n                                    {\r\n                                        item.type == 1 || item.type == 3 || item.type == 5 ? <span>+</span> : <span>\r\n                                            {\r\n                                                item.state == 3 ? <span></span> : <span>-</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                    {item.value}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">{item.time}</Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"1\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Balancedetails\")}</Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"AnnualInterestRate\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.iRate}%\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"Undrawnincome\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.profitday}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <div className=\"detailcontent\">\r\n                        <div className=\"detailcontent-box\">\r\n                            <ListView\r\n                                ref={el => this.lv = el}\r\n                                dataSource={this.state.dataSource}\r\n                                renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                    {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                                </div>)}\r\n                                renderBodyComponent={() => <MyBody />}\r\n                                renderRow={row}\r\n                                renderSeparator={separator}\r\n                                style={{\r\n                                    height: this.state.height,\r\n                                    overflow: 'auto',\r\n                                }}\r\n                                onScroll={() => { console.log('scroll'); }}\r\n                                scrollRenderAheadDistance={400}\r\n                                onEndReached={this.onEndReached}\r\n                                onEndReachedThreshold={10}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assetsdetail;",["157","158"],"/Users/clearsweet/home/sero/wsbank/src/api/common.js",["159"],"import BigNumber from \"bignumber.js\";\r\n\r\nexport function bytes32ToToken(data) {\r\n    try{\r\n        let index = data.indexOf(\"00\", 2);\r\n        let bytes = Buffer.from(data.substring(2, index), \"hex\");\r\n\r\n        return String.fromCharCode.apply(String, bytes).trim();\r\n    }catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\nexport function tokenToBytes(token) {\r\n    try {\r\n        let bytes = Buffer.alloc(32);\r\n        bytes.fill(token, 0, token.length);\r\n        return \"0x\" + bytes.toString('hex');\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function showValue(val, decimals, decimalPlaces) {\r\n    if (!val) {\r\n        val = 0;\r\n    }\r\n    if (!decimals) {\r\n        decimals = 18;\r\n    }\r\n    if (!decimalPlaces) {\r\n        decimalPlaces = 3;\r\n    }\r\n    let num = new BigNumber(val).dividedBy(new BigNumber(10).pow(decimals));\r\n\r\n    return num.toFixed(decimalPlaces, 1);\r\n}\r\n\r\nexport function showPK(pk, len) {\r\n    if (!pk) {\r\n        return \"\";\r\n    }\r\n    if (!len) {\r\n        len = 8;\r\n    }\r\n    return pk.slice(0, len) + \"...\" + pk.slice(-len)\r\n}\r\n\r\nexport function trimNumber(numberStr, decimalPlaces) {\r\n    let vals = numberStr.split(\".\")\r\n    if (vals.length < 2) {\r\n        return numberStr;\r\n    } else {\r\n        let index = -1;\r\n        let decimal = vals[1];\r\n        for (let i = decimal.length - 1; i >= 0; i--) {\r\n            if (decimal.charAt(i) != '0') {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        decimal = decimal.substring(0, index + 1);\r\n        let numStr = vals[0];\r\n        if (decimal.length > decimalPlaces) {\r\n            decimal = decimal.substring(0, decimalPlaces);\r\n        }\r\n        if (decimal.length > 0) {\r\n            numStr += \".\" + decimal;\r\n        }\r\n        return numStr\r\n    }\r\n}\r\n",["160","161"],"/Users/clearsweet/home/sero/wsbank/src/component/dkrwAccessList/index.js",["162","163","164","165","166","167","168","169","170","171","172","173"],"import React, { Component } from 'react';\nimport { Flex, List, Toast, WhiteSpace, Modal,Icon  } from 'antd-mobile';\nimport i18n from '../../i18n';\nimport pgnode from '../../api/pgnode';\nimport './index.css';\nimport abi from '../../api/abi';\nimport BigNumber from 'bignumber.js';\nimport dateTime from 'date-and-time';\nimport { values } from 'underscore';\nconst { keccak256 ,encodePacked} = require(\"web3-utils\");\n\n\nconst alert = Modal.alert;\n\nexport class RechareItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pk: this.props.pk,\n            mainPKr: this.props.mainPKr,\n            isManager: this.props.isManager,\n            item: this.props.item,\n            status: 0\n        }\n    }\n \n    componentDidMount(){\n        let self = this;\n        abi.brigeRechargeAudited(this.state.mainPKr, this.state.item.trxId, function(ret) {\n            self.setState({status:ret[0]});\n        });\n    }\n\n    showUserInfo(trxId, account, amount) {\n        let self = this;\n        abi.dkrwAccessAccountToAddrs(self.state.mainPKr, account, function(shortAddress) {\n            abi.getFullAddress([shortAddress], function(ret) {\n                let userPKr = ret.result[shortAddress];\n                abi.getUserInfo(userPKr, function (res) {\n                    const depositModal= alert(<div>{i18n.t(\"Depositreview\")} <Icon style={{height:\"16px\",position:\"relative\",float:\"right\"}} type=\"cross-circle\" onClick={()=>{ depositModal.close()}} /></div>, <List className=\"mytabbox-item\">\n                        <Flex>\n                            <Flex.Item>\n                                {i18n.t(\"username\")}:{res[0].name}\n                            </Flex.Item>\n                        </Flex>\n                        <Flex>\n                            <Flex.Item>\n                                {i18n.t(\"phone\")}:{res[0].phone}\n                            </Flex.Item>\n                        </Flex>\n                        <Flex>\n                            <Flex.Item>\n                                {i18n.t(\"mail\")}:{res[0].email}\n                            </Flex.Item>\n                        </Flex>\n                        <Flex>\n                            <Flex.Item>\n                                {i18n.t(\"status\")}:{res[0].state==2?\"ok\":\"err\"}\n                            </Flex.Item>\n                        </Flex>\n                        <Flex>\n                            <Flex.Item>\n                                mainpkr:{userPKr}\n                            </Flex.Item>\n                        </Flex>\n                        <Flex>\n                            <Flex.Item>\n                                account:{account}\n                            </Flex.Item>\n                        </Flex>\n                        <WhiteSpace size=\"sm\" />\n                    </List>, [\n                            { text: `${i18n.t(\"Fail\")}`, onPress: () => {\n                                self.auditingRechareg(trxId,account,amount,false);\n                            } },\n                            { text: `${i18n.t(\"Pass\")}`, onPress: () =>{\n                                self.auditingRechareg(trxId,account,amount,true);\n                            }}\n                    ])\n                })\n        })\n    })}\n\n    auditingRechareg(trxId, account, amount, flag) {\n        let self = this;\n        amount = new BigNumber(amount).multipliedBy(new BigNumber(10).pow(18)).toString();\n        console.log(trxId)\n        abi.dkrwAccessAuditingRechareg(self.state.pk, self.state.mainPKr, trxId, account, amount, flag, function (hash, err) {\n            if (err) {\n                Toast.fail(err);\n            } else {\n                abi.startGetTxReceipt(hash, function () {\n                    abi.brigeRechargeAudited(self.state.mainPKr, trxId, function (ret) {\n                        self.setState({\n                            status: ret[0]\n                        });\n                    });\n                });\n            }\n        })\n    }\n\n    render() {\n        let self = this;\n        let data = this.state.item;\n        let status = this.state.status;\n        let opHtml = \"\";\n        if(status == 2) {\n            // opHtml = \"审核未通过\";\n            opHtml = `${i18n.t(\"Auditfailed\")}`;\n        } else if(status == 1) {\n            // opHtml =\"已充值\";\n            opHtml =`${i18n.t(\"Recharged\")}`;\n        } else {\n            if(self.state.isManager) {\n                opHtml = <p className=\"dkrw-btn\" onClick={()=>{ self.showUserInfo(data.trxId, data.account, data.amount); }}>\n                        {/* 审核 */}\n                     {i18n.t(\"dedicated\")}  \n                    </p>\n            } else {\n                // opHtml =\"未审核\"\n                opHtml =`${i18n.t(\"brigeUnreviewed\")}`;\n            }\n        }\n        \n        return (\n            <div className=\"list-item\" key={data.trxId}>\n                <div className=\"dkrw-amount\">\n                    <p>{data.amount}</p>\n                </div>\n                <div className=\"dkrw-time\">\n                    <p>\n                        {\n                            data.createTime?.slice(0, 10)+\"  \" + data.createTime?.slice(data.createTime.length - 13,data.createTime.length - 5)\n                        }\n                        \n                    </p>\n                </div>\n               \n                <div className=\"dkrw-state\">\n                    {opHtml}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport  class WithDrawItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pk: this.props.pk,\n            mainPKr: this.props.mainPKr,\n            isManager: this.props.isManager,\n            item: this.props.item,\n            userPKr: \"\",\n            status: 0,\n            amount: 0\n        }\n    }\n\n    componentDidMount() {\n        let self = this;\n        let item = this.state.item.item;\n        abi.getFullAddress([item.owner], function (ret) {\n            let userPKr = ret.result[item.owner];\n            let amount = new BigNumber(item.amount).div(10 ** 18).toNumber();\n            self.setState({\n                userPKr: userPKr,\n                amount: amount\n            });\n\n            pgnode.getTransferStatus(self.state.item.auditingId, function (status) {\n                self.setState({\n                    status: status\n                });\n            });\n        });\n    }\n\n     \n\n    showUserInfo(id,amount,time,type) {\n        let self = this;\n       \n        var kycInfo = new Promise(function (resolve, reject) {\n            abi.getUserInfo(self.state.userPKr, function (res) {\n                resolve(res[0]) ;\n            })\n        });\n\n        var pgInfo = new Promise((resolve,reject)=>{\n            pgnode.getUserInfo(self.state.userPKr, function(user) {\n                resolve(user) \n             })\n        });\n\n        Promise.all([kycInfo, pgInfo]).then(function (res) {\n\n            // console.log(res,\">>\");\n            let titleHtml= \"\";\n            let operationHtml=\"\";\n            if(type==0){\n                // titleHtml=\"取款审核\" \n                titleHtml=`${i18n.t(\"Withdrawalreviewm\")}`\n                operationHtml=[\n                    { text: `${i18n.t(\"Fail\")}`, onPress: () => {\n                        self.auditingWithdraw(self.state.userPKr,id,false);\n                    } },\n                    { text: `${i18n.t(\"Pass\")}`, onPress: () =>{\n                        self.auditingWithdraw(self.state.userPKr,id,true);\n                    }}\n                ]\n            }else{\n                // titleHtml=\"打款审核\" \n                titleHtml=`${i18n.t(\"Paymentreview\")}`\n                operationHtml=[\n                    { text: `${i18n.t(\"cancel\")}`, onPress: () => {\n                    } },\n                    { text: `${i18n.t(\"confirm\")}`, onPress: () =>{\n                        self.transfer(self.state.userPKr,self.state.amount,time,id)\n                    }}\n                ]\n            }\n            const withdrawModal = alert(<div>{titleHtml} <Icon style={{height:\"16px\",position:\"relative\",float:\"right\"}} type=\"cross-circle\" onClick={()=>{ withdrawModal.close()}} /></div>\n            , <List className=\"mytabbox-item\">\n                <Flex>\n                    <Flex.Item>{i18n.t(\"username\")}:{res[0].name}</Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>{i18n.t(\"phone\")}:{res[0].phone}</Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>{i18n.t(\"mail\")}:{res[0].email}</Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>\n                        {i18n.t(\"status\")}:{res[0].state==2?\"ok\":\"err\"}\n                    </Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>mainpkr：{self.state.userPKr}</Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>account：{res[1]}</Flex.Item>\n                </Flex>\n                <WhiteSpace size=\"sm\" />\n            </List>,operationHtml)})\n    }\n\n    auditingWithdraw(userPKr, id, flag) {\n        let self = this;\n        let item = this.state.item.item;\n        let itemId = this.state.item.auditingId;\n        let amount = new BigNumber(item.amount).div(10 ** 18).toNumber();\n        let hash = keccak256(encodePacked(userPKr, itemId, amount, item.createTime));\n        // console.log(hash,'hash')\n        abi.sign(self.state.pk, self.state.mainPKr, hash, function (sign) {\n            // console.log(sign,\"sign\")\n            pgnode.saveTransfer(userPKr, amount, item.createTime, itemId, sign, function (success) {\n                if (success) {\n                    abi.dkrwAccessAuditingWithdraw(self.state.pk, userPKr, [id], flag, function (hash, err) {\n                        console.log(`dkrwAccessAuditingWithdraw`, hash, err)\n                        if (err) {\n                            Toast.fail(err);\n                        } else {\n                            abi.startGetTxReceipt(hash, function () {\n                                self.props.parent.init(self.state.mainPKr)\n                            });\n                        }\n                    })\n                } else {\n                    Toast.fail(\"failed\");\n                }\n            });\n        })\n    }\n\n    genTTrackId(userId, itemId, amount, time) {\n        let hash = keccak256(abi.encodeParameters([\"string\", \"uint\", \"uint\", \"uint\"], [userId, itemId, amount, time]));\n        return \"T\" + time + hash.slice(2, 9)\n    }\n\n    transfer(userPKr, id) {\n        let self = this ;\n        pgnode.transfer({\"pkr\":userPKr, \"itemId\": id}, function (err, ret) {\n            if (err) {\n                Toast.fail(JSON.stringify(err));\n            } else {\n                Toast.success(\"success\");\n                self.props.parent.init(self.state.mainPKr)\n            }\n        })\n    }\n\n    render() {\n        let self = this;\n        let data = this.state.item;\n        let statusHtml=\"\";\n        if(data.item.status == 0) {\n            if(self.state.isManager) {\n                statusHtml = <p  className=\"dkrw-btn\" onClick={ ()=>{\n                        self.showUserInfo(data.auditingId,data.item.amount,data.item.createTime,0)\n                    }\n                }>\n                    {/* 未审核 */}\n                    {i18n.t(\"brigeUnreviewed\")}\n                </p>\n            } else {\n                // statusHtml = \"未审核\";\n                statusHtml = `${i18n.t(\"brigeUnreviewed\")}`;\n            }\n        } else if(data.item.status == 2) {\n            // statusHtml = \"审核未通过\";\n            statusHtml = `${i18n.t(\"Auditfailed\")}`;\n        } else if(data.item.status == 1) {\n            if(this.state.status == 1) {\n                // statusHtml = \"已打款\";\n                statusHtml = `${i18n.t(\"Paid\")}`;\n            } else if(this.state.status == 0) {\n                if(self.state.isManager) {\n                    statusHtml = <p  className=\"dkrw-btn\"  onClick={ ()=>{\n                        self.showUserInfo(data.auditingId,data.item.amount,data.item.createTime,1)\n                        }\n                    }>\n                        {/* 打款 */}\n                        {i18n.t(\"Makemoney\")}\n                    </p>\n                }\n            } else if(this.state.status == 2){\n                // statusHtml = \"打款失败\";\n                statusHtml = `${i18n.t(\"Paymentfailed\")}`;\n            }\n        }\n        return (\n            <div className=\"list-item\" key={data.trxId}>\n                <div className=\"dkrw-amount\">\n                    <p>{ new BigNumber(data.item.amount).div(10 ** 18).toNumber().toFixed(2, 1) } </p>\n                </div>\n                <div className=\"dkrw-time\">\n                    <p>{dateTime.format(new Date(data.item.createTime*1000), 'YYYY-MM-DD HH:mm:ss')} </p>\n                </div>\n                <div className=\"dkrw-state \">\n                    { statusHtml }\n                </div>\n            </div>\n        )\n    }\n}","/Users/clearsweet/home/sero/wsbank/src/pages/home/home.js",["174"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport Nav from '../../component/nav'\r\nimport i18n from '../../i18n';\r\nimport { WingBlank, WhiteSpace, List, Flex, Modal, InputItem, Toast } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport abi from '../../api/abi.js'\r\nimport { bytes32ToToken, trimNumber } from \"../../api/common\";\r\nimport logo from '../../images/logo.png'\r\nimport './home.css'\r\n\r\nimport swap_icon from '../../icons/swap.png';\r\n// import swaped_icon from '../../icons/swaped.png';\r\n\r\nconst operation = Modal.operation;\r\nconst alert = Modal.alert;\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            account: {},\r\n            pairs: [],\r\n            retValue: 0,\r\n            isManager: false,\r\n            isOwner: false,\r\n            balances: [],\r\n            changeType: {\r\n                value: 0,\r\n                label: `${i18n.t(\"Localaccount\")}`\r\n            },\r\n            choosedata: [\r\n                { value: 0, label: `${i18n.t(\"Localaccount\")}` },\r\n                { value: 1, label: `${i18n.t(\"BankAccount\")}` },\r\n            ]\r\n        }\r\n    }\r\n\r\n    fetchInfo(mainPKr) {\r\n        if (!mainPKr && this.state.account) {\r\n            mainPKr = this.state.account.mainPKr;\r\n        }\r\n\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (pairs) {\r\n            console.log(pairs, \"pairs>>>>>>>>>>>>>>>>\")\r\n            self.setState({ pairs: pairs });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({ account: obj });\r\n        self.getIsManager(obj.mainPKr);\r\n        self.getIsOwner(obj.mainPKr)\r\n        self.fetchInfo(obj.mainPKr);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    getIsOwner(mainPKr) {\r\n        let self = this;\r\n        abi.isOwner(mainPKr, function (res) {\r\n            self.setState({\r\n                isOwner: res\r\n            })\r\n        })\r\n    }\r\n\r\n    getIsManager(mainPKr) {\r\n        let self = this;\r\n        abi.isManager(mainPKr, function (res) {\r\n            if (res) {\r\n                abi.balanceOf(function (balances) {\r\n                    self.setState({ balances: balances });\r\n                })\r\n            }\r\n            self.setState({\r\n                isManager: res\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    changeType() {\r\n        let self = this;\r\n        let actions = [];\r\n        self.state.choosedata.forEach(function (item, index) {\r\n            actions.push(\r\n                {\r\n                    text: <span key={index}>{item.label}</span>, onPress: () => {\r\n                        self.setState({ changeType: item });\r\n                    }\r\n                }\r\n            );\r\n        });\r\n        operation(actions);\r\n    }\r\n    render() {\r\n        let self = this;\r\n\r\n        return (\r\n            <WingBlank>\r\n                <Nav selectedTab=\"2\">\r\n                    <div className=\"tabcontent\">\r\n                        <Flex className=\"header\">\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                                <p className='title'>\r\n                                    {i18n.t(\"assetexchange\")}\r\n                                </p>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <List className=\"tabcontent-box\">\r\n                            {\r\n                                self.state.pairs.map((item, key) => {\r\n                                    return (\r\n                                        <Pair Item={item} key={key} />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </List>\r\n                    </div>\r\n                </Nav>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\nclass Pair extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tokenA: \"\",\r\n            tokenB: \"\",\r\n            price: 0,\r\n            account: {},\r\n            isManager:false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(1)\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getIsManager(obj.mainPKr)\r\n        self.pairDetail(self.props.Item);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getIsManager(mainPKr) {\r\n        let self = this;\r\n        abi.isOwner(mainPKr, function (res) {\r\n            abi.isManager(mainPKr, function (data) {\r\n\r\n                if (res || data) {\r\n                    self.setState({\r\n                        isManager: true\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    pairDetail(data) {\r\n        let self = this;\r\n        let tokenA = bytes32ToToken(data.tokenA);\r\n        let tokenB = bytes32ToToken(data.tokenB);\r\n        if (!tokenA || !tokenB) {\r\n            return;\r\n        }\r\n        if (new BigNumber(data.price).isZero()) {\r\n            return;\r\n        }\r\n        let price = new BigNumber(data.price).div(1e9).toFixed(9);\r\n        if (data.flag) {\r\n            tokenA = bytes32ToToken(data.tokenB);\r\n            tokenB = bytes32ToToken(data.tokenA);\r\n            price = new BigNumber(1e9).div(data.price).toFixed(9);\r\n        }\r\n        price = trimNumber(price, 9);\r\n        self.setState({\r\n            tokenA,\r\n            tokenB,\r\n            price\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (<>\r\n            {\r\n                self.state.tokenA == \"DHAPY\" || self.state.isManager ? <List.Item>\r\n                    <Flex style={{ textAlign: 'center' }}>\r\n                        <Flex.Item>\r\n                            {self.state.tokenA}\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <img src={swap_icon} />\r\n                        </Flex.Item>\r\n                        <Flex.Item>{self.state.tokenB}</Flex.Item>\r\n                        <Flex.Item>\r\n                            {self.state.price}\r\n                        </Flex.Item>\r\n                        <Flex.Item >\r\n                            <span className=\"exchange\" onClick={() => {\r\n                                alert('', <div>\r\n                                    <div>\r\n                                        <InputItem\r\n                                            value={self.state.price} disabled={true}\r\n                                        >Price</InputItem>\r\n                                        <InputItem\r\n                                            placeholder=\"amount\" ref={el => this.sendInputRef = el}\r\n                                            onChange={(value) => {\r\n                                                this.retInputRef.value = new BigNumber(value * Number(self.state.price)).toFixed(6);\r\n                                            }}>Value:</InputItem>\r\n                                        <div className=\"am-list-item am-input-item am-list-item-middle\">\r\n                                            <div className=\"am-list-line\">\r\n                                                <div className=\"am-input-label am-input-label-5\">{self.state.tokenB}</div>\r\n                                                <div className=\"am-input-control\">\r\n                                                    <input disabled placeholder=\"amount\"\r\n                                                        ref={el => this.retInputRef = el} type=\"text\" value=\"\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>, [\r\n                                    { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                    {\r\n                                        text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                            console.log(1)\r\n                                            let value = new BigNumber(this.sendInputRef.state.value).multipliedBy(1e18);\r\n                                            console.log(this.state.account.pk, this.state.account.mainPKr, self.state.tokenB, value.toFixed(0), self.state.tokenA)\r\n                                            abi.hbankexchange(this.state.account.pk, this.state.account.mainPKr, self.state.tokenB, value.toFixed(0), self.state.tokenA, function (hash, err) {\r\n                                                console.log(err,\"err\",hash)\r\n                                                if (err) {\r\n                                                    console.log(err)\r\n                                                    Toast.fail(err);\r\n                                                } else {\r\n                                                    abi.startGetTxReceipt(hash, function (data) {\r\n                                                        self.getIsManager(self.state.account.mainPKr);\r\n                                                        self.fetchInfo(self.state.account.mainPKr);\r\n                                                    });\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                ])\r\n                            }}>{i18n.t(\"exchange\")}</span>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </List.Item> : <></>\r\n            }\r\n            </>);\r\n    }\r\n}","/Users/clearsweet/home/sero/wsbank/src/api/abi.js",["175","176","177","178","179","180","181","182","183","184"],"/Users/clearsweet/home/sero/wsbank/src/i18n.js",[],["185","186"],"/Users/clearsweet/home/sero/wsbank/src/pages/bank/bank.js",["187","188","189","190","191","192","193","194","195","196","197"],"/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/worldshare.js",["198","199","200","201","202"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, Card, WhiteSpace, Button, Toast } from 'antd-mobile';\r\nimport { Link } from 'react-router-dom';\r\nimport BigNumber from 'bignumber.js';\r\nimport copy from 'copy-to-clipboard';\r\nimport Nav from '../../component/nav'\r\nimport './worldshare.css';\r\nimport i18n from '../../i18n';\r\nimport logo from '../../images/logo.png'\r\nimport profid from '../../images/profid.png'\r\nimport code from '../../images/code.png'\r\nimport copyimg from '../../images/copy.png'\r\nimport abi from '../../api/abi';\r\n\r\nclass Worldshare extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            profit: {\r\n                0: \"0\",\r\n                1: \"0\",\r\n                2: \"0\",\r\n            },\r\n            RecommendRevenueIndex: 1,\r\n            InvestmentIndex: 1,\r\n            pagecount: 10,\r\n            InvestmentList: [],\r\n            RecommendRevenueList: [],\r\n            RefferList: {}\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.queryTotalRevenue(obj.mainPKr);\r\n        self.getDkrwDetail(obj.mainPKr);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    clockIn(pk, mainPKr) {\r\n        let self = this;\r\n        if (self.state.profit.TodayEarnings != \"0.000\") {\r\n            abi.getUserInfo(mainPKr, function (res) {\r\n                if (res[0].state === \"2\") {\r\n                    abi.dailyTapIn(pk, mainPKr, function (hash) {\r\n                        if (hash != \"\") {\r\n                            abi.startGetTxReceipt(hash, function () {\r\n                                self.queryTotalRevenue(self.state.account.mainPKr);\r\n                            });\r\n                        }\r\n                    })\r\n                } else {\r\n                    Toast.info(`${i18n.t(\"PleaseregisterKYCfirst\")}!`)\r\n                }\r\n            })\r\n        } else {\r\n            Toast.info(`${i18n.t(\"Nowithdrawableincome\")}!`)\r\n        }\r\n    }\r\n\r\n    queryTotalRevenue(mainPKr) {\r\n        let self = this;\r\n        abi.queryTotalRevenue(mainPKr, function (res) {\r\n            let obj = {};\r\n            obj.TotalRevenue = new BigNumber(res[0]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            obj.RecommendedIncome = new BigNumber(res[1]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            obj.TodayEarnings = new BigNumber(res[2]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            self.setState({\r\n                profit: obj\r\n            })\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    getDkrwDetail = (mainPKr) => {\r\n        let self = this;\r\n        abi.dkrwDetail(mainPKr, function (res) {\r\n            let obj = {}\r\n            obj.idLeft = res[0][1];\r\n            obj.idRight = res[0][2];\r\n            obj.reffer = res[0][7];\r\n            self.setState({\r\n                RefferList: obj\r\n            })\r\n        })\r\n    }\r\n\r\n    copycode = (copytext) => {\r\n        copy(copytext)\r\n        Toast.info(`${i18n.t(\"CopySuccessfully\")}!`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                DeFi{i18n.t(\"assetmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <WhiteSpace size=\"lg\" />\r\n                <div className=\"content\">\r\n                    <div className=\"worldshare\">\r\n                        <Card>\r\n                            <Card.Header\r\n                                title={i18n.t(\"Contractinformation\")}\r\n                                thumb={code}\r\n                                extra={\r\n                                    <a style={{ color: 'black' }}\r\n                                        href={`https://dece-cash.github.io/worldshare/?v=3&index=${this.state.account.index}`}\r\n                                        // href={`https://ginkgobank.dece.cash/test/worldshare/?v=3&index=${this.state.account.index}`}\r\n                                        // href={`http://localhost:3001/?v=3&index=${this.state.account.index}`}\r\n                                        rel=\"noopener\"\r\n                                    >{i18n.t(\"investment\")}</a>}\r\n                            />\r\n                            <Card.Body>\r\n                                <div>\r\n                                    <p>\r\n                                        <span>ID   A :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.idLeft}</span>\r\n                                        {\r\n                                            this.state.RefferList.idLeft == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.idLeft)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>ID   B :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.idRight}</span>\r\n                                        {\r\n                                            this.state.RefferList.idRight == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.idRight)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Referrer\")}  ID :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.reffer}</span>\r\n                                        {\r\n                                            this.state.RefferList.reffer == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.reffer)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <WhiteSpace size=\"lg\" />\r\n                        <Card>\r\n                            <Card.Header\r\n                                title={i18n.t(\"Incomeinformation\")}\r\n                                thumb={profid}\r\n                                extra={<div onClick={() => this.clockIn(this.state.account.pk, this.state.account.mainPKr)}>{i18n.t(\"Withdrawalincome\")}</div>}\r\n                            />\r\n                            <Card.Body>\r\n                                <div>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Totalstaticincome\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.TotalRevenue}</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Staticincome\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.TodayEarnings}</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Totalrecommendedrevenue\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.RecommendedIncome}</span>\r\n                                    </p>\r\n                                    <Flex>\r\n                                        <Flex.Item>\r\n                                            <Link to={{ pathname: `/investmentlist`, state: {} }} >\r\n                                                <Button size=\"small\" >\r\n                                                    {i18n.t(\"Investmentlist\")}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Flex.Item>\r\n                                        <Flex.Item>\r\n                                            <Link to={{ pathname: `/recommendlist`, state: {} }} >\r\n                                                <Button size=\"small\" >\r\n                                                    {i18n.t(\"Recommendedincome\")}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <WhiteSpace size=\"lg\" />\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Worldshare;\r\n","/Users/clearsweet/home/sero/wsbank/src/pages/dkrwaccess/dkrwaccess.js",["203","204","205","206","207","208","209","210","211","212"],"/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable array-callback-return */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport { Button, Flex, Toast, WhiteSpace, InputItem, Modal } from 'antd-mobile';\nimport BigNumber from \"bignumber.js\";\nimport { RechareItem, WithDrawItem} from '../../component/dkrwAccessList';\nimport i18n from '../../i18n'\nimport abi from '../../api/abi';\nimport pgnode from '../../api/pgnode';\nimport Nav from '../../component/nav';\nimport logo from '../../images/logo.png';\nimport cardimg from '../../images/cardimg.png';\nimport copy from 'copy-text-to-clipboard';\nimport { bank as bankJson } from './hangBank.json';\nimport './dkrwaccess.css';\nimport { reject } from 'underscore';\n\nconst alert = Modal.alert;\n \nexport default class Dkrwaccess extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            account:JSON.parse(sessionStorage.getItem('account')),\n            hasKYC: false,\n            registered:false,\n            hasBound:false,\n            showVAccount:false,\n            loading:true,\n        }\n    }\n\n    componentDidMount() {\n        this.init();\n    }\n\n    init() {\n        let self =this;\n        let checkKyc = new Promise((resolve, reject)=>{\n                self.checkKyc(function(ret) {\n                    resolve(ret);\n                });\n        }); \n        let getUserInfo =  new Promise((resolve, reject)=>{\n            self.getUserInfo(function(ret) {\n                resolve(ret);\n            });\n        }); \n\n        Promise.all([checkKyc, getUserInfo]).then(function(values) {\n            let states = {loading: false};\n            let result = Object.assign(states, values[0],values[1]);\n            self.setState(result);\n          });\n        \n    }\n\n    refresh(datas) {\n        this.setState(datas);\n    }\n    \n    checkKyc(callback) {\n        let self = this;\n        abi.getUserInfo(this.state.account.mainPKr, function (res) {\n            if (res[0].state === \"2\") {\n                callback({\n                    hasKYC: true,\n                })\n            } else {\n                callback({});\n            }\n        })\n    }\n\n    getUserInfo(callback) {\n        let self = this;\n        let mainPKr = this.state.account.mainPKr;\n        pgnode.getUserInfo(mainPKr, function (vaccount,bankName) {\n            if (vaccount) {\n                abi.dkrwAccessAccountToAddrs(mainPKr, vaccount, function (shortAddress) {\n                    abi.getFullAddress([shortAddress], function (rest) {\n                        let pkr = rest.result[shortAddress];\n                        if (mainPKr == pkr) {\n                            callback({\n                                hasBound: true,\n                                registered: true,\n                                vaccount: vaccount,\n                                bankName:bankName\n                            })\n                        } else {\n                            callback({\n                                registered: true,\n                                vaccount: vaccount,\n                                bankName:bankName\n                            });\n                        }\n                    });\n                })\n            } else {\n                callback({});\n            }\n        });\n    }\n\n    render() {\n        let self = this;\n        let showInfo;\n        if(self.state.loading) {\n            Toast.loading('',1);\n        } else {\n            if(!self.state.hasKYC) {\n                showInfo = <RegisterKYC/>;\n            } else {\n                if(self.state.registered && self.state.hasBound) {\n                    if(this.state.showVAccount) {\n                        showInfo = <BindAccount pk={self.state.account.pk} \n                            mainPKr={self.state.account.mainPKr} \n                            vaccount={this.state.vaccount}\n                            bankName={this.state.bankName}\n                            hasBound={this.state.hasBound} callback={self.refresh.bind(this)}/>\n                    } else {\n                        showInfo = <UserInfo pk={self.state.account.pk} vaccount={this.state.vaccount} callback={self.refresh.bind(this)}/>;\n                    }\n                } else {\n                    if(self.state.registered) {\n                        showInfo = <BindAccount pk={self.state.account.pk} \n                            mainPKr={self.state.account.mainPKr} \n                            vaccount={this.state.vaccount}\n                            bankName={this.state.bankName}\n                            hasBound={this.state.hasBound} callback={self.refresh.bind(this)}/>\n                    } else {\n                        showInfo = <PGRegister mainPKr={self.state.account.mainPKr} \n                                            callback={self.refresh.bind(this)}/>\n                    }\n                }\n            }\n        }\n\n        return (\n            <Nav selectedTab=\"4\">\n                <div className=\"tabcontent\">\n                {showInfo }\n                </div>\n            </Nav>\n        )\n    }\n}\n\nclass RegisterKYC extends Component{\n    render(){\n        return(<>\n                <Flex className=\"header\">\n                    <Flex.Item className=\"tabcontent-box\">\n                        <img className=\"logo\" src={logo} alt=\"logo\" />\n                        <p className='title'>\n                            {/* 存取款 */}\n                            {/* {i18n.t(\"Depositandwithdrawalm\")} */}\n                        </p>\n                    </Flex.Item>\n                </Flex>\n                <Flex>\n                    <Flex.Item>\n                       \n                    </Flex.Item>\n                    <Flex.Item>\n                        <Link to={{ pathname: `/register` }} >\n                            <p style={{textAlign:\"center\"}}>\n                                {/* 请先注册KYC！ */}\n                                <Button type=\"primary\" size=\"small\" >{i18n.t(\"PleaseregisterKYCfirst\")}!</Button>\n                            </p>\n                        </Link>\n                    </Flex.Item>\n                    <Flex.Item>\n                       \n                    </Flex.Item>\n                </Flex>\n                <WhiteSpace />\n        </>)\n    }\n}\n\nclass PGRegister extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            mainPKr : props.mainPKr,\n            userName :\"\",\n            userPhone : \"\"\n        }\n    }\n\n    componentDidMount(){\n        let self=this;\n        abi.getUserInfo(this.state.mainPKr, function (res) {\n            if (res[0].state === \"2\") {\n                self.setState({\n                    userName:res[0].name,\n                    userPhone:res[0].phone\n                })\n            }\n        })\n    }\n\n    register(){\n        let self = this;\n        let bankCard = \"001\";\n        if(self.state.bankCard) {\n            bankCard = self.state.bankCard;\n        }\n        if(self.bankCd.state.value==\"\" || self.identity.state.value==\"\"){\n            Toast.info('Please fill in the information ！', 2, null, false);\n            return\n        }\n\n        let data={\n            \"name\": self.state.userName,\n            \"pkr\":self.state.mainPKr,\n            \"taxType\": '개인',\n            \"identity\": self.identity.state.value, \n            \"phone\": self.state.userPhone,\n            \"account\":self.bankCd.state.value,\n            \"bankCd\": bankCard,\n            \"beneficiary\": self.state.userName\n        };\n\n        pgnode.register(data, function (err, res) {\n\n            if (err) {\n                Toast.fail(JSON.stringify(err));\n            } else {\n                self.props.callback({\n                    vaccount: res.vaccnt.account,\n                    bankName:res.vaccnt.bankName,\n                    registered: true\n                });\n            }\n        });\n    }\n\n    render(){\n        let self=this;\n        return(<div  className=\"register-dkrw\" style={{minHeight:document.documentElement.clientHeight}}>\n                    {\n                        self.state.isRegister ?<>\n                        {\n                            <div className=\"register-dkrw-box\">\n                            <div className=\"register-dkrw-header\" style={{background:\"#777777\"}}>\n                            </div>\n                            <div className='user-register'>\n                                <div className=\"user-name\">\n                                    <p>\n                                        {/* 请输入开户人姓名与银行 */}\n                                        {i18n.t(\"brigeNameandBank\")}\n                                    </p>\n                                </div>\n                                <div className=\"register-message\">\n                                    <div className=\"left\">\n                                        <p>\n                                            <span>\n                                                {/* 开户人 */}\n                                                {i18n.t(\"Accountholder\")}\n                                            </span>\n                                        </p>\n                                    </div>\n                                    <div className=\"right\">\n                                        <p>{self.state.userName}</p>\n                                    </div>\n                                </div>\n                                <div className=\"register-message\">\n                                    <div className=\"left\">\n                                        <p>\n                                            <span>\n                                                {/* 电话号码 */}\n                                                {i18n.t(\"phonenumber\")}\n                                            </span>\n                                        </p>\n                                    </div>\n                                    <div className=\"right\">\n                                        <p>{self.state.userPhone}</p>\n                                    </div>\n                                </div>\n                                <div className=\"register-message\">\n                                    <div className=\"left\">\n                                        <p>\n                                            <span>\n                                                {/* 身份证号码 */}\n                                                {i18n.t(\"identificationnumber\")}\n                                            </span>\n                                        </p>\n                                    </div>\n                                    <div className=\"right\">\n                                        <InputItem \n\n                                            placeholder={`${i18n.t(\"brigeBindidentifidentif\")}`}\n                                            style={{border:\"1px solid #000000\",padding:\"0px\"}}\n                                            ref={el => self.identity = el}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"register-message\">\n                                    <div className=\"left\">\n                                        <select onChange={(e)=>{\n                                            let tg =e.target;\n                                            console.log(tg.options[tg.selectedIndex].value);\n                                            self.setState({\n                                                bankCard:tg.options[tg.selectedIndex].value\n                                            })    \n                                            }}>\n                                            {\n                                                bankJson.map((data,index)=>{\n                                                   return <option value={data.value} key={index}>{data.name}</option>\n                                                })\n                                            }\n                                        </select>\n                                    </div>\n                                    <div className=\"right\">\n                                        <InputItem \n                                            placeholder={`${i18n.t(\"Pleaseregisteryourbankaccount\")}`}\n                                            style={{border:\"1px solid #000000\",padding:\"0px\"}}\n                                            ref={el => self.bankCd = el}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"operation-register\">\n                                    <p>\n                                       <span>\n                                            <span className=\"operation-icon\">*</span>\n                                            <span className=\"operation-ok\" onClick={()=>self.register()}>\n                                                {/* 确认 */}\n                                                {i18n.t(\"confirm\")}\n                                            </span>\n                                       </span>\n                                    </p>           \n                                </div>\n                            </div>\n                        </div>\n                        }</>:<div className=\"register-dkrw-box\">\n                            <div className=\"register-dkrw-header\">\n                                <p>\n                                    {/* 登记提现账号 */}\n                                    {i18n.t(\"brigeWithdrawAccount\")}\n                                </p>\n                            </div>\n                            <div className=\"register-dkrw-content\">\n                                <div className=\"content-header\">\n                                    <div className=\"left\">\n                                        <p onClick={()=>{self.setState({ isRegister:true })}}>\n                                            {/* 登记 */}\n                                            {i18n.t(\"Register\")}\n                                        </p>\n                                    </div>\n                                    <div className=\"right\">\n                                        <p>\n                                            {/* 请登记你的银行账户 */}\n                                            {i18n.t(\"Pleaseregisteryourbankaccount\")}\n                                        </p>\n                                    </div>\n                                </div>\n                                <div className=\"content-center\">\n                                    <div className=\"card-icon\">\n                                        <p>*</p>\n                                    </div>\n                                    <div className=\"card-center\">\n                                        <p className=\"card-title\">\n                                            {/* 提现账号登记 */}\n                                            {i18n.t(\"brigeWithdrawRegisterAccount\")}\n                                        </p>\n                                        <p className=\"card-detail\">\n                                            {/* 请输入本人名义的银行账号 */}\n                                            {i18n.t(\"brigeAccountNumber\")}\n                                        </p>\n                                    </div>\n                                    <div className=\"card-img\">\n                                        <img src={cardimg} />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    }\n        </div>)\n    }\n}\n\nclass BindAccount extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            pk: props.pk,\n            mainPKr: props.mainPKr,\n            vaccount: props.vaccount,\n            bankName: props. bankName,\n            notBound: !props.hasBound,\n        }\n    }\n\n    brigeRegisister() {\n        let self = this;\n        abi.brigeRegisister(self.state.pk, self.state.mainPKr, self.state.vaccount, function (hash, err) {\n            if (err) {\n                Toast.fail(err);\n            } else {\n                abi.startGetTxReceipt(hash, function () {\n                    // self.props.callback({ showVAccount:false });\n                    this.props.callback({showVAccount:false})\n                });\n            }\n        })\n    }\n\n    render(){\n        let self = this;\n        // console.log(self.state.notBound,\">>>>>>>>\")\n        return(<div className=\"bind\">\n                <div className= \"bind-header\">\n                        <p>\n                            DKRW \n                            {/* 存取款 */}\n                            {i18n.t(\"Depositandwithdrawalm\")}     \n                        </p>                \n                    </div>\n                    <div className=\"bind-btn\">\n                        <p>\n                            <span>\n                                {/* 获取存款账号成功 */}\n                                {i18n.t(\"brigeAccount\")}\n                            </span>\n                        </p>\n                    </div>\n                    <div className=\"bind-describe\">\n                        <p className=\"bind-describe-success\">\n                            {/* 往WSBANK存款专用虚拟账号汇款 */}\n                            {i18n.t(\"brigeWSBANK\")}\n                            <span>\n                                {/* 可充值 */}\n                                {i18n.t(\"Rechargeable\")}\n                            </span>\n                            DKRW。\n                        </p>\n                    </div>\n                    <div className=\"bind-account\">\n                        <p>\n                            {/* 存款专用虚拟账号 */}\n                            {i18n.t(\"brigeDedicated\")}\n                        </p>\n                        \n                        <div className=\"bind-account-describe\">\n                            <div className=\"left\">\n                                <p>\n                                    {\n                                        self.state.bankName\n                                    }\n                                </p>\n                            </div>\n                            <div className=\"right\">\n                                <p>\n                                    {/* {\n                                        self.state.vaccount?.slice(0, 8) + \"******\" + self.state.vaccount?.slice(self.state.vaccount.length - 8)\n                                    } */}\n                                    {\n                                        self.state.vaccount\n                                    }\n                                </p>\n                            </div>\n                        </div>\n                        <p className=\"copy\">\n                            <span onClick={()=>{copy(self.state.vaccount);Toast.success(\"复制成功\",1)}}>\n                                    {/* 复制 */}\n                                {i18n.t(\"copy\")}\n                            </span>\n                        </p>\n                    </div>\n                    <div className=\"bind-btn-confirm\">\n                        <p>\n                            <span>\n                                <span className=\"operation-icon\">*</span>\n                                {\n                                    this.state.notBound ? <span className=\"operation-ok\" onClick={()=>self.brigeRegisister()}>\n                                        {/* 注册 */}\n                                        {i18n.t(\"register\")}\n                                    </span>:<span onClick={()=>{this.props.callback({showVAccount:false})}}>\n                                        {/* 关闭 */}\n                                        {i18n.t(\"closure\")}\n                                    </span>\n                                }\n                           </span>\n                        </p>  \n                    </div>\n        </div>)\n    }\n}\n\nclass UserInfo extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            pk: props.pk,\n            vaccount:props.vaccount,\n            pageIndex:0,\n            pageCount:2,\n            withdrawList:[],\n            rechargeList:[],\n            showType:0\n        }\n    }\n\n    prvePage() {\n        if(this.state.pageIndex == 0) {\n            return;\n        }\n\n        this.fetch(this.state.pageIndex - 1);\n    }\n\n    nextPage() {\n        this.fetch(this.state.pageIndex + 1);\n    }\n    \n    fetch(pageIndex) {\n        let self = this;\n        if (this.state.showType == 0) {\n            pgnode.getRechargeList(this.state.vaccount, pageIndex, this.state.pageCount, function (list) {\n                self.setState({\n                    rechargeList: list,\n                    pageIndex: pageIndex\n                });\n            });\n        } else {\n            abi.brigeWithDrawList(this.state.mainPKr, pageIndex, this.state.pageCount, this.state.mainPKr, function (list) {\n                self.setState({\n                    withdrawList: list,\n                    pageIndex: pageIndex\n                });\n            });\n        }\n    }\n\n    getLockedBalance(mainPKr) {\n        if(!mainPKr) {\n            mainPKr = this.state.mainPKr;\n        }\n        let self = this;\n        abi.brigeLockedBalance(mainPKr, function (ret) {\n            self.setState({\n                lockdedBalance: ret[0],\n            })\n        });\n    }\n\n    componentDidMount() {\n        let self = this;\n        abi.accountDetails(this.state.pk, function (account) {\n            self.setState({\n                mainPKr: account.mainPKr,\n                balance: account.balance,\n            }, function () {\n                self.getLockedBalance(account.mainPKr);\n                self.fetch(this.state.pageIndex);\n            });\n        });\n    }\n\n    render() {\n        let self =this;\n        let showInfos;\n        if(self.state.showType == 0) {\n            showInfos = self.state.rechargeList.map((data,index) => (\n                <RechareItem key={data.trxId} pk={self.state.pk} mainPKr={self.state.mainPKr}\n                    isManager={false} item={data} />\n            ))\n        } else {\n            showInfos = self.state.withdrawList.map((data,index) => (\n                <WithDrawItem key={data.auditingId} pk={self.state.pk} mainPKr={self.state.mainPKr}\n                isManager={false} item={data} /> \n            ))\n        }\n        \n       return(<div className=\"dkrwaccess-index\">\n                <div className='generalization'>\n                    <div className=\"generalization-item\">\n                        <div className=\"left\">\n                            {/* 总资产 */}\n                            {i18n.t(\"Totalassets\")}\n                        </div>\n                        <div className=\"right\">\n                            {\n                                new BigNumber(self.state.balance).plus(new BigNumber(self.state.lockdedBalance)).div(10 ** 18).toNumber().toFixed(2, 1)\n                            } DKRW\n                        </div>\n                    </div>\n                    <div className=\"generalization-item\">\n                        <div className=\"left\">\n                            {/* 可提现金额 */}\n                            {i18n.t(\"Availablecashamount\")}\n                        </div>\n                        <div className=\"right\">\n                            { new BigNumber(self.state.balance).div(10 ** 18).toNumber().toFixed(2, 1)} DKRW\n                        </div>\n                    </div>\n                    <div className=\"generalization-item\">\n                        <div className=\"left\">\n                            {/* 使用中的金额 */}\n                            {i18n.t(\"Amountinuse\")}\n                        </div>\n                        <div className=\"right\">\n                            { new BigNumber(self.state.lockdedBalance).div(10 ** 18).toNumber().toFixed(2, 1) } DKRW\n                        </div>\n                    </div>\n                    <div className=\"generalization-btn\">\n                        <div className=\"left\">\n                            <Button size=\"small\"   onClick={()=>{\n                                self.props.callback({showVAccount:true});\n                            }}>\n                                {/* 存款 */}\n                                {i18n.t(\"Deposit\")}\n                            </Button>\n                        </div>\n                        <div className=\"right\">\n                            <Button size=\"small\" onClick={() => { alert(`${i18n.t(\"withdraw\")}`, <div>\n                                <InputItem placeholder=\"amount\" ref={el => self.sendInputRef = el} \n                                onChange={(value) => { console.log(value); }} \n                                >DKRW</InputItem> \n                                </div>, [ \n                                    { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') }, \n                                    {\n                                        text: `${i18n.t(\"confirm\")}`, onPress: () => { \n                                        let value = new BigNumber(self.sendInputRef.state.value).multipliedBy(1e18);\n                                        abi.dkrwAccessUserwithdraw(self.state.pk, self.state.mainPKr, \"DKRW\", value, function (hash, err) {\n                                            if (err) {\n                                                Toast.fail(err);\n                                            } else {\n                                                abi.startGetTxReceipt(hash, function () {\n                                                    self.getLockedBalance();\n                                                    self.fetch(self.state.pageIndex);\n                                                });\n                                            }\n                                        });\n                                        }\n                                    },\n                                ])\n                            }}>\n                                {/* 取款 */}\n                                {i18n.t(\"Withdrawal\")}\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"dkrwaccess-title\">\n                    <div className=\"left\">\n                        <p>\n                            <span>DKRW</span>\n                            {/* 存取款明细 */}\n                            {i18n.t(\"Depositdetails\")}\n                        </p>\n                    </div>\n                    <div className=\"right\">\n                        <select onChange={(e)=>{\n                            self.setState({\n                                pageIndex: 0,showType: e.target.options.selectedIndex\n                            }, function() {\n                                self.fetch(0);\n                            });\n                        }}>\n                            <option value=\"0\">\n                                {/* 存款明细 */}\n                                {i18n.t(\"Depositdetail\")}\n                            </option>\n                            <option value=\"1\">\n                                {/* 提款明细 */}\n                                {i18n.t(\"Withdrawaldetails\")}\n                            </option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"dkrwaccess-list\">\n                    <div className=\"dkrw-template\">\n                        <div className=\"dkrw-item\">\n                            <div className=\"content\">\n                                <div className=\"tab-item\">\n                                    <div className=\"dkrw-amount\">\n                                        <p>\n                                            {/* 数量 */}\n                                            {i18n.t(\"quantity\")}\n                                        </p>\n                                    </div>\n                                    <div className=\"dkrw-time\">\n                                        <p>\n                                            {/* 时间 */}\n                                            {i18n.t(\"time\")}\n                                        </p>\n                                    </div>\n                                    <div className=\"dkrw-state\">\n                                        <p>\n                                            {/* 状态 */}\n                                            {i18n.t(\"status\")}\n                                        </p>\n                                    </div>\n                                </div>\n                                <div className=\"list\">\n                                    {showInfos} \n                                </div>\n                                <div className=\"operation-item\">\n                                    <div className=\"left-icon\">\n                                        <p onClick={()=>{this.prvePage()}} > \n                                        {/* 上一页 */}\n                                            {i18n.t(\"Prev\")}\n                                        </p>\n                                    </div>\n                                    <div className=\"operation-content\">\n                                    </div>\n                                    <div className=\"right-icon\">\n                                        <p onClick={()=>{this.nextPage()}} >\n                                            {/* 下一页 */}\n                                            {i18n.t(\"Next\")}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n",["213","214"],"/Users/clearsweet/home/sero/wsbank/src/pages/withdrawlist/withdrawlist.js",["215"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, Checkbox, Button, WhiteSpace, TextareaItem, Modal, Pagination, Tabs } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js';\r\nimport i18n from '../../i18n';\r\nimport Nav from '../../component/nav';\r\nimport logo from '../../images/logo.png';\r\nimport abi from '../../api/abi';\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\nconst tabs2 = [\r\n    { title: `${i18n.t(\"Auditlist\")}`, sub: '1' },\r\n    { title: `${i18n.t(\"WithdrawalList\")}`, sub: '2' },\r\n];\r\nclass Withdrawlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            datalist: [],\r\n            Withdrawlist: [],\r\n            WithdrawlistState: true,\r\n            pageIndex: 0,\r\n            pageCount: 10,\r\n            len: 0,\r\n            showmodal: false,\r\n            username: \"\",\r\n            useremail: \"\",\r\n            userphone: \"\",\r\n            userimgurl: \"\",\r\n            userimgurlone: \"\",\r\n            userstate: \"\",\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getData(obj.mainPKr);\r\n        self.getWithdrawList(obj.mainPKr, 0, self.state.pageCount)\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getreview(whether) {\r\n        let self = this;\r\n        let keys = [];\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].checked) {\r\n                keys.push(arr[i].key)\r\n            }\r\n        }\r\n        if (keys.length > 0) {\r\n            abi.review(self.state.account.pk, self.state.account.mainPKr, keys, whether, function (hash, err) {\r\n                if (err) {\r\n                    Toast.fail(err);\r\n                } else {\r\n                    abi.startGetTxReceipt(hash, function () {\r\n                        self.getData(self.state.account.mainPKr);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    getData(mainPKr) {\r\n        let self = this;\r\n        abi.getCheckList(mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                obj.checked = false;\r\n                arr.push(obj);\r\n            }\r\n            self.setState({\r\n                datalist: arr\r\n            })\r\n        })\r\n    }\r\n\r\n    getWithdrawList(mainPKr, pageIndex, pageCount) {\r\n        let self = this;\r\n        abi.getWithdrawList(mainPKr, pageIndex, pageCount, function (res, len) {\r\n            if (len == 0) {//eslint-disable-line\r\n                self.setState({\r\n                    WithdrawlistState: false\r\n                })\r\n            }\r\n            let pageNum = Math.ceil(len / self.state.pageCount) - 1;\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.status = res[i].status;\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                if (obj.status == \"0\") {//eslint-disable-line\r\n                    arr.push(obj);\r\n                }\r\n            }\r\n\r\n            self.setState({\r\n                Withdrawlist: arr,\r\n                len: pageNum,\r\n                pageIndex: pageIndex,\r\n            })\r\n            Toast.hide()\r\n        })\r\n    }\r\n\r\n    onChange = (val) => {\r\n        let self = this;\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].i === val) {\r\n                arr[i].checked = !arr[i].checked;\r\n            }\r\n        }\r\n        this.setState({\r\n            datalist: arr\r\n        })\r\n    }\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        Toast.loading(\"Loading...\", 5)\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = res[0].code.substring(2, res[0].code.length);\r\n            self.setState({\r\n                username: res[0].name,\r\n                useremail: res[0].email,\r\n                userphone: res[0].phone,\r\n                userimgurl: 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png',\r\n                userimgurlone: 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png',\r\n                userstate: \"\",\r\n                showmodal: true\r\n            })\r\n        })\r\n    }\r\n    goToPage = (index) => {\r\n        let self = this;\r\n        let pageIndex = self.state.pageIndex + index;\r\n        if (pageIndex >= 0 && pageIndex <= self.state.len) {\r\n            Toast.loading(\"Loading...\", 60)\r\n            self.getWithdrawList(self.state.account.mainPKr, pageIndex, self.state.pageCount);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"5\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"WithdrawalReview\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <div>\r\n                            <div className=\"mytabboxs\">\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <Tabs tabs={tabs2}\r\n                                    initialPage={0}\r\n                                    animated={false}\r\n                                    useOnPan={false}\r\n                                    renderTab={tab => <span>{tab.title}</span>\r\n                                    }\r\n                                    onTabClick={console.log(\"\")}\r\n                                >\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        <List className=\"mytabbox-item  listaddress\">\r\n                                            {self.state.datalist.map(item => (\r\n                                                <CheckboxItem checked={item.checked} key={item.i} onChange={() => this.onChange(item.i)}>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：{item.time}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>\r\n                                                            {i18n.t(\"WalletAddress\")}：\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>\r\n                                                            <TextareaItem\r\n                                                                value={item.owner}\r\n                                                                data-seed=\"logId\"\r\n                                                                editable={true}\r\n                                                                disabled={true}\r\n                                                                autoHeight\r\n                                                            />\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </CheckboxItem>\r\n                                            ))}\r\n                                        </List>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        {\r\n                                            self.state.datalist.length > 0 ? <div>\r\n                                                <Flex>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' type='primary' onClick={() => this.getreview(true)}>{i18n.t(\"Pass\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' onClick={() => this.getreview(false)}>{i18n.t(\"Fail\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                            </div> : <div className=\"center\">{i18n.t(\"NoAuditRecord\")}</div>\r\n                                        }\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        {self.state.Withdrawlist.map(item => (\r\n                                            <List className=\"mytabbox-item\">\r\n                                                <div key={item.i} >\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：<span style={{ wordWrap: \"break-word\" }}>{item.time}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"status\")}：<span>{item.status == '0' ? <span>{i18n.t(\"passed\")}</span> : <span>{i18n.t(\"notpass\")}</span>}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex className=\"textover\">\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>{i18n.t(\"WalletAddress\")}：{item.owner}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div>\r\n                                            </List>\r\n                                        ))}\r\n\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <Flex>\r\n                                            <Pagination\r\n                                                total={self.state.len + 1}\r\n                                                className=\"custom-pagination-with-icon\"\r\n                                                current={self.state.pageIndex + 1}\r\n                                                locale={{\r\n                                                    prevText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(-1)}>{i18n.t(\"Prev\")}</Button>),\r\n                                                    nextText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(1)}>{i18n.t(\"Next\")}</Button>),\r\n                                                }}\r\n                                            />\r\n                                        </Flex>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n\r\n                <Modal\r\n                    visible={this.state.showmodal}\r\n                    transparent\r\n                    maskClosable={false}\r\n                    title={i18n.t(\"UserInfo\")}\r\n                    footer={[{\r\n                        text: `${i18n.t(\"close\")}`, onPress: () => {\r\n                            self.setState({\r\n                                showmodal: false\r\n                            })\r\n                        }\r\n                    }]}\r\n                >\r\n                    <div>\r\n                        <List className=\"mytabbox-item\">\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"username\")}：{self.state.username}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"phone\")}：{self.state.userphone}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"mail\")}：{self.state.useremail}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"FrontofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimgs\">\r\n                                <img src={self.state.userimgurl} />\r\n                            </div>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimgs\">\r\n                                <img src={self.state.userimgurlone} />\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                        </List>\r\n                    </div>\r\n                </Modal>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Withdrawlist;","/Users/clearsweet/home/sero/wsbank/src/pages/fixedprod/fixedprod.js",[],"/Users/clearsweet/home/sero/wsbank/src/component/nav.js",[],"/Users/clearsweet/home/sero/wsbank/src/pages/ratesetting/ratesetting.js",["216","217","218","219","220","221","222","223","224"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, InputItem, Modal, WhiteSpace, Toast, Card, Button } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n';\r\nimport BigNumber from 'bignumber.js'\r\nimport logo from '../../images/logo.png';\r\n\r\nimport {DECE,DKRW,DHAPY,FPT,HAPY,PFID,PUNIT} from '../../images/cyicon/index'\r\nimport './ratesetting.css';\r\nimport abi from '../../api/abi';\r\nconst alert = Modal.alert;\r\n\r\nclass Ratesetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            interestslist: [],\r\n            dataList: []\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getInterestsList(obj.mainPKr);\r\n        self.getBalanceOf();\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getBalanceOf() {\r\n        let self = this;\r\n        abi.getInterestsList(self.state.account.mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {\r\n                    token: \"\",\r\n                    value: 0,\r\n                    url: DECE,\r\n                    iRate: 0\r\n                }\r\n                obj.iRate =new BigNumber(res[i].iRate ).div(10**9).toFixed(3,1);\r\n                obj.token = res[i].cy;\r\n                if (res[i].cy == \"DECE\") {\r\n                    obj.url = DECE;\r\n                }else if (res[i].cy == \"DKRW\") {\r\n                    obj.url = DKRW;\r\n                }else if (res[i].cy == \"DHAPY\") {\r\n                    obj.url = DHAPY;\r\n                }else if (res[i].cy == \"FPT\") {\r\n                    obj.url = FPT;\r\n                }else if (res[i].cy == \"HAPY\") {\r\n                    obj.url = HAPY;\r\n                }else if (res[i].cy == \"PFID\") {\r\n                    obj.url = PFID;\r\n                }else if (res[i].cy == \"PUNIT\") {\r\n                    obj.url = PUNIT;\r\n                }\r\n                arr.push(obj);\r\n            }\r\n            abi.hbankBalanceOf(function (data) {\r\n                if (data != \"\") {\r\n                    for (let j = 0; j < data.length; j++) {\r\n                        for (let k = 0; k < arr.length; k++) {\r\n                            if (data[j].token == arr[k].token) {\r\n                                arr[k].value = data[j].value\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                self.setState({\r\n                    dataList: arr\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getInterestsList(mainPKr) {\r\n        let self = this;\r\n        abi.getInterestsList(mainPKr, function (res) {\r\n            self.setState({\r\n                interestslist: res\r\n            })\r\n        })\r\n    }\r\n\r\n    hbankSend(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.hbankSend(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    WithdrawIsManager(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.WithdrawIsManager(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setInterest(pk, mainPKr, cy, value) {\r\n        let self = this;\r\n        abi.setInterest(pk, mainPKr, cy, new BigNumber(value).multipliedBy(10**9).toFixed(0)*1, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"5\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"Bankmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                {\r\n                                    self.state.dataList.map((item, key) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Card key={key}>\r\n                                                    <Card.Header\r\n                                                        title={item.token}\r\n                                                        thumb={item.url}\r\n                                                        extra={<div>\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"Balance\")}： */}\r\n                                                                {item.value}</span></div>\r\n                                                                <WhiteSpace />\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"AnnualInterestRate\")}： */}\r\n                                                                {item.iRate}% &nbsp;<a onClick={() => {\r\n                                                                    alert(\"\", <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder={item.iRate}\r\n                                                                                extra=\"%\"\r\n                                                                                ref={el => this.feeInputRef = el}>RATE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let rate = this.feeInputRef.state.value;\r\n                                                                                self.setInterest(self.state.account.pk, self.state.account.mainPKr, token, rate)\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"modify\")}</a></span></div>\r\n                                                        </div>}\r\n                                                    />\r\n                                                    <Card.Body>\r\n                                                        <Flex style={{ textAlign: 'center' }}>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                                self.hbankSend(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                                self.WithdrawIsManager(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                        </Flex>\r\n                                                        <WhiteSpace />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <WhiteSpace />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ratesetting;",["225","226"],"/Users/clearsweet/home/sero/wsbank/src/pages/dkrwaccess/dkrwaccessmanager.js",["227","228","229","230","231"],"/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable array-callback-return */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { Component } from 'react';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport { Flex,Card, Toast, Button, WhiteSpace, InputItem, Modal, Tabs,Icon  } from 'antd-mobile';\nimport BigNumber from 'bignumber.js';\nimport i18n from '../../i18n';\nimport Nav from '../../component/nav';\nimport logo from '../../images/logo.png';\nimport abi from '../../api/abi';\nimport {RechareItem, WithDrawItem} from '../../component/dkrwAccessList';\nimport {DKRW} from '../../images/cyicon/index';\nimport pgnode from '../../api/pgnode';\nconst alert = Modal.alert;\n\nconst tabs2 = [\n    { title: `${i18n.t(\"Depositreview\")}`, sub: '0' },\n    { title: `${i18n.t(\"Withdrawalreviewm\")}`, sub: '1' },\n];\n\nclass DkrwAccessManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            account : JSON.parse(sessionStorage.getItem('account')),\n            dkrwAmount:0,\n            withdrawList: [],\n            rechargeList:[],\n            pageIndex:0,\n            pageCount:10,\n            showType:0,\n            owner:\"\",\n            publicKey:\"\",\n        }\n    }\n\n    init(mainPKr) {\n        if(!mainPKr) {\n            mainPKr = this.state.account.mainPKr;\n        }\n        let self = this;\n        if(this.state.showType == 0) {\n            \n            if(self.state.owner!=\"\"){\n                pgnode.getRechargeList(self.state.owner,self.state.pageIndex,self.state.pageCount, function(list){\n                    self.setState({rechargeList:list})\n                })\n            }else{\n                pgnode.getRechargeList(\"\",self.state.pageIndex,self.state.pageCount, function(list){\n                    self.setState({rechargeList:list})\n                })\n            }\n        } else { \n            if(self.state.owner!=\"\"){\n                abi.brigeWithDrawList(mainPKr, self.state.pageIndex, self.state.pageCount, self.state.owner, function (list) {\n                    // console.log(list)\n                    self.setState({\n                        withdrawList: list\n                    })\n                });\n            }else{\n                abi.brigeWithDrawList(mainPKr, self.state.pageIndex, self.state.pageCount, null, function (list) {\n                    // console.log(list)\n                    self.setState({\n                        withdrawList: list\n                    })\n                });\n            }\n        }\n    }\n\n    componentDidMount() {\n        // console.log(\"DkrwAccessManager\");\n\n        let self = this;\n        self.getBalanceOf();\n        this.init(this.state.account.mainPKr);\n        this.getPublicKey(this.state.account.pk,this.state.account.mainPKr)\n    }\n\n    getPublicKey(pk,mainPKr){\n        let self =this;\n        abi.publicKey(pk,mainPKr,function(res){\n            console.log(res,\"publicKey\")\n            self.setState({\n                publicKey:res\n            })\n        })\n    }\n\n    getBalanceOf(){\n        let self=this;\n        abi.dkrweAccessBalance(function(res){\n            self.setState({dkrwAmount:res[0].value})\n        })\n    }\n    \n    tabChange=(e)=>{\n        let self = this;\n        this.setState({showType:this.state.showType^1, pageIndex:0}, function() {\n            self.init();\n        });\n    }\n\n    prvePage() {\n        if (this.state.pageIndex == 0) {\n            return;\n        }\n\n        this.setState({\n            pageIndex: this.state.pageIndex - 1\n        }, function () {\n            this.init();\n        })\n    }\n\n    nextPage() {\n        this.setState({\n            pageIndex: this.state.pageIndex + 1\n        }, function () {\n            this.init();\n        })\n    }\n    \n\n    render() {\n        let self = this;\n        let rechargeItems = self.state.rechargeList.map((data,index) => (\n            <RechareItem key={data.trxId} pk={self.state.account.pk} mainPKr={self.state.account.mainPKr}\n                isManager={true} item={data} parent={self}\n            />\n        ))\n\n        let withDrawItems;\n        if(this.state.showType == 1) {\n            withDrawItems = self.state.withdrawList.map((data,index) => (\n                <WithDrawItem key={data.auditingId} pk={self.state.account.pk} mainPKr={self.state.account.mainPKr}\n                isManager={true} item={data} parent={self} /> \n            ))\n        }\n\n        return (\n            <Nav selectedTab=\"5\">\n                <div className=\"tabcontent\">\n                    <Flex className=\"header\">\n                        <Flex.Item className=\"tabcontent-box\">\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\n                            <p className='title'>\n                                {i18n.t(\"WithdrawalReview\")}\n                            </p>\n                        </Flex.Item>\n                    </Flex>\n                    <WhiteSpace/>\n                    <div className=\"content\">\n                        <div>\n                            <Card>\n                                <Card.Header\n                                    title=\"DKRW\"\n                                    thumb={DKRW}\n                                    extra={<span>{self.state.dkrwAmount}</span>}\n                                />\n                                    <Card.Body>\n                                        <Flex style={{ textAlign: 'center' }}>\n                                            <Flex.Item>\n                                                <Button size=\"small\" onClick={() => { alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\n                                                    <div>\n                                                        <InputItem value=\"DKRW\" disabled ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\n                                                        <InputItem placeholder=\"value\" ref={el => this.valueInputRef = el}>VALUE:</InputItem>\n                                                    </div>\n                                                    </div>, [\n                                                    { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\n                                                    {\n                                                        text: `${i18n.t(\"confirm\")}`, onPress: () => {\n                                                            let value = new BigNumber(self.valueInputRef.state.value).multipliedBy(1e18);\n                                                            abi.dkrwAccessRecharge(self.state.account.pk, self.state.account.mainPKr, value,\"DKRW\", function (hash, err) {\n                                                                if (err) {\n                                                                    Toast.fail(err);\n                                                                } else {\n                                                                    abi.startGetTxReceipt(hash, function () {\n                                                                        self.getBalances();\n                                                                    });\n                                                                }\n                                                            });\n                                                        }\n                                                    },\n                                                ])\n                                            }}>{i18n.t(\"Recharge\")}</Button>\n                                        </Flex.Item>\n                                        <Flex.Item>\n                                            <Button size=\"small\" onClick={() => { alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\n                                            <div>\n                                                <InputItem  value=\"DKRW\" disabled ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\n                                                <InputItem placeholder=\"value\" ref={el => this.valueInputRef = el}>VALUE:</InputItem>\n                                            </div>\n                                            </div>, [{ text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\n                                                {\n                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\n                                                    let value = new BigNumber(self.valueInputRef.state.value).multipliedBy(1e18);\n                                                    abi.dkrwAccessWithdraw(self.state.account.pk, self.state.account.mainPKr, value,\"DKRW\",function(hash, err) {\n                                                            if (err) {\n                                                                Toast.fail(err);\n                                                            } else {\n                                                                abi.startGetTxReceipt(hash, function () {\n                                                                    self.getBalances();\n                                                                });\n                                                            }\n                                                        });\n                                                    }\n                                                },])\n                                        }}>{i18n.t(\"withdraw\")}</Button>\n                                        </Flex.Item>\n                                    </Flex>\n                                <WhiteSpace />\n                                </Card.Body>\n                            </Card>\n                            <WhiteSpace/>\n                            <WhiteSpace/>\n                            <InputItem\n                                placeholder={i18n.t(\"WalletAddress\")}\n                                ref={el => this.MainPkrFocusInst = el}\n                                clear\n                                extra={<div><Icon type=\"search\" size='xs' /></div>}\n                                onExtraClick={() =>{\n\n                                    self.setState({\n                                        owner:self.MainPkrFocusInst.state.value\n                                    },function(){\n                                        self.init();\n                                    })\n\n                                    // self.init(self.MainPkrFocusInst.state.value);\n                                    // abi.pkrDecrypt(self.state.account.pk,\"qazwsxedc\",function(res){\n                                    //     console.log(res,self.state.account.pk,\"pkrDecrypt\")\n                                    // })\n\n                                    // let data = Buffer.from(\"12345678\");\n                                    // abi.pkrCrypto(self.state.account.pk, self.state.account.mainPKr,data ,function(rr){\n                                    //     console.log(\"pkrCrypto\", rr)\n                                    //     abi.pkrCrypto(self.state.account.pk, self.state.account.mainPKr, rr,function(rr1){\n                                    //         console.log(\"pkrCrypto\", Buffer.from(rr1.slice(2), 'hex').toString())\n                                    //     })\n                                    // });\n\n                                    // if(self.MainPkrFocusInst.state.value==\"\"){\n                                    //     console.log(1);\n                                    // }else{\n                                    //     console.log(2)\n                                    // }\n                                }\n                            }\n                            ></InputItem> \n                           \n                            <div className=\"mytabboxs\">\n                                <WhiteSpace  />\n                                <Tabs tabs={tabs2}\n                                    initialPage={0}\n                                    animated={false}\n                                    useOnPan={false}\n                                    renderTab={tab => <span>{tab.title}</span>}\n                                    onChange={(e)=>{self.tabChange(e)}}\n                                >\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\n                                        <div className=\"dkrw-template\">\n                                            <div className=\"dkrw-item\">\n                                                <div className=\"content\">\n                                                    <div className=\"tab-item\">\n                                                        <div className=\"dkrw-amount\">\n                                                            <p>\n                                                                {/* 数量 */}\n                                                                {i18n.t(\"quantity\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"dkrw-time\">\n                                                            <p>\n                                                                {/* 时间 */}\n                                                                {i18n.t(\"time\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"dkrw-state\">\n                                                            <p>\n                                                                {/* 状态 */}\n                                                                {i18n.t(\"status\")}\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"list\">{rechargeItems}</div>\n                                                    <div className=\"operation-item\">\n                                                        <div className=\"left-icon\">\n                                                            <p onClick={()=>{this.prvePage()}}>\n                                                                {/* 上一页 */}\n                                                                {i18n.t(\"Prev\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"operation-content\">\n                                                        </div>\n                                                        <div className=\"right-icon\">\n                                                            <p onClick={()=>{this.nextPage()}}>\n                                                                {/* 下一页 */}\n                                                                {i18n.t(\"Next\")}\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\n                                        <div className=\"dkrw-template\">\n                                            <div className=\"dkrw-item\">\n                                                <div className=\"content\">\n                                                    <div className=\"tab-item\">\n                                                        <div className=\"dkrw-amount\">\n                                                            <p>\n                                                                {/* 数量 */}\n                                                                {i18n.t(\"quantity\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"dkrw-time\">\n                                                            <p>\n                                                                {/* 时间 */}\n                                                                {i18n.t(\"time\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"dkrw-state\">\n                                                            <p>\n                                                                {/* 状态 */}\n                                                                {i18n.t(\"status\")}\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"list\">{ withDrawItems} </div>\n                                                    <div className=\"operation-item\">\n                                                        <div className=\"left-icon\">\n                                                            <p onClick={()=>{this.prvePage()}}>\n                                                                {/* 上一页 */}\n                                                                {i18n.t(\"Prev\")}\n                                                            </p>\n                                                        </div>\n                                                        <div className=\"operation-content\">\n                                                        </div>\n                                                        <div className=\"right-icon\">\n                                                            <p onClick={()=>{this.nextPage()}}>\n                                                                {/* 下一页 */}\n                                                                {i18n.t(\"Next\")}\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </Tabs>\n                            </div>\n                        </div>\n                    </div>\n                    <WhiteSpace size=\"lg\" />\n                    <div className= \"publickey\">\n                        <p>{self.state.publicKey}</p>\n                    </div>\n                    <WhiteSpace size=\"lg\" />\n\n                </div>\n            </Nav>\n        )\n    }\n}\n\nexport default DkrwAccessManager;","/Users/clearsweet/home/sero/wsbank/src/images/cyicon/index.js",[],"/Users/clearsweet/home/sero/wsbank/src/pages/assets/assets.js",["232","233","234","235","236","237","238","239","240"],"/Users/clearsweet/home/sero/wsbank/src/pages/worldshare/worldshareapp.js",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":40,"column":24,"nodeType":"247","messageId":"248","endLine":40,"endColumn":26},{"ruleId":"249","severity":1,"message":"250","line":157,"column":83,"nodeType":"247","messageId":"251","endLine":157,"endColumn":84},{"ruleId":"241","replacedBy":"252"},{"ruleId":"243","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":2,"column":8,"nodeType":"256","messageId":"257","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"258","line":16,"column":26,"nodeType":"247","messageId":"248","endLine":16,"endColumn":28},{"ruleId":"245","severity":1,"message":"258","line":34,"column":26,"nodeType":"247","messageId":"248","endLine":34,"endColumn":28},{"ruleId":"241","replacedBy":"259"},{"ruleId":"243","replacedBy":"260"},{"ruleId":"249","severity":1,"message":"250","line":91,"column":99,"nodeType":"247","messageId":"251","endLine":91,"endColumn":100},{"ruleId":"245","severity":1,"message":"258","line":226,"column":46,"nodeType":"247","messageId":"248","endLine":226,"endColumn":48},{"ruleId":"245","severity":1,"message":"258","line":296,"column":58,"nodeType":"247","messageId":"248","endLine":296,"endColumn":60},{"ruleId":"245","severity":1,"message":"258","line":344,"column":70,"nodeType":"247","messageId":"248","endLine":344,"endColumn":72},{"ruleId":"241","replacedBy":"261"},{"ruleId":"243","replacedBy":"262"},{"ruleId":"245","severity":1,"message":"258","line":91,"column":25,"nodeType":"247","messageId":"248","endLine":91,"endColumn":27},{"ruleId":"245","severity":1,"message":"258","line":155,"column":51,"nodeType":"247","messageId":"248","endLine":155,"endColumn":53},{"ruleId":"245","severity":1,"message":"258","line":157,"column":59,"nodeType":"247","messageId":"248","endLine":157,"endColumn":61},{"ruleId":"245","severity":1,"message":"258","line":159,"column":68,"nodeType":"247","messageId":"248","endLine":159,"endColumn":70},{"ruleId":"245","severity":1,"message":"258","line":160,"column":72,"nodeType":"247","messageId":"248","endLine":160,"endColumn":74},{"ruleId":"245","severity":1,"message":"258","line":164,"column":63,"nodeType":"247","messageId":"248","endLine":164,"endColumn":65},{"ruleId":"245","severity":1,"message":"258","line":165,"column":67,"nodeType":"247","messageId":"248","endLine":165,"endColumn":69},{"ruleId":"245","severity":1,"message":"258","line":166,"column":71,"nodeType":"247","messageId":"248","endLine":166,"endColumn":73},{"ruleId":"245","severity":1,"message":"258","line":176,"column":51,"nodeType":"247","messageId":"248","endLine":176,"endColumn":53},{"ruleId":"245","severity":1,"message":"258","line":176,"column":69,"nodeType":"247","messageId":"248","endLine":176,"endColumn":71},{"ruleId":"245","severity":1,"message":"258","line":176,"column":87,"nodeType":"247","messageId":"248","endLine":176,"endColumn":89},{"ruleId":"245","severity":1,"message":"258","line":178,"column":60,"nodeType":"247","messageId":"248","endLine":178,"endColumn":62},{"ruleId":"249","severity":1,"message":"250","line":217,"column":87,"nodeType":"247","messageId":"251","endLine":217,"endColumn":88},{"ruleId":"241","replacedBy":"263"},{"ruleId":"243","replacedBy":"264"},{"ruleId":"245","severity":1,"message":"246","line":57,"column":35,"nodeType":"247","messageId":"248","endLine":57,"endColumn":37},{"ruleId":"241","replacedBy":"265"},{"ruleId":"243","replacedBy":"266"},{"ruleId":"254","severity":1,"message":"267","line":9,"column":10,"nodeType":"256","messageId":"257","endLine":9,"endColumn":16},{"ruleId":"245","severity":1,"message":"258","line":58,"column":65,"nodeType":"247","messageId":"248","endLine":58,"endColumn":67},{"ruleId":"245","severity":1,"message":"258","line":108,"column":19,"nodeType":"247","messageId":"248","endLine":108,"endColumn":21},{"ruleId":"245","severity":1,"message":"258","line":111,"column":26,"nodeType":"247","messageId":"248","endLine":111,"endColumn":28},{"ruleId":"245","severity":1,"message":"258","line":206,"column":20,"nodeType":"247","messageId":"248","endLine":206,"endColumn":22},{"ruleId":"245","severity":1,"message":"258","line":241,"column":57,"nodeType":"247","messageId":"248","endLine":241,"endColumn":59},{"ruleId":"245","severity":1,"message":"258","line":303,"column":29,"nodeType":"247","messageId":"248","endLine":303,"endColumn":31},{"ruleId":"245","severity":1,"message":"258","line":316,"column":36,"nodeType":"247","messageId":"248","endLine":316,"endColumn":38},{"ruleId":"245","severity":1,"message":"258","line":319,"column":36,"nodeType":"247","messageId":"248","endLine":319,"endColumn":38},{"ruleId":"245","severity":1,"message":"258","line":320,"column":34,"nodeType":"247","messageId":"248","endLine":320,"endColumn":36},{"ruleId":"245","severity":1,"message":"258","line":323,"column":41,"nodeType":"247","messageId":"248","endLine":323,"endColumn":43},{"ruleId":"245","severity":1,"message":"258","line":333,"column":41,"nodeType":"247","messageId":"248","endLine":333,"endColumn":43},{"ruleId":"245","severity":1,"message":"258","line":211,"column":35,"nodeType":"247","messageId":"248","endLine":211,"endColumn":37},{"ruleId":"254","severity":1,"message":"268","line":20,"column":8,"nodeType":"256","messageId":"257","endLine":20,"endColumn":14},{"ruleId":"245","severity":1,"message":"258","line":149,"column":28,"nodeType":"247","messageId":"248","endLine":149,"endColumn":30},{"ruleId":"245","severity":1,"message":"258","line":202,"column":35,"nodeType":"247","messageId":"248","endLine":202,"endColumn":37},{"ruleId":"245","severity":1,"message":"258","line":213,"column":35,"nodeType":"247","messageId":"248","endLine":213,"endColumn":37},{"ruleId":"245","severity":1,"message":"258","line":323,"column":35,"nodeType":"247","messageId":"248","endLine":323,"endColumn":37},{"ruleId":"245","severity":1,"message":"258","line":334,"column":35,"nodeType":"247","messageId":"248","endLine":334,"endColumn":37},{"ruleId":"254","severity":1,"message":"269","line":582,"column":7,"nodeType":"256","messageId":"257","endLine":582,"endColumn":11},{"ruleId":"254","severity":1,"message":"269","line":619,"column":7,"nodeType":"256","messageId":"257","endLine":619,"endColumn":11},{"ruleId":"245","severity":1,"message":"258","line":644,"column":35,"nodeType":"247","messageId":"248","endLine":644,"endColumn":37},{"ruleId":"245","severity":1,"message":"258","line":655,"column":35,"nodeType":"247","messageId":"248","endLine":655,"endColumn":37},{"ruleId":"241","replacedBy":"270"},{"ruleId":"243","replacedBy":"271"},{"ruleId":"245","severity":1,"message":"246","line":41,"column":22,"nodeType":"247","messageId":"248","endLine":41,"endColumn":24},{"ruleId":"245","severity":1,"message":"246","line":49,"column":42,"nodeType":"247","messageId":"248","endLine":49,"endColumn":44},{"ruleId":"245","severity":1,"message":"258","line":57,"column":53,"nodeType":"247","messageId":"248","endLine":57,"endColumn":55},{"ruleId":"245","severity":1,"message":"258","line":59,"column":60,"nodeType":"247","messageId":"248","endLine":59,"endColumn":62},{"ruleId":"245","severity":1,"message":"258","line":61,"column":60,"nodeType":"247","messageId":"248","endLine":61,"endColumn":62},{"ruleId":"245","severity":1,"message":"258","line":63,"column":60,"nodeType":"247","messageId":"248","endLine":63,"endColumn":62},{"ruleId":"245","severity":1,"message":"258","line":65,"column":60,"nodeType":"247","messageId":"248","endLine":65,"endColumn":62},{"ruleId":"245","severity":1,"message":"258","line":67,"column":60,"nodeType":"247","messageId":"248","endLine":67,"endColumn":62},{"ruleId":"245","severity":1,"message":"258","line":69,"column":60,"nodeType":"247","messageId":"248","endLine":69,"endColumn":62},{"ruleId":"245","severity":1,"message":"246","line":82,"column":21,"nodeType":"247","messageId":"248","endLine":82,"endColumn":23},{"ruleId":"245","severity":1,"message":"258","line":85,"column":42,"nodeType":"247","messageId":"248","endLine":85,"endColumn":44},{"ruleId":"245","severity":1,"message":"246","line":50,"column":45,"nodeType":"247","messageId":"248","endLine":50,"endColumn":47},{"ruleId":"245","severity":1,"message":"246","line":54,"column":34,"nodeType":"247","messageId":"248","endLine":54,"endColumn":36},{"ruleId":"245","severity":1,"message":"258","line":155,"column":74,"nodeType":"247","messageId":"248","endLine":155,"endColumn":76},{"ruleId":"245","severity":1,"message":"258","line":162,"column":75,"nodeType":"247","messageId":"248","endLine":162,"endColumn":77},{"ruleId":"245","severity":1,"message":"258","line":169,"column":74,"nodeType":"247","messageId":"248","endLine":169,"endColumn":76},{"ruleId":"254","severity":1,"message":"272","line":19,"column":10,"nodeType":"256","messageId":"257","endLine":19,"endColumn":16},{"ruleId":"254","severity":1,"message":"269","line":66,"column":13,"nodeType":"256","messageId":"257","endLine":66,"endColumn":17},{"ruleId":"254","severity":1,"message":"269","line":79,"column":13,"nodeType":"256","messageId":"257","endLine":79,"endColumn":17},{"ruleId":"245","severity":1,"message":"258","line":86,"column":37,"nodeType":"247","messageId":"248","endLine":86,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":213,"column":35,"nodeType":"247","messageId":"248","endLine":213,"endColumn":37},{"ruleId":"245","severity":1,"message":"258","line":213,"column":68,"nodeType":"247","messageId":"248","endLine":213,"endColumn":70},{"ruleId":"273","severity":1,"message":"274","line":394,"column":23,"nodeType":"275","messageId":"276","endLine":394,"endColumn":38,"fix":"277"},{"ruleId":"245","severity":1,"message":"258","line":510,"column":33,"nodeType":"247","messageId":"248","endLine":510,"endColumn":35},{"ruleId":"245","severity":1,"message":"258","line":523,"column":33,"nodeType":"247","messageId":"248","endLine":523,"endColumn":35},{"ruleId":"245","severity":1,"message":"258","line":568,"column":32,"nodeType":"247","messageId":"248","endLine":568,"endColumn":34},{"ruleId":"241","replacedBy":"278"},{"ruleId":"243","replacedBy":"279"},{"ruleId":"245","severity":1,"message":"258","line":282,"column":106,"nodeType":"247","messageId":"248","endLine":282,"endColumn":108},{"ruleId":"245","severity":1,"message":"258","line":50,"column":31,"nodeType":"247","messageId":"248","endLine":50,"endColumn":33},{"ruleId":"245","severity":1,"message":"258","line":52,"column":37,"nodeType":"247","messageId":"248","endLine":52,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":54,"column":37,"nodeType":"247","messageId":"248","endLine":54,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":56,"column":37,"nodeType":"247","messageId":"248","endLine":56,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":58,"column":37,"nodeType":"247","messageId":"248","endLine":58,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":60,"column":37,"nodeType":"247","messageId":"248","endLine":60,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":62,"column":37,"nodeType":"247","messageId":"248","endLine":62,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":68,"column":26,"nodeType":"247","messageId":"248","endLine":68,"endColumn":28},{"ruleId":"245","severity":1,"message":"258","line":71,"column":47,"nodeType":"247","messageId":"248","endLine":71,"endColumn":49},{"ruleId":"241","replacedBy":"280"},{"ruleId":"243","replacedBy":"281"},{"ruleId":"245","severity":1,"message":"258","line":43,"column":32,"nodeType":"247","messageId":"248","endLine":43,"endColumn":34},{"ruleId":"245","severity":1,"message":"246","line":45,"column":32,"nodeType":"247","messageId":"248","endLine":45,"endColumn":34},{"ruleId":"245","severity":1,"message":"246","line":55,"column":32,"nodeType":"247","messageId":"248","endLine":55,"endColumn":34},{"ruleId":"245","severity":1,"message":"258","line":107,"column":34,"nodeType":"247","messageId":"248","endLine":107,"endColumn":36},{"ruleId":"245","severity":1,"message":"258","line":136,"column":32,"nodeType":"247","messageId":"248","endLine":136,"endColumn":34},{"ruleId":"245","severity":1,"message":"258","line":75,"column":31,"nodeType":"247","messageId":"248","endLine":75,"endColumn":33},{"ruleId":"245","severity":1,"message":"258","line":77,"column":38,"nodeType":"247","messageId":"248","endLine":77,"endColumn":40},{"ruleId":"245","severity":1,"message":"258","line":79,"column":37,"nodeType":"247","messageId":"248","endLine":79,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":81,"column":37,"nodeType":"247","messageId":"248","endLine":81,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":83,"column":37,"nodeType":"247","messageId":"248","endLine":83,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":85,"column":37,"nodeType":"247","messageId":"248","endLine":85,"endColumn":39},{"ruleId":"245","severity":1,"message":"258","line":87,"column":37,"nodeType":"247","messageId":"248","endLine":87,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":95,"column":26,"nodeType":"247","messageId":"248","endLine":95,"endColumn":28},{"ruleId":"245","severity":1,"message":"258","line":98,"column":44,"nodeType":"247","messageId":"248","endLine":98,"endColumn":46},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["282"],["283"],"no-unused-vars","'keccak256' is defined but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.",["282"],["283"],["282"],["283"],["282"],["283"],["282"],["283"],"'values' is defined but never used.","'base58' is defined but never used.","'self' is assigned a value but never used.",["282"],["283"],"'reject' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property bankName.","MemberExpression","unexpectedWhitespace",{"range":"284","text":"285"},["282"],["283"],["282"],["283"],"no-global-assign","no-unsafe-negation",[16102,16104],"."]