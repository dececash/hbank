[{"H:\\hbank\\src\\index.js":"1","H:\\hbank\\src\\pages\\assets\\assetsdetail.js":"2","H:\\hbank\\src\\api\\jsonrpc.js":"3","H:\\hbank\\src\\pages\\home\\home.js":"4","H:\\hbank\\src\\pages\\assets\\assets.js":"5","H:\\hbank\\src\\api\\abi.js":"6","H:\\hbank\\src\\pages\\financial\\financial.js":"7","H:\\hbank\\src\\pages\\my\\my.js":"8","H:\\hbank\\src\\component\\nav.js":"9","H:\\hbank\\src\\App.js":"10","H:\\hbank\\src\\i18n.js":"11","H:\\hbank\\src\\api\\common.js":"12","H:\\hbank\\src\\pages\\register\\register.js":"13","H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js":"14","H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js":"15","H:\\hbank\\src\\pages\\userlist\\userlist.js":"16","H:\\hbank\\src\\pages\\bank\\bank.js":"17"},{"size":178,"mtime":1608885154044,"results":"18","hashOfConfig":"19"},{"size":9916,"mtime":1609382554940,"results":"20","hashOfConfig":"19"},{"size":1057,"mtime":1605506526591,"results":"21","hashOfConfig":"19"},{"size":11487,"mtime":1609385602158,"results":"22","hashOfConfig":"19"},{"size":12621,"mtime":1609391643975,"results":"23","hashOfConfig":"19"},{"size":25465,"mtime":1609392678874,"results":"24","hashOfConfig":"19"},{"size":1092,"mtime":1609322061001,"results":"25","hashOfConfig":"19"},{"size":6650,"mtime":1609320312139,"results":"26","hashOfConfig":"19"},{"size":5911,"mtime":1609383273164,"results":"27","hashOfConfig":"19"},{"size":1368,"mtime":1608616207219,"results":"28","hashOfConfig":"19"},{"size":861,"mtime":1609143452585,"results":"29","hashOfConfig":"19"},{"size":1793,"mtime":1606827437794,"results":"30","hashOfConfig":"19"},{"size":23765,"mtime":1609383062915,"results":"31","hashOfConfig":"19"},{"size":13887,"mtime":1609391263914,"results":"32","hashOfConfig":"19"},{"size":11313,"mtime":1609323508038,"results":"33","hashOfConfig":"19"},{"size":8424,"mtime":1609382960414,"results":"34","hashOfConfig":"19"},{"size":16366,"mtime":1609388767772,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"hpi79g",{"filePath":"39","messages":"40","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"H:\\hbank\\src\\index.js",[],["84","85"],"H:\\hbank\\src\\pages\\assets\\assetsdetail.js",["86","87","88","89","90","91","92","93","94","95","96","97"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport Nav from '../../component/nav'\r\nimport './assetsdetail.css'\r\nimport abi from '../../api/abi.js'\r\nimport i18n from '../../i18n'\r\n\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Assetsdetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            cy: \"\",\r\n            account: {},\r\n            iRate: \"\",\r\n            datalist: [],\r\n            len: 40000000,\r\n            count: 10,\r\n            profitday: 0\r\n        }\r\n    }\r\n\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        self.setState({ isLoading: true });\r\n        self.getData(self.state.account.mainPKr, self.state.cy, self.state.len, self.state.count + 10, function (res, profitday) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let cy = this.props.location.state.cy;\r\n        let account = this.props.location.state.account;\r\n        let iRate = this.props.location.state.iRate;\r\n        self.setState({\r\n            cy: cy,\r\n            account: account,\r\n            iRate: iRate\r\n        });\r\n        self.getData(account.mainPKr, cy, self.state.len, self.state.count, function (res, profitday, isLoading) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: isLoading\r\n            });\r\n        });\r\n    }\r\n    getData(mainPKr, cy, len, count, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.getRecords(mainPKr, cy, len, count, function (res) {\r\n            console.log(res)\r\n            if (res.len == \"0\") {\r\n                callback([], 0, false)\r\n            } else {\r\n                for (let i = 0; i < res.list.length; i++) {\r\n                    if (i >= 1) {\r\n                        let obj = {\r\n                            type: 0,\r\n                            time: \"\",\r\n                            value: \"\",\r\n                            state: 0\r\n                        }\r\n                        obj.state = res.statusList[i];\r\n                        obj.type = res.list[i].rType;\r\n                        obj.time = self.formatTime(res.list[i].time * 1000, 'Y.M.D h:m');\r\n                        obj.value = new BigNumber(res.list[i].value).dividedBy(10 ** 18).toFixed(3, 1);\r\n                        arr.push(obj);\r\n                    }\r\n                }\r\n                console.log(res.list[0])\r\n                callback(arr, new BigNumber(res.list[0].value).dividedBy(10 ** 18).toFixed(3, 1), false)\r\n            }\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {\r\n                                        item.type == 1 ? <span>{i18n.t(\"Recharge\")}</span> : <span>\r\n                                            {\r\n                                                item.type == 2 ? <span>\r\n                                                    {\r\n                                                        item.state == 1 ? <span>{i18n.t(\"Withdrawalreview\")}</span> : <span> {\r\n                                                            item.state == 2 ? <span>{i18n.t(\"Withdrawalreviewfailed\")}</span> : <span>{i18n.t(\"withdraw\")}</span>\r\n                                                        }</span>\r\n                                                    }\r\n                                                </span> : <span>{\r\n                                                    item.type == 3 ? <span>{i18n.t(\"profit\")}</span> : <span>{\r\n                                                        item.type == 4 ? <span>{i18n.t(\"Sell\")}</span> : <span>{i18n.t(\"purchase\")}</span>\r\n                                                    }</span>\r\n                                                }</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center detailnum\">\r\n                                    {\r\n                                        item.type == 1 || item.type == 3 || item.type == 5 ? <span>+</span> : <span>\r\n                                            {\r\n                                                item.state == 3 ? <span></span> : <span>-</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                    {item.value}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">{item.time}</Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"1\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Balancedetails\")}</Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"AnnualInterestRate\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.iRate}%\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"Undrawnincome\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.profitday}\r\n                        </Flex.Item>\r\n\r\n                    </Flex>\r\n                    <div className=\"detailcontent\">\r\n\r\n                        <div className=\"detailcontent-box\">\r\n                            <ListView\r\n                                ref={el => this.lv = el}\r\n                                dataSource={this.state.dataSource}\r\n                                renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                    {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}`+'...' : `${i18n.t(\"Nomoredata\")}`}\r\n                                </div>)}\r\n                                renderBodyComponent={() => <MyBody />}\r\n                                renderRow={row}\r\n                                renderSeparator={separator}\r\n                                style={{\r\n                                    height: this.state.height,\r\n                                    overflow: 'auto',\r\n                                }}\r\n                                onScroll={() => { console.log('scroll'); }}\r\n                                scrollRenderAheadDistance={400}\r\n                                onEndReached={this.onEndReached}\r\n                                onEndReachedThreshold={10}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assetsdetail;",["98","99"],"H:\\hbank\\src\\api\\jsonrpc.js",["100"],"import axios from 'axios'\r\n\r\n\r\nclass JsonRpc {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    seroRpc(rpc, _method, _params, callback) {\r\n        let data = {\r\n            id: 0,\r\n            jsonrpc: \"2.0\",\r\n            method: _method,\r\n            params: _params,\r\n        };\r\n        axios.post(rpc, data).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(\"req error: \", error);\r\n        })\r\n    }\r\n\r\n    post(url, data, timeout, callback) {\r\n        axios.post(url, data, {timeout: timeout}).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            callback(null, error);\r\n        })\r\n    }\r\n\r\n    get(url, cb) {\r\n        axios.get(url).then(function (rest) {\r\n            if (cb) {\r\n                cb(rest.data)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport {JsonRpc}\r\n","H:\\hbank\\src\\pages\\home\\home.js",["101"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport Nav from '../../component/nav'\r\nimport i18n from '../../i18n'\r\nimport { WingBlank, WhiteSpace, List, Flex, Modal, InputItem, Toast } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport abi from '../../api/abi.js'\r\nimport { bytes32ToToken, showPK, trimNumber } from \"../../api/common\";\r\nimport logo from '../../images/logo.png'\r\nimport './home.css'\r\n\r\nimport swap_icon from '../../icons/swap.png'\r\n\r\nconst operation = Modal.operation;\r\nconst alert = Modal.alert;\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            account: {},\r\n            pairs: [],\r\n            retValue: 0,\r\n            isManager: false,\r\n            balances: [],\r\n            changeType: {\r\n                value: 0,\r\n                label: `${i18n.t(\"Localaccount\")}`\r\n            },\r\n            choosedata: [\r\n                { value: 0, label:  `${i18n.t(\"Localaccount\")}` },\r\n                { value: 1, label:  `${i18n.t(\"BankAccount\")}` },\r\n            ]\r\n        }\r\n    }\r\n\r\n    fetchInfo(mainPKr) {\r\n        if (!mainPKr && this.state.account) {\r\n            mainPKr = this.state.account.mainPKr;\r\n        }\r\n\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (pairs) {\r\n            self.setState({ pairs: pairs });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({ account: obj });\r\n        self.getIsManager(obj.mainPKr);\r\n        self.fetchInfo(obj.mainPKr);\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    getIsManager(mainPKr) {\r\n        let self = this;\r\n        abi.isManager(mainPKr, function (res) {\r\n            if (res) {\r\n                abi.balanceOf(function (balances) {\r\n                    self.setState({ balances: balances });\r\n                })\r\n            }\r\n\r\n            self.setState({\r\n                isManager: res\r\n            })\r\n        })\r\n    }\r\n\r\n    changAccount() {\r\n        let self = this;\r\n        abi.init\r\n            .then(() => {\r\n                abi.accountList(function (accounts) {\r\n                    let actions = [];\r\n                    accounts.forEach(function (account, index) {\r\n                        actions.push(\r\n                            {\r\n                                text: <span key={index}>{account.name + \":\" + showPK(account.pk)}</span>, onPress: () => {\r\n                                    self.getIsManager(account.mainPKr);\r\n                                    self.setState({\r\n                                        account: account\r\n                                    })\r\n                                    sessionStorage.setItem('account', JSON.stringify(account));\r\n                                }\r\n                            }\r\n                        );\r\n                    });\r\n                    operation(actions);\r\n                });\r\n            })\r\n    }\r\n\r\n    changeType() {\r\n        let self = this;\r\n        let actions = [];\r\n        self.state.choosedata.forEach(function (item, index) {\r\n            actions.push(\r\n                {\r\n                    text: <span key={index}>{item.label}</span>, onPress: () => {\r\n                        self.setState({ changeType: item });\r\n                    }\r\n                }\r\n            );\r\n        });\r\n        operation(actions);\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        let pairs = this.state.pairs.map((each, index) => {\r\n            let tokenA = bytes32ToToken(each.tokenA);\r\n            let tokenB = bytes32ToToken(each.tokenB);\r\n            if (!tokenA || !tokenB) {\r\n                return;\r\n            }\r\n            if (new BigNumber(each.price).isZero()) {\r\n                return;\r\n            }\r\n            let price = new BigNumber(each.price).div(1e9).toFixed(9);\r\n            if (each.flag) {\r\n                tokenA = bytes32ToToken(each.tokenB);\r\n                tokenB = bytes32ToToken(each.tokenA);\r\n                price = new BigNumber(1e9).div(each.price).toFixed(9);\r\n            }\r\n            price = trimNumber(price, 9);\r\n            return (\r\n                <List.Item key={index}>\r\n\r\n                    <Flex style={{ textAlign: 'center' }}>\r\n                        <Flex.Item>\r\n                            {tokenA}\r\n                        </Flex.Item>\r\n                        <Flex.Item><a onClick={() => {\r\n                            let pairs = this.state.pairs;\r\n                            pairs[index].flag = !pairs[index].flag;\r\n                            this.setState({ pairs: pairs });\r\n                        }}><img src={swap_icon} /></a></Flex.Item>\r\n                        <Flex.Item>{tokenB}</Flex.Item>\r\n                        <Flex.Item>\r\n                            {price}\r\n                        </Flex.Item>\r\n                        <Flex.Item>\r\n                            <span className=\"exchange\" onClick={() => {\r\n                                alert('', <div>\r\n                                    <div>\r\n                                        <InputItem\r\n                                            value={price} disabled={true}\r\n                                        >Price</InputItem>\r\n                                        <InputItem\r\n                                            placeholder=\"amount\" ref={el => this.sendInputRef = el}\r\n                                            onChange={(value) => {\r\n                                                this.retInputRef.value = new BigNumber(value * Number(price)).toFixed(6);\r\n                                            }}>{tokenA}</InputItem>\r\n                                        <div className=\"am-list-item am-input-item am-list-item-middle\">\r\n                                            <div className=\"am-list-line\">\r\n                                                <div className=\"am-input-label am-input-label-5\">{tokenB}</div>\r\n                                                <div className=\"am-input-control\">\r\n                                                    <input disabled placeholder=\"amount\"\r\n                                                        ref={el => this.retInputRef = el} type=\"text\" value=\"\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>, [\r\n                                    { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                    {\r\n                                        text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                            let value = new BigNumber(this.sendInputRef.state.value).multipliedBy(1e18);\r\n                                            console.log(value, \">>>>>>>>>>>>>\")\r\n                                            if (this.state.changeType.value == 0) {\r\n                                                abi.exchange(this.state.account.pk, this.state.account.mainPKr, tokenB, value, tokenA, function (hash, err) {\r\n                                                    if (err) {\r\n                                                        Toast.fail(err);\r\n                                                    } else {\r\n                                                        abi.startGetTxReceipt(hash, function (data) {\r\n                                                            self.getIsManager(self.state.account.mainPKr);\r\n                                                            self.fetchInfo(self.state.account.mainPKr);\r\n                                                        });\r\n                                                    }\r\n                                                });\r\n                                            } else {\r\n                                                abi.hbankexchange(this.state.account.pk, this.state.account.mainPKr, tokenB, value.toFixed(0), tokenA, function (hash, err) {\r\n                                                    if (err) {\r\n                                                        Toast.fail(err);\r\n                                                    } else {\r\n\r\n                                                        abi.startGetTxReceipt(hash, function (data) {\r\n                                                            self.getIsManager(self.state.account.mainPKr);\r\n                                                            self.fetchInfo(self.state.account.mainPKr);\r\n                                                        });\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    },\r\n                                ])\r\n                            }}>{i18n.t(\"exchange\")}</span>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </List.Item>\r\n            )\r\n        });\r\n        return (\r\n            <WingBlank>\r\n                <Nav selectedTab=\"2\">\r\n                    <div className=\"tabcontent\">\r\n                        <Flex className=\"header\">\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <img src={logo} alt=\"logo\" />\r\n                                <p className='title'>\r\n                                    {i18n.t(\"assetexchange\")}\r\n                                </p>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex className=\"changAccount tabcontent-box\" style={{ textAlign: 'center' }}>\r\n                            <Flex.Item\r\n                                className=\"changAccount-name\">{i18n.t(\"Exchangeaccount\")}:{this.state.changeType.label}</Flex.Item>\r\n                            <Flex.Item>\r\n                                <a onClick={() => {\r\n                                    this.changeType();\r\n                                }}>{i18n.t(\"Switchaccount\")}</a>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <List className=\"tabcontent-box\">\r\n                            {/* <Flex className=\"listheader \">\r\n                                <Flex.Item>{i18n.t(\"Originalassets\")}</Flex.Item>\r\n                                <Flex.Item>&nbsp;</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"Targetasset\")}</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"price\")}</Flex.Item>\r\n                                <Flex.Item>{i18n.t(\"operation\")}</Flex.Item>\r\n                            </Flex> */}\r\n                            {pairs}\r\n                        </List>\r\n                    </div>\r\n                </Nav>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","H:\\hbank\\src\\pages\\assets\\assets.js",["102","103"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, WhiteSpace, Modal, Button, InputItem, Toast, } from 'antd-mobile';\r\nimport Nav from '../../component/nav'\r\nimport './assets.css'\r\nimport { showPK } from \"../../api/common\";\r\nimport i18n from '../../i18n'\r\nimport abi from '../../api/abi';\r\nimport logo from '../../images/logo.png';\r\nimport BigNumber from 'bignumber.js';\r\nconst alert = Modal.alert;\r\nconst operation = Modal.operation;\r\n\r\n// const Web3EthAbi = require('web3-eth-abi');\r\n// console.log(Web3EthAbi.encodeParameters(['address', 'uint256'], [\"0x27e700b45719dbf69f4a7f762a5e6c31e5c7fcb0\",6] ))\r\n\r\nclass Assets extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            datalist: []\r\n        }\r\n    }\r\n    fetchInfo(mainPKr) {\r\n        if (!mainPKr && this.state.account) {\r\n            mainPKr = this.state.account.mainPKr;\r\n        }\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (pairs) {\r\n            self.setState({ pairs: pairs });\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        if (obj == null) {\r\n            abi.currentAccount(function (account) {\r\n                self.getBalances(account.mainPKr);\r\n                sessionStorage.setItem('account', JSON.stringify(account))\r\n                self.setState({ account: account });\r\n            });\r\n        } else {\r\n            self.getBalances(obj.mainPKr);\r\n            self.setState({ account: obj });\r\n        }\r\n    }\r\n\r\n    goPage = (uri) => {\r\n        window.location.href = uri;\r\n    }\r\n\r\n    getBalances(mainPKr) {\r\n        let self = this;\r\n        abi.getBalances(mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {\r\n                    token: \"\",\r\n                    value: 0,\r\n                    url: \"\",\r\n                    iRate: 0\r\n                }\r\n                obj.token = res[i].cy;\r\n                obj.value = new BigNumber(res[i].value).div(10 ** 18).toNumber().toFixed(3, 1);\r\n                obj.url = 'https://13.124.240.238/images/a' + res[i].cy + '_0.png';\r\n                arr.push(obj);\r\n            }\r\n\r\n            abi.getInterestsList(mainPKr, function (data) {\r\n                if (data != \"\") {\r\n                    for (let j = 0; j < data.length; j++) {\r\n                        for (let k = 0; k < arr.length; k++) {\r\n                            if (data[j].cy == arr[k].token) {\r\n                                arr[k].iRate = new BigNumber(data[j].iRate).div(10 ** 9).toFixed(3, 1)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                self.setState({\r\n                    datalist: arr\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    changAccount() {\r\n        let self = this;\r\n        abi.init\r\n            .then(() => {\r\n                abi.accountList(function (accounts) {\r\n                    let actions = [];\r\n                    accounts.forEach(function (account, index) {\r\n                        actions.push(\r\n                            {\r\n                                text: <span>{account.name + \":\" + showPK(account.pk)}</span>, onPress: () => {\r\n                                    self.getBalances(account.mainPKr);\r\n                                    self.setState({\r\n                                        account: account\r\n                                    })\r\n                                    sessionStorage.setItem('account', JSON.stringify(account));\r\n                                }\r\n                            }\r\n                        );\r\n                    });\r\n                    operation(actions);\r\n                });\r\n            })\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"1\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"AssetBank\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    <Flex className=\"changAccount tabcontent-box\" style={{ textAlign: 'center' }}>\r\n                        <Flex.Item\r\n                            className=\"changAccount-name\">{i18n.t(\"Currentaccount\")}：{this.state.account.name}</Flex.Item>\r\n                        <Flex.Item>\r\n                            <a onClick={() => {\r\n                                this.changAccount();\r\n                            }}>{i18n.t(\"Switchaccount\")}</a>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    <div className=\"content\">\r\n                        {\r\n                            self.state.datalist.map((item, index) => {\r\n                                return (\r\n                                    <div className=\"listItem\" key={index}>\r\n                                        <Flex>\r\n                                            <Flex.Item>\r\n                                                <Flex>\r\n                                                    <img className=\"assetsimg\" src={item.url} alt=\"\" />\r\n                                                    <span className=\"assetstitle\" >{item.token}</span>\r\n                                                </Flex>\r\n                                            </Flex.Item>\r\n                                            <Flex.Item className=\"assetsbox\">\r\n                                                <Flex.Item className=\"amounttitle\">\r\n                                                    {i18n.t(\"Balance\")}\r\n                                                </Flex.Item>\r\n                                                <Flex.Item className=\"amount\">{item.value}</Flex.Item>\r\n                                            </Flex.Item>\r\n                                        </Flex>\r\n                                        <WhiteSpace />\r\n                                        <Flex>\r\n                                            <Flex.Item>\r\n                                                <Button size=\"small\" onClick={() => {\r\n                                                    alert(`${i18n.t(\"Recharge\")}`, <div>\r\n                                                        <InputItem\r\n                                                            placeholder=\"amount\"\r\n                                                            ref={el => self.sendInputRef = el}\r\n                                                            onChange={(value) => {\r\n                                                            }}\r\n                                                        >{item.token}</InputItem>\r\n                                                    </div>, [\r\n                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                        {\r\n                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                let value = new BigNumber(self.sendInputRef.state.value).multipliedBy(1e18);\r\n                                                                abi.hbankRecharge(self.state.account.pk, self.state.account.mainPKr, value, item.token, function (hash, err) {\r\n                                                                    if (err) {\r\n                                                                        Toast.fail(err);\r\n                                                                    } else {\r\n                                                                        abi.startGetTxReceipt(hash, function () {\r\n                                                                            self.getBalances(self.state.account.mainPKr)\r\n                                                                        });\r\n                                                                    }\r\n                                                                });\r\n                                                            }\r\n                                                        },\r\n                                                    ])\r\n                                                }}>\r\n                                                    {i18n.t(\"Recharge\")}\r\n                                                </Button>\r\n                                            </Flex.Item>\r\n                                            <Flex.Item>\r\n                                                <Button size=\"small\" onClick={() => {\r\n                                                    alert(`${i18n.t(\"withdraw\")}`, <div>\r\n                                                        <InputItem\r\n                                                            placeholder=\"amount\"\r\n                                                            ref={el => self.sendInputRef = el}\r\n                                                            onChange={(value) => {\r\n                                                                console.log(value);\r\n                                                            }}\r\n                                                        >{item.token}</InputItem>\r\n                                                    </div>, [\r\n                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                        {\r\n                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                let value = new BigNumber(self.sendInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                abi.hbankWithDraw(self.state.account.pk, self.state.account.mainPKr, value, item.token, function (hash, err) {\r\n                                                                    if (err) {\r\n                                                                        Toast.fail(err);\r\n                                                                    } else {\r\n                                                                        abi.startGetTxReceipt(hash, function () {\r\n                                                                            self.getBalances(self.state.account.mainPKr)\r\n                                                                        });\r\n                                                                    }\r\n                                                                });\r\n                                                            }\r\n                                                        },\r\n                                                    ])\r\n                                                }}>\r\n                                                    {i18n.t(\"withdraw\")}\r\n                                                </Button>\r\n                                            </Flex.Item>\r\n                                            <Flex.Item>\r\n                                                <Link to={{ pathname: `/assetsdetail`, state: { cy: item.token, account: this.state.account, iRate: item.iRate } }} >\r\n                                                    <Button size=\"small\">\r\n                                                        {i18n.t(\"ViewDetails\")}\r\n                                                    </Button>\r\n                                                </Link>\r\n                                            </Flex.Item>\r\n                                        </Flex>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </div>\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assets;","H:\\hbank\\src\\api\\abi.js",["104","105","106"],"import seropp from 'sero-pp'\r\nimport serojs from \"serojs\";\r\nimport BigNumber from 'bignumber.js'\r\nimport { Toast } from \"antd-mobile\";\r\nimport i18n from '../i18n';\r\nimport {JsonRpc } from \"./jsonrpc\";\r\nimport keccak256 from \"keccak256\";\r\nconst rpc = new JsonRpc();\r\n\r\nconst config = {\r\n\tname: \"HBank\",\r\n\tcontractAddress: \"3miug1P9jwGjq85btFYZYkqNFJxQuUXnqkbYnR2ZcJjYMmrPXvzitTdfd4hDvdsAESBJ3AZBUMu8CbkaBSLNnvDn\",\r\n\thbankAddress: \"4bskgAUVgz2cuTh5YAvzaRBYmvw8DyGThKYWXQS537mVbdhAjh7SgRkykT9Eri33vh6xxWY7K7mdi7NKjhUEccFa\",\r\n\tgithub: \"https://github.com/dececash/hbank\",\r\n\tauthor: \"hbank\",\r\n\turl: document.location.href,\r\n\tlogo: document.location.protocol + '//' + document.location.host + '/logo.png',\r\n\tbarColor: \"#414691\",\r\n\tnavColor: \"#414691\",\r\n\tbarMode: \"dark\",\r\n\tnavMode: \"light\"\r\n};\r\n\r\nconst abiJson = [\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"exchange\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"keys\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"manager\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_start\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"_end\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"pairList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Swap.Pair[]\",\r\n\t\t\t\t\"name\": \"rets\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"pairs\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"feeRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setFeeRate\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_manager\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setManager\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setPair\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"withdraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"receive\"\r\n\t}\r\n]\r\n\r\nconst contract = serojs.callContract(abiJson, config.contractAddress);\r\n\r\nconst hbankjson = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_swap\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"anonymous\": false,\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"previousOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"indexed\": true,\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"OwnershipTransferred\",\r\n\t\t\"type\": \"event\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"keys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"flag\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"check\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address[]\",\r\n\t\t\t\t\"name\": \"list\",\r\n\t\t\t\t\"type\": \"address[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"flag\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"checkUsers\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_tokenA\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"_tokenB\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"exchange\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"financeAddr\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"tokenStr\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"params\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"financing\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"currencys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getBalances\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"cy\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"lasttime\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetAsset[]\",\r\n\t\t\t\t\"name\": \"item\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getCheckList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"key\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetCheck[]\",\r\n\t\t\t\t\"name\": \"retcheck\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32[]\",\r\n\t\t\t\t\"name\": \"currencys\",\r\n\t\t\t\t\"type\": \"bytes32[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getInterestsList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"cy\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetInterest[]\",\r\n\t\t\t\t\"name\": \"item\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"index\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"count\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getRecords\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"len\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"enum Hbank.OperateType\",\r\n\t\t\t\t\t\t\"name\": \"rType\",\r\n\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.Record[]\",\r\n\t\t\t\t\"name\": \"list\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256[]\",\r\n\t\t\t\t\"name\": \"statusList\",\r\n\t\t\t\t\"type\": \"uint256[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getRegisterList\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"components\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"internalType\": \"enum Hbank.KycState\",\r\n\t\t\t\t\t\t\t\t\"name\": \"state\",\r\n\t\t\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"internalType\": \"struct Hbank.UserInfo\",\r\n\t\t\t\t\t\t\"name\": \"info\",\r\n\t\t\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.RetuserInfo[]\",\r\n\t\t\t\t\"name\": \"retuserInfo\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"UserAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getUserInfo\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"enum Hbank.KycState\",\r\n\t\t\t\t\t\t\"name\": \"state\",\r\n\t\t\t\t\t\t\"type\": \"uint8\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct Hbank.UserInfo\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"token\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"hbankWithdraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"interests\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"time\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"manager\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"userAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"modifyInformation\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"owner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes\",\r\n\t\t\t\t\"name\": \"data\",\r\n\t\t\t\t\"type\": \"bytes\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"recharge\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"name\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"phone\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"email\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bytes32\",\r\n\t\t\t\t\"name\": \"code\",\r\n\t\t\t\t\"type\": \"bytes32\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"register\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"iRate\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setInterest\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"_manager\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"setManager\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"newOwner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"transferOwnership\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"currency\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"withDraw\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"receive\"\r\n\t}\r\n]\r\n\r\nconst hbank = serojs.callContract(hbankjson, config.hbankAddress);\r\n\r\nclass Abi {\r\n\r\n\tconstructor() {\r\n\t\tlet self = this;\r\n\t\tself.init = new Promise(\r\n\t\t\t(resolve, reject) => {\r\n\t\t\t\tseropp.init(config, function (rest) {\r\n\t\t\t\t\tif (rest === 'success') {\r\n\t\t\t\t\t\treturn resolve()\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn reject(rest)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tthis.getPopupInfo();\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\thash(data, callback) {\r\n\t\tcallback(keccak256(data).toString('hex'))\r\n\t}\r\n\r\n\tgetFullAddress(pkrs, callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getFullAddress\", [pkrs], function (rets) {\r\n\t\t\t\tcallback(rets);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tinitLanguage(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\tcallback(info.language);\r\n\t\t});\r\n\t}\r\n\r\n\tgetPopupInfo() {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\tlocalStorage.setItem(\"language\", info.language)\r\n\t\t\ti18n.changeLanguage(info.language).catch()\r\n\t\t});\r\n\t}\r\n\r\n\tgetTransactionReceipt(txHash, callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getTransactionReceipt\", [txHash], function (rest) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rest)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tstartGetTxReceipt(hash, callback) {\r\n\t\tconst self = this;\r\n\t\tToast.loading(\"Loading...\", 60)\r\n\t\tthis.getTransactionReceipt(hash, function (res) {\r\n\t\t\tif (res && res.result) {\r\n\t\t\t\tToast.hide();\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(res)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tself.startGetTxReceipt(hash, callback)\r\n\t\t\t\t}, 5000)\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcurrentAccount(callback) {\r\n\t\tseropp.getAccountList(function (datas) {\r\n\t\t\tfor (var i = 0; i < datas.length; i++) {\r\n\t\t\t\tif (datas[i].IsCurrent == undefined || datas[i].IsCurrent) {\r\n\t\t\t\t\tcallback({\r\n\t\t\t\t\t\tpk: datas[i].PK,\r\n\t\t\t\t\t\tmainPKr: datas[i].MainPKr,\r\n\t\t\t\t\t\tname: datas[i].Name,\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\taccountDetails(pk, callback) {\r\n\t\tif (!pk) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tseropp.getAccountDetail(pk, function (item) {\r\n\t\t\tcallback({ pk: item.PK, mainPKr: item.MainPKr, name: item.Name })\r\n\t\t});\r\n\t}\r\n\r\n\taccountList(callback) {\r\n\t\tseropp.getAccountList(function (data) {\r\n\r\n\t\t\tlet accounts = [];\r\n\t\t\tdata.forEach(function (item, index) {\r\n\t\t\t\taccounts.push({\r\n\t\t\t\t\tpk: item.PK,\r\n\t\t\t\t\tmainPKr: item.MainPKr,\r\n\t\t\t\t\tname: item.Name,\r\n\t\t\t\t\tIsCurrent: item.IsCurrent\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tcallback(accounts)\r\n\t\t});\r\n\t}\r\n\r\n\tisManager(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(contract, 'manager', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tbalanceOf(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getBalance\", [contract.address, \"latest\"], function (rets) {\r\n\t\t\t\tlet balances = [];\r\n\t\t\t\tif (rets.result.tkn) {\r\n\t\t\t\t\tlet map = new Map(Object.entries(rets.result.tkn));\r\n\t\t\t\t\tmap.forEach((val, key) => {\r\n\t\t\t\t\t\tbalances.push({ token: key, value: new BigNumber(val).dividedBy(1e18).toFixed(3) });\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(balances);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\thbankBalanceOf(callback) {\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_getBalance\", [hbank.address, \"latest\"], function (rets) {\r\n\t\t\t\tlet balances = [];\r\n\t\t\t\tif (rets.result.tkn) {\r\n\t\t\t\t\tlet map = new Map(Object.entries(rets.result.tkn));\r\n\t\t\t\t\tmap.forEach((val, key) => {\r\n\t\t\t\t\t\tbalances.push({ token: key, value: new BigNumber(val).dividedBy(1e18).toFixed(3) });\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(balances);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpair(mainPKr, tokenA, tokenB, callback) {\r\n\t\tthis.callMethod(contract, 'pair', mainPKr, [tokenA, tokenB], function (rets) {\r\n\t\t\tcallback(rets[0]);\r\n\t\t});\r\n\t}\r\n\r\n\tpairList(mainPKr, callback) {\r\n\t\tthis.callMethod(contract, 'pairList', mainPKr, [0, 100], function (rets) {\r\n\t\t\tcallback(rets[0]);\r\n\t\t});\r\n\t}\r\n\r\n\tsetFeeRate(pk, mainPKr, tokenA, tokenB, fee, callback) {\r\n\t\tthis.executeMethod(contract, 'setFeeRate', pk, mainPKr, [tokenA, tokenB, fee], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tsetPair(pk, mainPKr, tokenA, tokenB, price, callback) {\r\n\t\tthis.executeMethod(contract, 'setPair', pk, mainPKr, [tokenA, tokenB, price], \"DECE\", 0, callback);\r\n\t}\r\n\texchange(pk, mainPKr, tokenA, value, tokenB, callback) {\r\n\t\tthis.executeMethod(contract, 'exchange', pk, mainPKr, [tokenA], tokenB, value, callback);\r\n\r\n\t}\r\n\r\n\twithdraw(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(contract, 'withdraw', pk, mainPKr, [token, value], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tsend(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(contract, '', pk, mainPKr, [], token, value, callback);\r\n\t}\r\n\r\n\tWithdrawIsManager(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(hbank, 'hbankWithdraw', pk, mainPKr, [token, value], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\thbankSend(pk, mainPKr, token, value, callback) {\r\n\t\tthis.executeMethod(hbank, '', pk, mainPKr, [], token, value, callback);\r\n\t}\r\n\r\n\thbankexchange(pk, mainPKr, tokenA, value, tokenB, callback) {\r\n\t\tthis.executeMethod(hbank, 'exchange', pk, mainPKr, [tokenB, value, tokenA], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\thbankRecharge(pk, mainPKr, value, currency, callback) {\r\n\t\tlet data = \"\";\r\n\t\tthis.executeMethod(hbank, 'recharge', pk, mainPKr, [data], currency, value, callback);\r\n\t}\r\n\thbankWithDraw(pk, mainPKr, value, currency, callback) {\r\n\t\tthis.executeMethod(hbank, 'withDraw', pk, mainPKr, [currency, value], \"DECE\", 0, callback);\r\n\t}\r\n\thbankisManager(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'manager', mainPKr, [], function (ret) {\r\n\t\t\tself.getFullAddress([ret[0]], function (rets) {\r\n\t\t\t\tif (callback) {\r\n\t\t\t\t\tcallback(rets.result[ret[0]] == mainPKr);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tgetBalances(mainPKr, callback) {\r\n\t\tlet value = [\"DECE\", \"D_BTC\", \"POFID\", \"GAO\"];\r\n\t\tthis.callMethod(hbank, 'getBalances', mainPKr, [value], function (res) {\r\n\t\t\tcallback(res.item);\r\n\t\t})\r\n\t}\r\n\tgetRecords(mainPKr, cy, index, count, callback) {\r\n\t\tthis.callMethod(hbank, 'getRecords', mainPKr, [cy, index, count], function (res) {\r\n\t\t\tcallback(res);\r\n\t\t})\r\n\t}\r\n\tgetCheckList(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'getCheckList', mainPKr, [], function (res) {\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retcheck.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retcheck);\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tgetRegisterList(mainPKr, callback) {\r\n\t\tlet self = this;\r\n\t\tthis.callMethod(hbank, 'getRegisterList', mainPKr, [], function (res) {\r\n\t\t\tlet pkrs = [];\r\n\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\tpkrs.push(each.owner);\r\n\t\t\t})\r\n\t\t\tself.getFullAddress(pkrs, function (rets) {\r\n\t\t\t\tres.retuserInfo.forEach(each => {\r\n\t\t\t\t\teach.owner = rets.result[each.owner];\r\n\t\t\t\t})\r\n\t\t\t\tcallback(res.retuserInfo);\r\n\t\t\t})\r\n\r\n\t\t})\r\n\t}\r\n\tgetInterestsList(mainPKr, callback) {\r\n\t\tlet value = [\"DECE\", \"D_BTC\", \"POFID\", \"GAO\"];\r\n\t\tthis.callMethod(hbank, 'getInterestsList', mainPKr, [value], function (res) {\r\n\t\t\tcallback(res.item);\r\n\t\t})\r\n\t}\r\n\r\n\tsetInterest(pk, mainPKr, cy, iRate, callback) {\r\n\t\tthis.executeMethod(hbank, 'setInterest', pk, mainPKr, [cy, iRate], \"DECE\", 0, callback)\r\n\t}\r\n\r\n\tregister(pk, mainPKr, name, phone, email, code, callback) {\r\n\t\tthis.executeMethod(hbank, 'register', pk, mainPKr, [name, phone, email, code], \"DECE\", 0, callback)\r\n\t}\r\n\r\n\tgetUserInfo(mainPKr, callback) {\r\n\t\tthis.callMethod(hbank, 'getUserInfo', mainPKr, [mainPKr], function (res) {\r\n\t\t\tcallback(res);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\treviewUser(pk, mainPKr, keys, whether, callback) {\r\n\t\tthis.executeMethod(hbank, 'checkUsers', pk, mainPKr, [keys, whether], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\treview(pk, mainPKr, keys, whether, callback) {\r\n\t\tthis.executeMethod(hbank, 'check', pk, mainPKr, [keys, whether], \"DECE\", 0, callback);\r\n\t}\r\n\r\n\tcallMethod(contract, _method, from, _args, callback) {\r\n\t\tlet packData = contract.packData(_method, _args);\r\n\t\tlet callParams = {\r\n\t\t\tfrom: from,\r\n\t\t\tto: contract.address,\r\n\t\t\tdata: packData\r\n\t\t};\r\n\t\t// console.log(_method, \"callParams\", callParams)\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_call\", [callParams, \"latest\"], function (rets) {\r\n\t\t\t\tlet data = rets.result\r\n\t\t\t\t// console.log(_method, rets)\r\n\t\t\t\tif (data !== \"0x0\") {\r\n\t\t\t\t\tlet res = contract.unPackDataEx(_method, data);\r\n\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\tcallback(res);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcallback(\"0x0\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\texecuteMethod(contract, _method, pk, mainPKr, args, tokenName, value, callback) {\r\n\t\t// console.log(_method, args);\r\n\t\tlet packData = \"0x\";\r\n\t\tif (\"\" !== _method) {\r\n\t\t\tpackData = contract.packData(_method, args);\r\n\t\t}\r\n\t\tlet executeData = {\r\n\t\t\tfrom: pk,\r\n\t\t\tto: contract.address,\r\n\t\t\tvalue: \"0x\" + value.toString(16),\r\n\t\t\tdata: packData,\r\n\t\t\tgasPrice: \"0x\" + new BigNumber(\"1000000000\").toString(16),\r\n\t\t\tcy: tokenName\r\n\t\t};\r\n\t\tlet estimateParam = {\r\n\t\t\tfrom: mainPKr,\r\n\t\t\tto: contract.address,\r\n\t\t\tvalue: \"0x\" + value.toString(16),\r\n\t\t\tdata: packData,\r\n\t\t\tgasPrice: \"0x\" + new BigNumber(\"1000000000\").toString(16),\r\n\t\t\tcy: tokenName\r\n\t\t};\r\n\t\tseropp.getInfo(function (info) {\r\n\t\t\trpc.seroRpc(info.rpc, \"dece_estimateGas\", [estimateParam], function (ret) {\r\n\t\t\t\tif (ret.error) {\r\n\t\t\t\t\tToast.fail(\"Failed to execute smart contract\")\r\n\t\t\t\t} else {\r\n\t\t\t\t\texecuteData[\"gas\"] = ret.result;\r\n\t\t\t\t\tseropp.executeContract(executeData, function (res, error) {\r\n\t\t\t\t\t\tif (callback) {\r\n\t\t\t\t\t\t\tcallback(res, error)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\n\r\nconst abi = new Abi();\r\nexport default abi;\r\n","H:\\hbank\\src\\pages\\financial\\financial.js",[],"H:\\hbank\\src\\pages\\my\\my.js",[],"H:\\hbank\\src\\component\\nav.js",[],"H:\\hbank\\src\\App.js",[],["107","108"],"H:\\hbank\\src\\i18n.js",[],"H:\\hbank\\src\\api\\common.js",["109"],"import BigNumber from \"bignumber.js\";\r\n\r\nexport function bytes32ToToken(data) {\r\n    try{\r\n        let index = data.indexOf(\"00\", 2);\r\n        let bytes = Buffer.from(data.substring(2, index), \"hex\");\r\n\r\n        return String.fromCharCode.apply(String, bytes).trim();\r\n    }catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\nexport function tokenToBytes(token) {\r\n    try {\r\n        let bytes = Buffer.alloc(32);\r\n        bytes.fill(token, 0, token.length);\r\n        return \"0x\" + bytes.toString('hex');\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function showValue(val, decimals, decimalPlaces) {\r\n    if (!val) {\r\n        val = 0;\r\n    }\r\n    if (!decimals) {\r\n        decimals = 18;\r\n    }\r\n    if (!decimalPlaces) {\r\n        decimalPlaces = 3;\r\n    }\r\n    let num = new BigNumber(val).dividedBy(new BigNumber(10).pow(decimals));\r\n\r\n    return num.toFixed(decimalPlaces, 1);\r\n}\r\n\r\nexport function showPK(pk, len) {\r\n    if (!pk) {\r\n        return \"\";\r\n    }\r\n    if (!len) {\r\n        len = 8;\r\n    }\r\n    return pk.slice(0, len) + \"...\" + pk.slice(-len)\r\n}\r\n\r\nexport function trimNumber(numberStr, decimalPlaces) {\r\n    let vals = numberStr.split(\".\")\r\n    if (vals.length < 2) {\r\n        return numberStr;\r\n    } else {\r\n        let index = -1;\r\n        let decimal = vals[1];\r\n        for (let i = decimal.length - 1; i >= 0; i--) {\r\n            if (decimal.charAt(i) != '0') {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        decimal = decimal.substring(0, index + 1);\r\n        let numStr = vals[0];\r\n        if (decimal.length > decimalPlaces) {\r\n            decimal = decimal.substring(0, decimalPlaces);\r\n        }\r\n        if (decimal.length > 0) {\r\n            numStr += \".\" + decimal;\r\n        }\r\n        return numStr\r\n    }\r\n}\r\n",["110","111"],"H:\\hbank\\src\\pages\\register\\register.js",["112","113","114","115"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, InputItem, Button, WhiteSpace } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n'\r\nimport logo from '../../images/logo.png';\r\nimport './register.css';\r\nimport abi from '../../api/abi';\r\nimport axios from 'axios'\r\nimport { randomBytes } from \"crypto\";\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            hasError: false,\r\n            emailError: false,\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            userState: 0,\r\n            submitLoading: false,\r\n            file: '',\r\n            imgurl: '',\r\n            imgurlone: '',\r\n            idstr: \"\",\r\n            imgtype: \"\",\r\n        }\r\n        this.fileInputEl = React.createRef();\r\n        this.fileInputEls = React.createRef();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getUser(obj.mainPKr);\r\n        console.log(obj);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = \"\";\r\n            let imgtype = \"\";\r\n            if (res[0].state == '0') {\r\n                codestr = \"idcard\";\r\n                imgtype = \".png\"\r\n            } else {\r\n                codestr = res[0].code.substring(2, 42);\r\n                let j = self.hexCharCodeToStr(res[0].code).length - 1;\r\n                while (self.hexCharCodeToStr(res[0].code)[j] !== '.') {\r\n                    j--;\r\n                }\r\n                imgtype = self.hexCharCodeToStr(res[0].code).substring(j, self.hexCharCodeToStr(res[0].code).length);\r\n            }\r\n            self.setState({\r\n                name: res[0].name,\r\n                phone: res[0].phone,\r\n                email: res[0].email,\r\n                imgurl: 'https://13.124.240.238/images/' + codestr + '_0' + imgtype,\r\n                imgurlone: 'https://13.124.240.238/images/' + codestr + '_1' + imgtype,\r\n                userState: res[0].state\r\n            })\r\n        })\r\n    }\r\n    hexCharCodeToStr = (hexCharCodeStr) => {\r\n        var trimedStr = hexCharCodeStr.trim();\r\n        var rawStr =\r\n            trimedStr.substr(0, 2).toLowerCase() === \"0x\"\r\n                ?\r\n                trimedStr.substr(2)\r\n                :\r\n                trimedStr;\r\n        var len = rawStr.length;\r\n        if (len % 2 !== 0) {\r\n            return \"\";\r\n        }\r\n        var curCharCode;\r\n        var resultStr = [];\r\n        for (var i = 0; i < len; i = i + 2) {\r\n            curCharCode = parseInt(rawStr.substr(i, 2), 16);\r\n            resultStr.push(String.fromCharCode(curCharCode));\r\n        }\r\n        return resultStr.join(\"\");\r\n    }\r\n    handlePhoto = async (event, type) => {\r\n        let self = this;\r\n        const files = [...event.target.files];\r\n        let i = files[0].name.length - 1;\r\n\r\n        while (files[0].name[i] !== '.') {\r\n            i--;\r\n        }\r\n        let imgtype = files[0].name.substring(i, files[0].name.length);\r\n        let codestr = \"\";\r\n        var formData = new FormData();\r\n        formData.append(\"image\", files[0]);\r\n        abi.hash(self.state.account.pk, function (res) {\r\n            codestr = res.substring(0, 40);\r\n            self.setState({\r\n                imgtype,\r\n            })\r\n            let urls = 'https://13.124.240.238/upload/?nomark=0&accessToken=000&id=' + type + '&code=' + codestr;\r\n            axios({\r\n                method: 'post',\r\n                url: urls,\r\n                data: formData\r\n            }).then((res) => {\r\n                Toast.success(`${i18n.t(\"UploadSuccessfully\")}`, 2);\r\n                let str = 'https://13.124.240.238/images/' + codestr + '_' + type + imgtype + \"?v=\" + new Date().getTime();\r\n                if (type === 0) {\r\n                    self.setState({\r\n                        imgurl: str\r\n                    })\r\n                } else {\r\n                    self.setState({\r\n                        imgurlone: str\r\n                    })\r\n                }\r\n                self.forceUpdate();\r\n            }).catch((err) => {\r\n                Toast.fail(`${i18n.t(\"ReselectPicture\")}`, 2);\r\n                console.log(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    onErrorClick = () => {\r\n        if (this.state.hasError) {\r\n            Toast.info('Please enter 11 digits');\r\n        }\r\n    }\r\n    onEmailErrorClick = () => {\r\n        if (this.state.emailError) {\r\n            Toast.info('Please enter e-mail');\r\n        }\r\n    }\r\n    onChangesphone = (value) => {\r\n        // if (value.replace(/^(00)?82\\-?0[71](?:\\d{8,9})$/, '').length < 11) {\r\n        //     this.setState({\r\n        //         hasError: true,\r\n        //     });\r\n        // } else {\r\n        //     this.setState({\r\n        //         hasError: false,\r\n        //     });\r\n        // }\r\n        this.setState({\r\n            phone: value\r\n        });\r\n    }\r\n    onChangesname = (value) => {\r\n        this.setState({\r\n            name: value\r\n        });\r\n    }\r\n    changeState = () => {\r\n        this.setState({\r\n            userState: 0\r\n        })\r\n        this.forceUpdate();\r\n\r\n        console.log(this.state.userState)\r\n    }\r\n    onChangesemail = (value) => {\r\n        // if (value.replace(/^(00)?82\\-?0[71](?:\\d{8,9})$/, '').length < 11) {\r\n        //     this.setState({\r\n        //         emailError: true,\r\n        //     });\r\n        // } else {\r\n        //     this.setState({\r\n        //         emailError: false,\r\n        //     });\r\n        // }\r\n        this.setState({\r\n            email: value\r\n        });\r\n    }\r\n\r\n    submit = (imgtype) => {\r\n        let self = this;\r\n        if (self.state.name.length > 0 && self.state.phone.length > 0 && self.state.email.length > 0) {\r\n            abi.hash(self.state.account.pk, function (code1) {\r\n                let buf = randomBytes(12);\r\n                buf.write(imgtype, 12 - imgtype.length);\r\n                let code = \"0x\" + code1.substring(0, 40) + buf.toString('hex');\r\n                console.log(\"code1\", code);\r\n                abi.register(self.state.account.pk, self.state.account.pk, self.state.name, self.state.phone, self.state.email, code, function (hash, err) {\r\n                    if (err) {\r\n                        Toast.fail(err);\r\n                    } else {\r\n                        abi.startGetTxReceipt(hash, function (data) {\r\n                            self.getUser(self.state.account.mainPKr);\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"RegistrationMessage\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    {\r\n                        self.state.userState == '0' ? <div>\r\n                            <div className=\"content\">\r\n                                <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                    <InputItem\r\n                                        type=\"text\"\r\n                                        placeholder=\"input your name\"\r\n                                        onChange={this.onChangesname}\r\n                                        value={this.state.name}\r\n                                    >{i18n.t(\"Name\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"phone\"\r\n                                        placeholder=\"input your phone\"\r\n                                        // error={this.state.hasError}\r\n                                        // onErrorClick={this.onErrorClick}\r\n                                        onChange={this.onChangesphone}\r\n                                        value={this.state.phone}\r\n                                    >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"email\"\r\n                                        placeholder=\"input your e-mail\"\r\n                                        // error={this.state.emailError}\r\n                                        // onErrorClick={this.onEmailErrorClick}\r\n                                        onChange={this.onChangesemail}\r\n                                        value={this.state.email}\r\n                                    >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                    <WhiteSpace />\r\n\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"FrontofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEl}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 0)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEl.current.click() }} src={this.state.imgurl} />\r\n                                    </div>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"ReversesideofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEls}\r\n                                                accept=\"image/*\"\r\n                                                // accept=\".jpg,.jpeg,.jpg\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 1)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEls.current.click() }} src={this.state.imgurlone} />\r\n                                    </div>\r\n                                    <WhiteSpace size=\"sm\" />\r\n                                </List>\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                            <div className=\"content\">\r\n                                <Button size='small' type='primary' onClick={() => this.submit(self.state.imgtype)}>{i18n.t(\"submit\")}</Button>\r\n                            </div>\r\n                        </div> : <div>\r\n                                {\r\n                                    self.state.userState == '1' ? <div>\r\n                                        <div className=\"content\">\r\n                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                <InputItem\r\n                                                    type=\"text\"\r\n                                                    disabled\r\n                                                    value={this.state.name}\r\n                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"phone\"\r\n                                                    disabled\r\n                                                    value={this.state.phone}\r\n                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"email\"\r\n                                                    disabled\r\n                                                    value={this.state.email}\r\n                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurl} />\r\n                                                </div>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurlone} />\r\n                                                </div>\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                            </List>\r\n                                        </div>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <div className=\"content\">\r\n                                            <Button size='small'>{i18n.t(\"UnderReview\")}</Button>\r\n                                        </div>\r\n                                    </div> : <div>\r\n                                            {\r\n                                                self.state.userState == '2' ? <div>\r\n                                                    <div className=\"content\">\r\n                                                        <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                            <InputItem\r\n                                                                type=\"text\"\r\n                                                                disabled\r\n                                                                value={this.state.name}\r\n                                                            >{i18n.t(\"Name\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"phone\"\r\n                                                                disabled\r\n                                                                value={this.state.phone}\r\n                                                            >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"email\"\r\n                                                                disabled\r\n                                                                value={this.state.email}\r\n                                                            >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"FrontofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurl} />\r\n                                                            </div>\r\n                                                            <WhiteSpace />\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurlone} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                        </List>\r\n                                                    </div>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div> : <div>\r\n                                                        <div className=\"content\">\r\n                                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                                <InputItem\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.name}\r\n                                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"phone\"\r\n                                                                    value={this.state.phone}\r\n                                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"email\"\r\n                                                                    value={this.state.email}\r\n                                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurl} />\r\n                                                                </div>\r\n                                                                <WhiteSpace />\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurlone} />\r\n                                                                </div>\r\n                                                                <WhiteSpace size=\"sm\" />\r\n                                                            </List>\r\n                                                        </div>\r\n                                                        <WhiteSpace size=\"sm\" />\r\n                                                        <div className=\"content\">\r\n                                                            <Flex>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='warning'>{i18n.t(\"RegistrationInformation\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='primary' onClick={() => this.changeState()}>{i18n.t(\"edit\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            }\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                    }\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js",["116","117"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, InputItem, Modal, WhiteSpace, Toast, Card, Button } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n';\r\nimport BigNumber from 'bignumber.js'\r\nimport logo from '../../images/logo.png';\r\nimport './ratesetting.css';\r\nimport abi from '../../api/abi';\r\nconst alert = Modal.alert;\r\n\r\nclass Ratesetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            interestslist: [],\r\n            dataList: []\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getInterestsList(obj.mainPKr);\r\n        self.getBalanceOf();\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getBalanceOf() {\r\n        let self = this;\r\n        abi.getInterestsList(self.state.account.mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {\r\n                    token: \"\",\r\n                    value: 0,\r\n                    url: \"\",\r\n                    iRate: 0\r\n                }\r\n                obj.iRate =new BigNumber(res[i].iRate ).div(10**9).toFixed(3,1);\r\n                obj.token = res[i].cy;\r\n                obj.url = 'https://13.124.240.238/images/a' + res[i].cy + '_0.png';\r\n                arr.push(obj);\r\n            }\r\n            abi.hbankBalanceOf(function (data) {\r\n                if (data != \"\") {\r\n                    for (let j = 0; j < data.length; j++) {\r\n                        for (let k = 0; k < arr.length; k++) {\r\n                            if (data[j].token == arr[k].token) {\r\n                                arr[k].value = data[j].value\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                self.setState({\r\n                    dataList: arr\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    getInterestsList(mainPKr) {\r\n        let self = this;\r\n        abi.getInterestsList(mainPKr, function (res) {\r\n            self.setState({\r\n                interestslist: res\r\n            })\r\n        })\r\n    }\r\n\r\n    hbankSend(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.hbankSend(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    WithdrawIsManager(pk, mainPKr, value, cy) {\r\n        let self = this;\r\n        abi.WithdrawIsManager(pk, mainPKr, cy, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setInterest(pk, mainPKr, cy, value) {\r\n        let self = this;\r\n        abi.setInterest(pk, mainPKr, cy, new BigNumber(value).multipliedBy(10**9).toFixed(0)*1, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getBalanceOf();\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"Bankmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                {\r\n                                    self.state.dataList.map((item, key) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Card key={key}>\r\n                                                    <Card.Header\r\n                                                        title={item.token}\r\n                                                        thumb={item.url}\r\n                                                        extra={<div>\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"Balance\")}： */}\r\n                                                                {item.value}</span></div>\r\n                                                                <WhiteSpace />\r\n                                                            <div><span>\r\n                                                                {/* {i18n.t(\"AnnualInterestRate\")}： */}\r\n                                                                {item.iRate}% &nbsp;<a onClick={() => {\r\n                                                                    alert(\"\", <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder={item.iRate}\r\n                                                                                extra=\"%\"\r\n                                                                                ref={el => this.feeInputRef = el}>RATE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let rate = this.feeInputRef.state.value;\r\n                                                                                self.setInterest(self.state.account.pk, self.state.account.mainPKr, token, rate)\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"modify\")}</a></span></div>\r\n                                                        </div>}\r\n                                                    />\r\n                                                    <Card.Body>\r\n                                                        <Flex style={{ textAlign: 'center' }}>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                                self.hbankSend(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                                self.WithdrawIsManager(self.state.account.pk, self.state.account.mainPKr, value, token);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                        </Flex>\r\n                                                        <WhiteSpace />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <WhiteSpace />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ratesetting;","H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js",[],["118","119"],"H:\\hbank\\src\\pages\\userlist\\userlist.js",[],"H:\\hbank\\src\\pages\\bank\\bank.js",["120","121","122","123","124","125"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport Nav from '../../component/nav'\r\nimport i18n from '../../i18n'\r\nimport { WingBlank, WhiteSpace, Flex, Modal, InputItem, Toast, Card, Button } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport abi from '../../api/abi.js'\r\nimport logo from '../../images/logo.png'\r\nimport { bytes32ToToken } from \"../../api/common\";\r\nimport { call } from 'sero-pp';\r\nimport { callbackHandler } from 'sero-pp/lib/sero-pp';\r\n\r\n\r\nconst alert = Modal.alert;\r\nclass Bank extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            balances: [],\r\n            dataList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.setState({ account: obj });\r\n        self.getList(obj.mainPKr);\r\n    }\r\n\r\n    getList(mainPKr) {\r\n        let self = this;\r\n        abi.pairList(mainPKr, function (data) {\r\n            let arr = [];\r\n            if (data != []) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    arr.push(bytes32ToToken(data[i].tokenA));\r\n                    arr.push(bytes32ToToken(data[i].tokenB));\r\n                }\r\n            }\r\n            let arrimg = [];\r\n            if (Array.from(new Set(arr)) != []) {\r\n                for (let i = 0; i < Array.from(new Set(arr)).length; i++) {\r\n                    let obj = {\r\n                        token: \"\",\r\n                        value: '0.000',\r\n                        url: \"\"\r\n                    }\r\n                    obj.token = Array.from(new Set(arr))[i];\r\n                    obj.url = 'https://13.124.240.238/images/a' + Array.from(new Set(arr))[i] + '_0.png';\r\n                    arrimg.push(obj);\r\n                }\r\n            }\r\n            self.getBalanceOf(arrimg);\r\n\r\n        })\r\n    }\r\n    getBalanceOf(arr) {\r\n        let self = this;\r\n\r\n        abi.balanceOf(function (res) {\r\n            console.log(res)\r\n            if (res != []) {\r\n                for (let i = 0; i < res.length; i++) {\r\n                    for (let j = 0; j < arr.length; j++) {\r\n                        if (res[i].token == arr[j].token) {\r\n                            arr[j].value = res[i].value\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            self.setState({\r\n                dataList: arr\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    send(token, value) {\r\n        let self = this;\r\n        abi.send(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    withdraw(token, value) {\r\n        let self = this;\r\n        abi.withdraw(this.state.account.pk, this.state.account.mainPKr, token, value, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setPair(tokenA, tokenB, price) {\r\n        let self = this;\r\n\r\n        abi.setPair(this.state.account.pk, this.state.account.mainPKr, tokenA, tokenB, price, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    setFeeRate(tokenA, tokenB, fee) {\r\n        let self = this;\r\n        abi.setFeeRate(this.state.account.pk, this.state.account.mainPKr, tokenA, tokenB, fee, function (hash, err) {\r\n            if (err) {\r\n                Toast.fail(err);\r\n            } else {\r\n                abi.startGetTxReceipt(hash, function () {\r\n                    self.getList(self.state.account.mainPKr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <WingBlank>\r\n                <Nav selectedTab=\"4\">\r\n                    <div className=\"tabcontent\">\r\n                        <Flex className=\"header\">\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <img src={logo} alt=\"logo\" />\r\n                                <p className='title'>\r\n                                    {i18n.t(\"Exchangemanagement\")}\r\n                                </p>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                <Flex style={{ textAlign: 'center' }}>\r\n                                    <Flex.Item>\r\n                                        <Button size=\"small\" onClick={() => {\r\n                                            alert(\"\", <div>\r\n                                                <div>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenA\"\r\n                                                        ref={el => this.tokenAInputRef = el}>TOKENA:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenB\"\r\n                                                        ref={el => this.tokenBInputRef = el} onChange={() => {\r\n\r\n                                                        }}>TOKENB:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"price\"\r\n                                                        ref={el => this.priceInputRef = el}>Price:</InputItem>\r\n                                                </div>\r\n                                            </div>, [\r\n                                                { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                {\r\n                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                        let tokenA = this.tokenAInputRef.state.value.trim();\r\n                                                        let tokenB = this.tokenBInputRef.state.value.trim();\r\n                                                        let price = new BigNumber(this.priceInputRef.state.value).multipliedBy(1e9).toFixed(0);\r\n                                                        self.setPair(tokenA, tokenB, price);\r\n                                                    }\r\n                                                },\r\n                                            ])\r\n                                        }}>{i18n.t(\"SetPrice\")}</Button>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <Button size=\"small\" onClick={() => {\r\n                                            alert(\"\", <div>\r\n                                                <div>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenA\"\r\n                                                        ref={el => this.tokenAInputRef = el}>TOKENA:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"tokenB\"\r\n                                                        ref={el => this.tokenBInputRef = el} onChange={() => {\r\n\r\n                                                        }}>TOKENB:</InputItem>\r\n                                                    <InputItem\r\n                                                        placeholder=\"fee\"\r\n                                                        extra=\"%\"\r\n                                                        ref={el => this.feeInputRef = el}>Fee:</InputItem>\r\n                                                </div>\r\n                                            </div>, [\r\n                                                { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                {\r\n                                                    text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                        let tokenA = this.tokenAInputRef.state.value.trim();\r\n                                                        let tokenB = this.tokenBInputRef.state.value.trim();\r\n                                                        let fee = new BigNumber(this.feeInputRef.state.value).multipliedBy(100).toFixed(0);\r\n                                                        self.setFeeRate(tokenA, tokenB, fee)\r\n                                                    }\r\n                                                },\r\n                                            ])\r\n                                        }}>{i18n.t(\"SetRate\")}</Button>\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                        <WhiteSpace />\r\n                        <Flex>\r\n                            <Flex.Item className=\"tabcontent-box\">\r\n                                {\r\n                                    self.state.dataList.map((item, key) => {\r\n                                        return (\r\n                                            <div>\r\n                                                <Card key={key}>\r\n                                                    <Card.Header\r\n                                                        title={item.token}\r\n                                                        thumb={item.url}\r\n                                                        extra={<span>{item.value}</span>}\r\n                                                    />\r\n                                                    <Card.Body>\r\n                                                        <Flex style={{ textAlign: 'center' }}>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"Recharge\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18);\r\n                                                                                self.send(token, value);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"Recharge\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                            <Flex.Item>\r\n                                                                <Button size=\"small\" onClick={() => {\r\n                                                                    alert(<span>{i18n.t(\"withdraw\")}</span>, <div>\r\n                                                                        <div>\r\n                                                                            <InputItem\r\n                                                                                value={item.token}\r\n                                                                                disabled\r\n                                                                                ref={el => this.tokenInputRef = el}>TOKEN:</InputItem>\r\n                                                                            <InputItem\r\n                                                                                placeholder=\"value\"\r\n                                                                                ref={el => this.valueInputRef = el}>VALUE:</InputItem>\r\n                                                                        </div>\r\n                                                                    </div>, [\r\n                                                                        { text: `${i18n.t(\"cancel\")}`, onPress: () => console.log('cancel') },\r\n                                                                        {\r\n                                                                            text: `${i18n.t(\"confirm\")}`, onPress: () => {\r\n                                                                                let token = this.tokenInputRef.state.value.trim();\r\n                                                                                let value = new BigNumber(this.valueInputRef.state.value).multipliedBy(1e18).toFixed(0);\r\n                                                                                self.withdraw(token, value);\r\n                                                                            }\r\n                                                                        },\r\n                                                                    ])\r\n                                                                }}>{i18n.t(\"withdraw\")}</Button>\r\n                                                            </Flex.Item>\r\n                                                        </Flex>\r\n                                                        <WhiteSpace />\r\n\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                <WhiteSpace />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                        <WhiteSpace />\r\n                    </div>\r\n                </Nav>\r\n            </WingBlank>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bank;",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":88,"column":25,"nodeType":"132","messageId":"133","endLine":88,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":153,"column":51,"nodeType":"132","messageId":"133","endLine":153,"endColumn":53},{"ruleId":"130","severity":1,"message":"131","line":155,"column":59,"nodeType":"132","messageId":"133","endLine":155,"endColumn":61},{"ruleId":"130","severity":1,"message":"131","line":157,"column":68,"nodeType":"132","messageId":"133","endLine":157,"endColumn":70},{"ruleId":"130","severity":1,"message":"131","line":158,"column":72,"nodeType":"132","messageId":"133","endLine":158,"endColumn":74},{"ruleId":"130","severity":1,"message":"131","line":162,"column":63,"nodeType":"132","messageId":"133","endLine":162,"endColumn":65},{"ruleId":"130","severity":1,"message":"131","line":163,"column":67,"nodeType":"132","messageId":"133","endLine":163,"endColumn":69},{"ruleId":"130","severity":1,"message":"131","line":172,"column":51,"nodeType":"132","messageId":"133","endLine":172,"endColumn":53},{"ruleId":"130","severity":1,"message":"131","line":172,"column":69,"nodeType":"132","messageId":"133","endLine":172,"endColumn":71},{"ruleId":"130","severity":1,"message":"131","line":172,"column":87,"nodeType":"132","messageId":"133","endLine":172,"endColumn":89},{"ruleId":"130","severity":1,"message":"131","line":174,"column":60,"nodeType":"132","messageId":"133","endLine":174,"endColumn":62},{"ruleId":"134","severity":1,"message":"135","line":215,"column":86,"nodeType":"132","messageId":"136","endLine":215,"endColumn":87},{"ruleId":"126","replacedBy":"137"},{"ruleId":"128","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":6,"column":5,"nodeType":"141","messageId":"142","endLine":7,"endColumn":6},{"ruleId":"130","severity":1,"message":"131","line":183,"column":77,"nodeType":"132","messageId":"133","endLine":183,"endColumn":79},{"ruleId":"130","severity":1,"message":"143","line":75,"column":26,"nodeType":"132","messageId":"133","endLine":75,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":78,"column":44,"nodeType":"132","messageId":"133","endLine":78,"endColumn":46},{"ruleId":"130","severity":1,"message":"131","line":956,"column":28,"nodeType":"132","messageId":"133","endLine":956,"endColumn":30},{"ruleId":"130","severity":1,"message":"131","line":998,"column":35,"nodeType":"132","messageId":"133","endLine":998,"endColumn":37},{"ruleId":"130","severity":1,"message":"131","line":1094,"column":35,"nodeType":"132","messageId":"133","endLine":1094,"endColumn":37},{"ruleId":"126","replacedBy":"144"},{"ruleId":"128","replacedBy":"145"},{"ruleId":"130","severity":1,"message":"143","line":57,"column":35,"nodeType":"132","messageId":"133","endLine":57,"endColumn":37},{"ruleId":"126","replacedBy":"146"},{"ruleId":"128","replacedBy":"147"},{"ruleId":"130","severity":1,"message":"131","line":53,"column":30,"nodeType":"132","messageId":"133","endLine":53,"endColumn":32},{"ruleId":"130","severity":1,"message":"131","line":223,"column":46,"nodeType":"132","messageId":"133","endLine":223,"endColumn":48},{"ruleId":"130","severity":1,"message":"131","line":298,"column":58,"nodeType":"132","messageId":"133","endLine":298,"endColumn":60},{"ruleId":"130","severity":1,"message":"131","line":346,"column":70,"nodeType":"132","messageId":"133","endLine":346,"endColumn":72},{"ruleId":"130","severity":1,"message":"143","line":52,"column":26,"nodeType":"132","messageId":"133","endLine":52,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":55,"column":47,"nodeType":"132","messageId":"133","endLine":55,"endColumn":49},{"ruleId":"126","replacedBy":"148"},{"ruleId":"128","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":13,"column":10,"nodeType":"152","messageId":"153","endLine":13,"endColumn":14},{"ruleId":"150","severity":1,"message":"154","line":14,"column":10,"nodeType":"152","messageId":"153","endLine":14,"endColumn":25},{"ruleId":"130","severity":1,"message":"143","line":40,"column":22,"nodeType":"132","messageId":"133","endLine":40,"endColumn":24},{"ruleId":"130","severity":1,"message":"143","line":47,"column":42,"nodeType":"132","messageId":"133","endLine":47,"endColumn":44},{"ruleId":"130","severity":1,"message":"143","line":68,"column":21,"nodeType":"132","messageId":"133","endLine":68,"endColumn":23},{"ruleId":"130","severity":1,"message":"131","line":71,"column":42,"nodeType":"132","messageId":"133","endLine":71,"endColumn":44},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["155"],["156"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '!==' and instead saw '!='.",["155"],["156"],["155"],["156"],["155"],["156"],"no-unused-vars","'call' is defined but never used.","Identifier","unusedVar","'callbackHandler' is defined but never used.","no-global-assign","no-unsafe-negation"]