[{"H:\\hbank\\src\\index.js":"1","H:\\hbank\\src\\pages\\assets\\assetsdetail.js":"2","H:\\hbank\\src\\api\\jsonrpc.js":"3","H:\\hbank\\src\\pages\\home\\home.js":"4","H:\\hbank\\src\\pages\\assets\\assets.js":"5","H:\\hbank\\src\\api\\abi.js":"6","H:\\hbank\\src\\pages\\financial\\financial.js":"7","H:\\hbank\\src\\pages\\my\\my.js":"8","H:\\hbank\\src\\component\\nav.js":"9","H:\\hbank\\src\\App.js":"10","H:\\hbank\\src\\i18n.js":"11","H:\\hbank\\src\\api\\common.js":"12","H:\\hbank\\src\\pages\\register\\register.js":"13","H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js":"14","H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js":"15","H:\\hbank\\src\\pages\\userlist\\userlist.js":"16","H:\\hbank\\src\\pages\\bank\\bank.js":"17","H:\\hbank\\src\\pages\\worldshare\\worldshare.js":"18","H:\\hbank\\src\\pages\\worldshare\\worldshareapp.js":"19","H:\\hbank\\src\\pages\\rechange\\rechange.js":"20","H:\\hbank\\src\\pages\\worldshare\\investmentlist.js":"21","H:\\hbank\\src\\pages\\worldshare\\recommendlist.js":"22","H:\\hbank\\src\\images\\cyicon\\index.js":"23"},{"size":189,"mtime":1615259783881,"results":"24","hashOfConfig":"25"},{"size":10138,"mtime":1615259783883,"results":"26","hashOfConfig":"25"},{"size":1057,"mtime":1615259783872,"results":"27","hashOfConfig":"25"},{"size":9338,"mtime":1615270629275,"results":"28","hashOfConfig":"25"},{"size":13150,"mtime":1618821886782,"results":"29","hashOfConfig":"25"},{"size":56156,"mtime":1618822070906,"results":"30","hashOfConfig":"25"},{"size":38380,"mtime":1618808423111,"results":"31","hashOfConfig":"25"},{"size":7684,"mtime":1615259783887,"results":"32","hashOfConfig":"25"},{"size":5957,"mtime":1615259783873,"results":"33","hashOfConfig":"25"},{"size":2042,"mtime":1615259783870,"results":"34","hashOfConfig":"25"},{"size":897,"mtime":1615259783873,"results":"35","hashOfConfig":"25"},{"size":1793,"mtime":1615259783871,"results":"36","hashOfConfig":"25"},{"size":23741,"mtime":1615259783889,"results":"37","hashOfConfig":"25"},{"size":14527,"mtime":1618810720640,"results":"38","hashOfConfig":"25"},{"size":17242,"mtime":1615870174725,"results":"39","hashOfConfig":"25"},{"size":20758,"mtime":1616725615120,"results":"40","hashOfConfig":"25"},{"size":17104,"mtime":1618812023672,"results":"41","hashOfConfig":"25"},{"size":9947,"mtime":1615259783892,"results":"42","hashOfConfig":"25"},{"size":1261,"mtime":1615259783893,"results":"43","hashOfConfig":"25"},{"size":6320,"mtime":1618810519029,"results":"44","hashOfConfig":"25"},{"size":6982,"mtime":1615259783891,"results":"45","hashOfConfig":"25"},{"size":7409,"mtime":1615259783892,"results":"46","hashOfConfig":"25"},{"size":277,"mtime":1618808700420,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"hpi79g",{"filePath":"51","messages":"52","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"H:\\hbank\\src\\index.js",[],["113","114"],"H:\\hbank\\src\\pages\\assets\\assetsdetail.js",["115","116","117","118","119","120","121","122","123","124","125","126","127"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js'\r\nimport Nav from '../../component/nav'\r\nimport './assetsdetail.css'\r\nimport abi from '../../api/abi.js'\r\nimport i18n from '../../i18n'\r\n\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Assetsdetail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            cy: \"\",\r\n            account: {},\r\n            iRate: \"\",\r\n            datalist: [],\r\n            len: 40000000,\r\n            count: 10,\r\n            profitday: 0\r\n        }\r\n    }\r\n\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        self.setState({ isLoading: true });\r\n        self.getData(self.state.account.mainPKr, self.state.cy, self.state.len, self.state.count + 10, function (res, profitday) {\r\n            console.log(res)\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                count:self.state.count+10\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let cy = this.props.location.state.cy;\r\n        let account = this.props.location.state.account;\r\n        let iRate = this.props.location.state.iRate;\r\n        self.setState({\r\n            cy: cy,\r\n            account: account,\r\n            iRate: iRate\r\n        });\r\n        self.getData(account.mainPKr, cy, self.state.len, self.state.count, function (res, profitday, isLoading) {\r\n            self.setState({\r\n                profitday: profitday,\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: isLoading\r\n            });\r\n        });\r\n    }\r\n\r\n    getData(mainPKr, cy, len, count, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.getRecords(mainPKr, cy, len, count, function (res) {\r\n            console.log(res);\r\n            if (res.len == \"0\") {\r\n                callback([], 0, false)\r\n            } else {\r\n                for (let i = 0; i < res.list.length; i++) {\r\n                    if (i >= 1) {\r\n                        let obj = {\r\n                            type: 0,\r\n                            time: \"\",\r\n                            value: \"\",\r\n                            state: 0\r\n                        }\r\n                        obj.state = res.statusList[i];\r\n                        obj.type = res.list[i].rType;\r\n                        obj.time = self.formatTime(res.list[i].time * 1000, 'Y.M.D h:m');\r\n                        obj.value = new BigNumber(res.list[i].value).dividedBy(10 ** 18).toFixed(3, 1);\r\n                        arr.push(obj);\r\n                    }\r\n                }\r\n                callback(arr, new BigNumber(res.list[0].value).dividedBy(10 ** 18).toFixed(3, 1), false)\r\n            }\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {\r\n                                        item.type == 1 ? <span>{i18n.t(\"Recharge\")}</span> : <span>\r\n                                            {\r\n                                                item.type == 2 ? <span>\r\n                                                    {\r\n                                                        item.state == 1 ? <span>{i18n.t(\"Withdrawalreview\")}</span> : <span> {\r\n                                                            item.state == 2 ? <span>{i18n.t(\"Withdrawalreviewfailed\")}</span> : <span>{i18n.t(\"withdraw\")}</span>\r\n                                                        }</span>\r\n                                                    }\r\n                                                </span> : <span>{\r\n                                                    item.type == 3 ? <span>{i18n.t(\"profit\")}</span> : <span>{\r\n                                                        item.type == 4 ? <span>{i18n.t(\"Sell\")}</span> : <span>{\r\n                                                            item.type == 5 ? <span>{i18n.t(\"purchase\")}</span> : <span>{i18n.t(\"Financial\")}</span>\r\n                                                        }</span>\r\n                                                    }</span>\r\n                                                }</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center detailnum\">\r\n                                    {\r\n                                        item.type == 1 || item.type == 3 || item.type == 5 ? <span>+</span> : <span>\r\n                                            {\r\n                                                item.state == 3 ? <span></span> : <span>-</span>\r\n                                            }\r\n                                        </span>\r\n                                    }\r\n                                    {item.value}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">{item.time}</Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"1\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Balancedetails\")}</Flex.Item>\r\n                    </Flex>\r\n                    <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"AnnualInterestRate\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.iRate}%\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center\">\r\n                            <span>{i18n.t(\"Undrawnincome\")}</span>\r\n                        </Flex.Item>\r\n                        <Flex.Item className=\"center detailnum\">\r\n                            {this.state.profitday}\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <div className=\"detailcontent\">\r\n                        <div className=\"detailcontent-box\">\r\n                            <ListView\r\n                                ref={el => this.lv = el}\r\n                                dataSource={this.state.dataSource}\r\n                                renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                    {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                                </div>)}\r\n                                renderBodyComponent={() => <MyBody />}\r\n                                renderRow={row}\r\n                                renderSeparator={separator}\r\n                                style={{\r\n                                    height: this.state.height,\r\n                                    overflow: 'auto',\r\n                                }}\r\n                                onScroll={() => { console.log('scroll'); }}\r\n                                scrollRenderAheadDistance={400}\r\n                                onEndReached={this.onEndReached}\r\n                                onEndReachedThreshold={10}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Assetsdetail;","H:\\hbank\\src\\api\\jsonrpc.js",["128"],"import axios from 'axios'\r\n\r\n\r\nclass JsonRpc {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    seroRpc(rpc, _method, _params, callback) {\r\n        let data = {\r\n            id: 0,\r\n            jsonrpc: \"2.0\",\r\n            method: _method,\r\n            params: _params,\r\n        };\r\n        axios.post(rpc, data).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(\"req error: \", error);\r\n        })\r\n    }\r\n\r\n    post(url, data, timeout, callback) {\r\n        axios.post(url, data, {timeout: timeout}).then(function (response) {\r\n            let data = response.data\r\n            if (callback) {\r\n                callback(data);\r\n            }\r\n        }).catch(function (error) {\r\n            callback(null, error);\r\n        })\r\n    }\r\n\r\n    get(url, cb) {\r\n        axios.get(url).then(function (rest) {\r\n            if (cb) {\r\n                cb(rest.data)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport {JsonRpc}\r\n","H:\\hbank\\src\\pages\\home\\home.js",[],["129","130"],"H:\\hbank\\src\\pages\\assets\\assets.js",["131","132","133","134","135","136","137","138","139"],"H:\\hbank\\src\\api\\abi.js",["140","141","142","143","144"],"H:\\hbank\\src\\pages\\financial\\financial.js",[],["145","146"],"H:\\hbank\\src\\pages\\my\\my.js",[],["147","148"],"H:\\hbank\\src\\component\\nav.js",[],["149","150"],"H:\\hbank\\src\\App.js",[],"H:\\hbank\\src\\i18n.js",[],"H:\\hbank\\src\\api\\common.js",["151"],"import BigNumber from \"bignumber.js\";\r\n\r\nexport function bytes32ToToken(data) {\r\n    try{\r\n        let index = data.indexOf(\"00\", 2);\r\n        let bytes = Buffer.from(data.substring(2, index), \"hex\");\r\n\r\n        return String.fromCharCode.apply(String, bytes).trim();\r\n    }catch (e) {\r\n        return null\r\n    }\r\n}\r\n\r\nexport function tokenToBytes(token) {\r\n    try {\r\n        let bytes = Buffer.alloc(32);\r\n        bytes.fill(token, 0, token.length);\r\n        return \"0x\" + bytes.toString('hex');\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function showValue(val, decimals, decimalPlaces) {\r\n    if (!val) {\r\n        val = 0;\r\n    }\r\n    if (!decimals) {\r\n        decimals = 18;\r\n    }\r\n    if (!decimalPlaces) {\r\n        decimalPlaces = 3;\r\n    }\r\n    let num = new BigNumber(val).dividedBy(new BigNumber(10).pow(decimals));\r\n\r\n    return num.toFixed(decimalPlaces, 1);\r\n}\r\n\r\nexport function showPK(pk, len) {\r\n    if (!pk) {\r\n        return \"\";\r\n    }\r\n    if (!len) {\r\n        len = 8;\r\n    }\r\n    return pk.slice(0, len) + \"...\" + pk.slice(-len)\r\n}\r\n\r\nexport function trimNumber(numberStr, decimalPlaces) {\r\n    let vals = numberStr.split(\".\")\r\n    if (vals.length < 2) {\r\n        return numberStr;\r\n    } else {\r\n        let index = -1;\r\n        let decimal = vals[1];\r\n        for (let i = decimal.length - 1; i >= 0; i--) {\r\n            if (decimal.charAt(i) != '0') {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        decimal = decimal.substring(0, index + 1);\r\n        let numStr = vals[0];\r\n        if (decimal.length > decimalPlaces) {\r\n            decimal = decimal.substring(0, decimalPlaces);\r\n        }\r\n        if (decimal.length > 0) {\r\n            numStr += \".\" + decimal;\r\n        }\r\n        return numStr\r\n    }\r\n}\r\n",["152","153"],"H:\\hbank\\src\\pages\\register\\register.js",["154","155","156","157"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\n// import { randomBytes } from \"crypto\";\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, InputItem, Button, WhiteSpace } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n'\r\nimport logo from '../../images/logo.png';\r\nimport idcard_0 from '../../images/idcard_0.png';\r\nimport idcard_1 from '../../images/idcard_1.png';\r\nimport './register.css';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nimport abi from '../../api/abi';\r\nimport axios from 'axios'\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            hasError: false,\r\n            emailError: false,\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            userState: 0,\r\n            submitLoading: false,\r\n            file: '',\r\n            imgurl: '',\r\n            imgurlone: '',\r\n            idstr: \"\",\r\n            imgtype: \"\",\r\n        }\r\n        this.fileInputEl = React.createRef();\r\n        this.fileInputEls = React.createRef();\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getUser(obj.mainPKr);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = \"\";\r\n            if (res[0].state == '0') {//eslint-disable-line\r\n                self.setState({\r\n                    name: res[0].name,\r\n                    phone: res[0].phone,\r\n                    email: res[0].email,\r\n                    imgurl: idcard_0,\r\n                    imgurlone: idcard_1,\r\n                    userState: res[0].state\r\n                })\r\n            } else {\r\n                codestr = res[0].code.substring(2, res[0].code.length);\r\n                self.setState({\r\n                    name: res[0].name,\r\n                    phone: res[0].phone,\r\n                    email: res[0].email,\r\n                    imgurl: 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png',\r\n                    imgurlone: 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png',\r\n                    userState: res[0].state\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handlePhoto = async (event, type) => {\r\n        let self = this;\r\n        const files = [...event.target.files];\r\n        console.log(files[0])\r\n        self.compressImage(files[0], function (img) {\r\n            var formData = new FormData();\r\n            formData.append(\"image\", img);\r\n            abi.hash(self.state.account.pk, function (code) {\r\n                let urls = 'https://ginkgobank.dece.cash/upload/?nomark=0&accessToken=000&id=' + type + '&code=' + code;\r\n                axios({\r\n                    method: 'post',\r\n                    url: urls,\r\n                    data: formData\r\n                }).then((res) => {\r\n                    Toast.success(`${i18n.t(\"UploadSuccessfully\")}`, 2);\r\n                    let str = 'https://ginkgobank.dece.cash/images/' + code + '_' + type + '.png' + \"?v=\" + new Date().getTime();\r\n                    if (type === 0) {\r\n                        self.setState({\r\n                            imgurl: str\r\n                        })\r\n                    } else {\r\n                        self.setState({\r\n                            imgurlone: str\r\n                        })\r\n                    }\r\n                    self.forceUpdate();\r\n                }).catch((err) => {\r\n                    Toast.fail(`${i18n.t(\"ReselectPicture\")}`, 2);\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n    compressImage = (file, callback) => {\r\n        let maxsize = Math.pow(1024, 2);\r\n        let quality = 0;\r\n        if (file.size < maxsize) {\r\n            quality = 1;\r\n        } else {\r\n            quality = new BigNumber(maxsize).div(file.size).toFixed(1);\r\n        }\r\n        console.log(quality)\r\n        var name = file.name;\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = function (e) {\r\n            var src = e.target.result;\r\n            var img = new Image();\r\n            img.src = src;\r\n            img.onload = function (e) {\r\n                var w = img.width;\r\n                var h = img.height;\r\n                var canvas = document.createElement('canvas');\r\n                var ctx = canvas.getContext('2d');\r\n                var anw = document.createAttribute(\"width\");\r\n                anw.nodeValue = w;\r\n                var anh = document.createAttribute(\"height\");\r\n                anh.nodeValue = h;\r\n                canvas.setAttributeNode(anw);\r\n                canvas.setAttributeNode(anh);\r\n                ctx.fillStyle = \"#fff\";\r\n                ctx.fillRect(0, 0, w, h);\r\n                ctx.drawImage(img, 0, 0, w, h);\r\n                var base64 = canvas.toDataURL('image/webp', quality);\r\n                var bytes = window.atob(base64.split(',')[1]);\r\n                var ab = new ArrayBuffer(bytes.length);\r\n                var ia = new Uint8Array(ab);\r\n                for (var i = 0; i < bytes.length; i++) {\r\n                    ia[i] = bytes.charCodeAt(i);\r\n                }\r\n                file = new Blob([ab], { type: 'image/png' });\r\n                file.name = name;\r\n                callback(file);\r\n            };\r\n\r\n            img.onerror = function (e) {\r\n                console.error(e)\r\n            };\r\n        };\r\n        reader.onerror = function (e) {\r\n            console.error(e)\r\n        };\r\n    };\r\n\r\n    onErrorClick = () => {\r\n        if (this.state.hasError) {\r\n            Toast.info('Please enter 11 digits');\r\n        }\r\n    }\r\n\r\n    onEmailErrorClick = () => {\r\n        if (this.state.emailError) {\r\n            Toast.info('Please enter e-mail');\r\n        }\r\n    }\r\n    onChangesphone = (value) => {\r\n        this.setState({\r\n            phone: value\r\n        });\r\n    }\r\n    onChangesname = (value) => {\r\n        this.setState({\r\n            name: value\r\n        });\r\n    }\r\n    changeState = () => {\r\n        this.setState({\r\n            userState: 0\r\n        })\r\n        this.forceUpdate();\r\n\r\n        console.log(this.state.userState)\r\n    }\r\n    onChangesemail = (value) => {\r\n        this.setState({\r\n            email: value\r\n        });\r\n    }\r\n\r\n    submit = () => {\r\n        let self = this;\r\n        if (self.state.name.length > 0 && self.state.phone.length > 0 && self.state.email.length > 0) {\r\n            abi.hash(self.state.account.pk, function (code) {\r\n\r\n                abi.register(self.state.account.pk, self.state.account.pk, self.state.name, self.state.phone, self.state.email, \"0x\" + code, function (hash, err) {\r\n                    if (err) {\r\n                        Toast.fail(err);\r\n                    } else {\r\n                        abi.startGetTxReceipt(hash, function (data) {\r\n                            self.getUser(self.state.account.mainPKr);\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        };\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"RegistrationMessage\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace />\r\n                    {\r\n                        self.state.userState == '0' ? <div>\r\n                            <div className=\"content\">\r\n                                <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                    <InputItem\r\n                                        type=\"text\"\r\n                                        placeholder=\"input your name\"\r\n                                        onChange={this.onChangesname}\r\n                                        value={this.state.name}\r\n                                    >{i18n.t(\"Name\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"phone\"\r\n                                        placeholder=\"input your phone\"\r\n                                        onChange={this.onChangesphone}\r\n                                        value={this.state.phone}\r\n                                    >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                    <InputItem\r\n                                        type=\"email\"\r\n                                        placeholder=\"input your e-mail\"\r\n\r\n                                        onChange={this.onChangesemail}\r\n                                        value={this.state.email}\r\n                                    >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"FrontofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEl}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 0)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEl.current.click() }} src={this.state.imgurl} />\r\n                                    </div>\r\n                                    <WhiteSpace />\r\n                                    <Flex className=\"IDcard\" >\r\n                                        <Flex.Item className=\"center\">\r\n                                            {i18n.t(\"ReversesideofIDcard\")}\r\n                                        </Flex.Item>\r\n                                        <Flex.Item className=\"center\">\r\n                                            <input\r\n                                                type=\"file\"\r\n                                                ref={this.fileInputEls}\r\n                                                accept=\"image/*\"\r\n                                                hidden\r\n                                                onChange={(event) => this.handlePhoto(event, 1)}\r\n                                            />\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                    <WhiteSpace />\r\n                                    <div className=\"IDcard IDimg\">\r\n                                        <img onClick={() => { this.fileInputEls.current.click() }} src={this.state.imgurlone} />\r\n                                    </div>\r\n                                    <WhiteSpace size=\"sm\" />\r\n                                </List>\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                            <div className=\"content\">\r\n                                <Button size='small' type='primary' onClick={() => this.submit()}>{i18n.t(\"submit\")}</Button>\r\n                            </div>\r\n                        </div> : <div>\r\n                                {\r\n                                    self.state.userState == '1' ? <div>\r\n                                        <div className=\"content\">\r\n                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                <InputItem\r\n                                                    type=\"text\"\r\n                                                    disabled\r\n                                                    value={this.state.name}\r\n                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"phone\"\r\n                                                    disabled\r\n                                                    value={this.state.phone}\r\n                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                <InputItem\r\n                                                    type=\"email\"\r\n                                                    disabled\r\n                                                    value={this.state.email}\r\n                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurl} />\r\n                                                </div>\r\n                                                <WhiteSpace />\r\n                                                <Flex className=\"IDcard\" >\r\n                                                    <Flex.Item className=\"center\">\r\n                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                                <WhiteSpace />\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={this.state.imgurlone} />\r\n                                                </div>\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                            </List>\r\n                                        </div>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <div className=\"content\">\r\n                                            <Button size='small'>{i18n.t(\"UnderReview\")}</Button>\r\n                                        </div>\r\n                                    </div> : <div>\r\n                                            {\r\n                                                self.state.userState == '2' ? <div>\r\n                                                    <div className=\"content\">\r\n                                                        <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                            <InputItem\r\n                                                                type=\"text\"\r\n                                                                disabled\r\n                                                                value={this.state.name}\r\n                                                            >{i18n.t(\"Name\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"phone\"\r\n                                                                disabled\r\n                                                                value={this.state.phone}\r\n                                                            >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                            <InputItem\r\n                                                                type=\"email\"\r\n                                                                disabled\r\n                                                                value={this.state.email}\r\n                                                            >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"FrontofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurl} />\r\n                                                            </div>\r\n                                                            <WhiteSpace />\r\n                                                            <Flex className=\"IDcard\" >\r\n                                                                <Flex.Item className=\"center\">\r\n                                                                    {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={this.state.imgurlone} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                        </List>\r\n                                                    </div>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div> : <div>\r\n                                                        <div className=\"content\">\r\n                                                            <List renderHeader={() => `${i18n.t(\"RegistrationMessage\")}`}>\r\n                                                                <InputItem\r\n                                                                    type=\"text\"\r\n                                                                    value={this.state.name}\r\n                                                                >{i18n.t(\"Name\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"phone\"\r\n                                                                    value={this.state.phone}\r\n                                                                >{i18n.t(\"PhoneNumber\")}:</InputItem>\r\n                                                                <InputItem\r\n                                                                    type=\"email\"\r\n                                                                    value={this.state.email}\r\n                                                                >{i18n.t(\"E-mail\")}:</InputItem>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"FrontofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurl} />\r\n                                                                </div>\r\n                                                                <WhiteSpace />\r\n                                                                <Flex className=\"IDcard\" >\r\n                                                                    <Flex.Item className=\"center\">\r\n                                                                        {i18n.t(\"ReversesideofIDcard\")}\r\n                                                                    </Flex.Item>\r\n                                                                </Flex>\r\n                                                                <WhiteSpace />\r\n                                                                <div className=\"IDcard IDimg\">\r\n                                                                    <img src={this.state.imgurlone} />\r\n                                                                </div>\r\n                                                                <WhiteSpace size=\"sm\" />\r\n                                                            </List>\r\n                                                        </div>\r\n                                                        <WhiteSpace size=\"sm\" />\r\n                                                        <div className=\"content\">\r\n                                                            <Flex>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='warning'>{i18n.t(\"RegistrationInformation\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                                <Flex.Item>\r\n                                                                    <Button size='small' type='primary' onClick={() => this.changeState()}>{i18n.t(\"edit\")}</Button>\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            }\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                    }\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                    <WhiteSpace />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","H:\\hbank\\src\\pages\\ratesetting\\ratesetting.js",["158","159","160","161","162","163","164","165","166"],"H:\\hbank\\src\\pages\\withdrawlist\\withdrawlist.js",["167"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, List, Toast, Checkbox, Button, WhiteSpace, TextareaItem, Modal, Pagination, Tabs } from 'antd-mobile';\r\nimport BigNumber from 'bignumber.js';\r\nimport i18n from '../../i18n'\r\nimport Nav from '../../component/nav';\r\nimport logo from '../../images/logo.png';\r\nimport './withdrawlist.css';\r\nimport abi from '../../api/abi';\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\nconst tabs2 = [\r\n    { title: `${i18n.t(\"Auditlist\")}`, sub: '1' },\r\n    { title: `${i18n.t(\"WithdrawalList\")}`, sub: '2' },\r\n];\r\nclass Withdrawlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            datalist: [],\r\n            Withdrawlist: [],\r\n            WithdrawlistState: true,\r\n            pageIndex: 0,\r\n            pageCount: 10,\r\n            len: 0,\r\n            showmodal: false,\r\n            username: \"\",\r\n            useremail: \"\",\r\n            userphone: \"\",\r\n            userimgurl: \"\",\r\n            userimgurlone: \"\",\r\n            userstate: \"\",\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getData(obj.mainPKr);\r\n        self.getWithdrawList(obj.mainPKr, 0, self.state.pageCount)\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getreview(whether) {\r\n        let self = this;\r\n        let keys = [];\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].checked) {\r\n                keys.push(arr[i].key)\r\n            }\r\n        }\r\n        if (keys.length > 0) {\r\n            abi.review(self.state.account.pk, self.state.account.mainPKr, keys, whether, function (hash, err) {\r\n                if (err) {\r\n                    Toast.fail(err);\r\n                } else {\r\n                    abi.startGetTxReceipt(hash, function () {\r\n                        self.getData(self.state.account.mainPKr);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    getData(mainPKr) {\r\n        let self = this;\r\n        abi.getCheckList(mainPKr, function (res) {\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                obj.checked = false;\r\n                arr.push(obj);\r\n            }\r\n            self.setState({\r\n                datalist: arr\r\n            })\r\n        })\r\n    }\r\n\r\n    getWithdrawList(mainPKr, pageIndex, pageCount) {\r\n        let self = this;\r\n        abi.getWithdrawList(mainPKr, pageIndex, pageCount, function (res, len) {\r\n            if (len == 0) {//eslint-disable-line\r\n                self.setState({\r\n                    WithdrawlistState: false\r\n                })\r\n            }\r\n            let pageNum = Math.ceil(len / self.state.pageCount) - 1;\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.currency = res[i].currency;\r\n                obj.owner = res[i].owner;\r\n                obj.time = self.formatTime(res[i].time * 1000, 'Y.M.D h:m');\r\n                obj.status = res[i].status;\r\n                obj.value = new BigNumber(res[i].value).dividedBy(10 ** 18).toString();\r\n                obj.key = res[i].key;\r\n                if (obj.status == \"0\") {//eslint-disable-line\r\n                    arr.push(obj);\r\n                }\r\n            }\r\n\r\n            self.setState({\r\n                Withdrawlist: arr,\r\n                len: pageNum,\r\n                pageIndex: pageIndex,\r\n            })\r\n            Toast.hide()\r\n        })\r\n    }\r\n\r\n    onChange = (val) => {\r\n        let self = this;\r\n        let arr = self.state.datalist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].i === val) {\r\n                arr[i].checked = !arr[i].checked;\r\n            }\r\n        }\r\n        this.setState({\r\n            datalist: arr\r\n        })\r\n    }\r\n    getUser(mainPKr) {\r\n        let self = this;\r\n        Toast.loading(\"Loading...\", 5)\r\n        abi.getUserInfo(mainPKr, function (res) {\r\n            let codestr = res[0].code.substring(2, res[0].code.length);\r\n            console.log(res, \">>>>>>\")\r\n            self.setState({\r\n                username: res[0].name,\r\n                useremail: res[0].email,\r\n                userphone: res[0].phone,\r\n                userimgurl: 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png',\r\n                userimgurlone: 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png',\r\n                userstate: \"\",\r\n                showmodal: true\r\n            })\r\n        })\r\n    }\r\n    goToPage = (index) => {\r\n        let self = this;\r\n        let pageIndex = self.state.pageIndex + index;\r\n        if (pageIndex >= 0 && pageIndex <= self.state.len) {\r\n            Toast.loading(\"Loading...\", 60)\r\n            self.getWithdrawList(self.state.account.mainPKr, pageIndex, self.state.pageCount);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"WithdrawalReview\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <div>\r\n                            <div className=\"mytabboxs\">\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <Tabs tabs={tabs2}\r\n                                    initialPage={0}\r\n                                    animated={false}\r\n                                    useOnPan={false}\r\n                                    renderTab={tab => <span>{tab.title}</span>\r\n                                    }\r\n                                    onTabClick={console.log(\"111\")}\r\n                                >\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        <List className=\"mytabbox-item  listaddress\">\r\n                                            {self.state.datalist.map(item => (\r\n                                                <CheckboxItem checked={item.checked} key={item.i} onChange={() => this.onChange(item.i)}>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：{item.time}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>\r\n                                                            {i18n.t(\"WalletAddress\")}：\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>\r\n                                                            <TextareaItem\r\n                                                                value={item.owner}\r\n                                                                data-seed=\"logId\"\r\n                                                                editable={true}\r\n                                                                disabled={true}\r\n                                                                autoHeight\r\n                                                            />\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                </CheckboxItem>\r\n                                            ))}\r\n                                        </List>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        {\r\n                                            self.state.datalist.length > 0 ? <div>\r\n                                                <Flex>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' type='primary' onClick={() => this.getreview(true)}>{i18n.t(\"Pass\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' onClick={() => this.getreview(false)}>{i18n.t(\"Fail\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                            </div> : <div className=\"center\">{i18n.t(\"NoAuditRecord\")}</div>\r\n                                        }\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n\r\n\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        {self.state.Withdrawlist.map(item => (\r\n                                            <List className=\"mytabbox-item\">\r\n\r\n                                                <div key={item.i} >\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"CoinName\")}：{item.currency}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"Amount\")}：{item.value}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"time\")}：<span style={{ wordWrap: \"break-word\" }}>{item.time}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"status\")}：<span>{item.status == '0' ? <span>{i18n.t(\"passed\")}</span> : <span>{i18n.t(\"notpass\")}</span>}</span></Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n\r\n                                                    <Flex className=\"textover\">\r\n                                                        <Flex.Item onClick={() => self.getUser(item.owner)}>{i18n.t(\"WalletAddress\")}：{item.owner}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </div>\r\n                                            </List>\r\n                                        ))}\r\n\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <Flex>\r\n                                            <Pagination\r\n                                                total={self.state.len + 1}\r\n                                                className=\"custom-pagination-with-icon\"\r\n                                                current={self.state.pageIndex + 1}\r\n                                                locale={{\r\n                                                    prevText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(-1)}>{i18n.t(\"Prev\")}</Button>),\r\n                                                    nextText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(1)}>{i18n.t(\"Next\")}</Button>),\r\n                                                }}\r\n                                            />\r\n                                        </Flex>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n\r\n                <Modal\r\n                    visible={this.state.showmodal}\r\n                    transparent\r\n                    maskClosable={false}\r\n                    title={i18n.t(\"UserInfo\")}\r\n                    footer={[{\r\n                        text: `${i18n.t(\"close\")}`, onPress: () => {\r\n                            self.setState({\r\n                                showmodal: false\r\n                            })\r\n                        }\r\n                    }]}\r\n                >\r\n                    <div>\r\n                        <List className=\"mytabbox-item\">\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"username\")}：{self.state.username}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"phone\")}：{self.state.userphone}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"mail\")}：{self.state.useremail}</Flex.Item>\r\n                            </Flex>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"FrontofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimgs\">\r\n                                <img src={self.state.userimgurl} />\r\n                            </div>\r\n                            <Flex>\r\n                                <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}</Flex.Item>\r\n                            </Flex>\r\n                            <div className=\"IDcard IDimgs\">\r\n                                <img src={self.state.userimgurlone} />\r\n                            </div>\r\n                            <WhiteSpace size=\"sm\" />\r\n                        </List>\r\n                    </div>\r\n                </Modal>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Withdrawlist;",["168","169"],"H:\\hbank\\src\\pages\\userlist\\userlist.js",["170"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, WhiteSpace, List, Checkbox, Button, Toast, Modal, TextareaItem, Tabs, Pagination, InputItem, Icon } from 'antd-mobile';\r\nimport Nav from '../../component/nav';\r\nimport i18n from '../../i18n'\r\nimport logo from '../../images/logo.png';\r\nimport './userlist.css';\r\nimport abi from '../../api/abi';\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\nconst tabs2 = [\r\n    { title: `${i18n.t(\"Auditlist\")}`, sub: '1' },\r\n    { title: `${i18n.t(\"userlist\")}`, sub: '2' },\r\n];\r\n\r\nclass Userlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            userlist: [],\r\n            userlistitem: [],\r\n            userlistitemState: true,\r\n            pageIndex: 0,\r\n            pageCount: 10,\r\n            len: 0,\r\n            showmodal: false,\r\n            username: \"\",\r\n            useremail: \"\",\r\n            userphone: \"\",\r\n            userimgurl: \"\",\r\n            userimgurlone: \"\",\r\n            userstate: \"\",\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.getUsers(obj.mainPKr);\r\n        self.getUserList(obj.mainPKr, 0, self.state.pageCount)\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    getUsers(mainPKr) {\r\n        let self = this;\r\n        abi.getRegisterList(mainPKr, function (res) {\r\n            // console.log(res, \"<<<<<<<<<<\")\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let codestr = res[i].info.code.substring(2, res[i].info.code.length);\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.code = res[i].info.code;\r\n                obj.email = res[i].info.email;\r\n                obj.name = res[i].info.name;\r\n                obj.phone = res[i].info.phone;\r\n                obj.owner = res[i].owner;\r\n                obj.imgurl = 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png';\r\n                obj.imgurlone = 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png';\r\n                obj.key = res[i].owner;\r\n                obj.checked = false;\r\n                arr.push(obj);\r\n            }\r\n            self.setState({\r\n                userlist: arr\r\n            })\r\n        })\r\n    }\r\n\r\n    onChange = (val) => {\r\n        let self = this;\r\n        let arr = self.state.userlist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].i === val) {\r\n                arr[i].checked = !arr[i].checked;\r\n            }\r\n        }\r\n        this.setState({\r\n            datalist: arr\r\n        })\r\n    }\r\n\r\n    getReview(whether) {\r\n        let self = this;\r\n        let keys = [];\r\n        let arr = self.state.userlist;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i].checked) {\r\n                keys.push(arr[i].key)\r\n            }\r\n        }\r\n        if (keys.length > 0) {\r\n            abi.reviewUser(self.state.account.pk, self.state.account.mainPKr, keys, whether, function (hash, err) {\r\n                if (err) {\r\n                    Toast.fail(err);\r\n                } else {\r\n                    abi.startGetTxReceipt(hash, function () {\r\n                        self.getUsers(self.state.account.mainPKr);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getUser() {\r\n        let self = this;\r\n        abi.getUserInfo(self.MainPkrFocusInst.state.value, function (res) {\r\n            let codestr = res[0].code.substring(2, res[0].code.length);\r\n            self.setState({\r\n                username: res[0].name,\r\n                useremail: res[0].email,\r\n                userphone: res[0].phone,\r\n                userimgurl: 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png',\r\n                userimgurlone: 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png',\r\n                userstate: res[0].state,\r\n                showmodal: true\r\n            })\r\n        })\r\n    }\r\n\r\n    getUserList = (mainPKr, pageIndex, pageCount) => {\r\n        let self = this;\r\n        abi.getUserInfoList(mainPKr, pageIndex, pageCount, function (res, len) {\r\n            if (len == 0) {//eslint-disable-line\r\n                self.setState({\r\n                    userlistitemState: false\r\n                })\r\n            }\r\n            let pageNum = Math.ceil(len / self.state.pageCount) - 1;\r\n            let arr = [];\r\n            for (let i = 0; i < res.length; i++) {\r\n                let codestr = res[i].info.code.substring(2, res[i].info.code.length);\r\n                let obj = {}\r\n                obj.i = i;\r\n                obj.code = res[i].info.code;\r\n                obj.email = res[i].info.email;\r\n                obj.name = res[i].info.name;\r\n                obj.phone = res[i].info.phone;\r\n                obj.owner = res[i].owner;\r\n                obj.imgurl = 'https://ginkgobank.dece.cash/images/' + codestr + '_0.png';\r\n                obj.imgurlone = 'https://ginkgobank.dece.cash/images/' + codestr + '_1.png';\r\n                obj.key = res[i].owner;\r\n                if (res[i].info.state == \"2\") {//eslint-disable-line\r\n                    arr.push(obj);\r\n                }\r\n            }\r\n\r\n            self.setState({\r\n                userlistitem: arr,\r\n                len: pageNum,\r\n                pageIndex: pageIndex,\r\n            })\r\n            Toast.hide();\r\n        })\r\n    }\r\n\r\n    goToPage = (index) => {\r\n        let self = this;\r\n        let pageIndex = self.state.pageIndex + index;\r\n        if (pageIndex >= 0 && pageIndex <= self.state.len) {\r\n            Toast.loading(\"Loading...\", 60);\r\n            self.getUserList(self.state.account.mainPKr, pageIndex, self.state.pageCount);\r\n        }\r\n    }\r\n    render() {\r\n        let self = this;\r\n        return (\r\n            <Nav selectedTab=\"4\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                {i18n.t(\"RegistrationReview\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <div className=\"content\">\r\n                        <div>\r\n                            <div className=\"mytabboxs\">\r\n                                <InputItem\r\n                                    placeholder={i18n.t(\"WalletAddress\")}\r\n                                    ref={el => this.MainPkrFocusInst = el}\r\n                                    clear\r\n                                    extra={<div><Icon type=\"search\" size='xs' /></div>}\r\n                                    onExtraClick={() => self.getUser()}\r\n                                ></InputItem>\r\n                                <Modal\r\n                                    visible={this.state.showmodal}\r\n                                    transparent\r\n                                    maskClosable={false}\r\n                                    title={i18n.t(\"UserInfo\")}\r\n                                    footer={[{\r\n                                        text: `${i18n.t(\"close\")}`, onPress: () => {\r\n                                            self.setState({\r\n                                                showmodal: false\r\n                                            })\r\n                                        }\r\n                                    }]}\r\n                                >\r\n                                    <div>\r\n                                        {\r\n                                            self.state.userstate == 0 ? <div>{i18n.t(\"KYCisnotregistered\")}</div> : <List className=\"mytabbox-item\">\r\n                                                <Flex>\r\n                                                    <Flex.Item>{i18n.t(\"username\")}：{self.state.username}</Flex.Item>\r\n                                                </Flex>\r\n                                                <Flex>\r\n                                                    <Flex.Item>{i18n.t(\"phone\")}：{self.state.userphone}</Flex.Item>\r\n                                                </Flex>\r\n                                                <Flex>\r\n                                                    <Flex.Item>{i18n.t(\"mail\")}：{self.state.useremail}</Flex.Item>\r\n                                                </Flex>\r\n                                                <Flex>\r\n                                                    <Flex.Item>{i18n.t(\"FrontofIDcard\")}</Flex.Item>\r\n                                                </Flex>\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={self.state.userimgurl} />\r\n                                                </div>\r\n                                                <Flex>\r\n                                                    <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}</Flex.Item>\r\n                                                </Flex>\r\n                                                <div className=\"IDcard IDimg\">\r\n                                                    <img src={self.state.userimgurlone} />\r\n                                                </div>\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                            </List>\r\n                                        }\r\n                                    </div>\r\n                                </Modal>\r\n\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <WhiteSpace size=\"sm\" />\r\n                                <Tabs tabs={tabs2}\r\n                                    initialPage={0}\r\n                                    animated={false}\r\n                                    useOnPan={false}\r\n                                    renderTab={tab => <span>{tab.title}</span>\r\n                                    }\r\n                                >\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        <List className=\"mytabbox-item listaddress\">\r\n                                            {self.state.userlist.map(item => (\r\n                                                <CheckboxItem checked={item.checked} key={item.i} onChange={() => this.onChange(item.i)}>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"username\")}：{item.name}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"phone\")}：{item.phone}</Flex.Item>\r\n                                                    </Flex>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"mail\")}：{item.email}</Flex.Item>\r\n                                                    </Flex>\r\n\r\n                                                    <Flex>\r\n                                                        <Flex.Item>\r\n                                                            {i18n.t(\"WalletAddress\")}：\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <TextareaItem\r\n                                                        value={item.owner}\r\n                                                        data-seed=\"logId\"\r\n                                                        editable={true}\r\n                                                        disabled={true}\r\n                                                        autoHeight\r\n                                                    />\r\n\r\n                                                    <Flex>\r\n\r\n                                                        <Flex.Item>{i18n.t(\"FrontofIDcard\")}\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n\r\n                                                    <div className=\"IDcard IDimg\">\r\n                                                        <img src={item.imgurl} />\r\n                                                    </div>\r\n                                                    <Flex>\r\n                                                        <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}\r\n                                                        </Flex.Item>\r\n                                                    </Flex>\r\n                                                    <div className=\"IDcard IDimg\">\r\n                                                        <img src={item.imgurlone} />\r\n                                                    </div>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </CheckboxItem>\r\n                                            ))}\r\n                                        </List>\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        {\r\n                                            self.state.userlist.length > 0 ? <div>\r\n                                                <Flex>\r\n                                                    <Flex.Item>\r\n                                                        <Button type=\"primary\" size='small' onClick={() => this.getReview(true)}>{i18n.t(\"Pass\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                    <Flex.Item>\r\n                                                        <Button size='small' onClick={() => this.getReview(false)}>{i18n.t(\"Fail\")}</Button>\r\n                                                    </Flex.Item>\r\n                                                </Flex>\r\n                                            </div> : <div className=\"center\">{i18n.t(\"NoAuditRecord\")}</div>\r\n                                        }\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                        <WhiteSpace size=\"sm\" />\r\n                                    </div>\r\n                                    <div style={{ alignItems: 'center', justifyContent: 'center', minHeight: '150px', backgroundColor: '#fff' }}>\r\n                                        {\r\n                                            self.state.userlistitemState ? <div>\r\n                                                {self.state.userlistitem.map(item => (\r\n                                                    <List className=\"mytabbox-item\">\r\n                                                        <div key={item.i}>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex>\r\n                                                                <Flex.Item>{i18n.t(\"username\")}：{item.name}</Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex>\r\n                                                                <Flex.Item>{i18n.t(\"phone\")}：{item.phone}</Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex>\r\n                                                                <Flex.Item>{i18n.t(\"mail\")}：{item.email}</Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex className=\"textover\">\r\n                                                                <Flex.Item>{i18n.t(\"WalletAddress\")}：{item.owner}</Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex>\r\n                                                                <Flex.Item>{i18n.t(\"FrontofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={item.imgurl} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <Flex>\r\n                                                                <Flex.Item>{i18n.t(\"ReversesideofIDcard\")}\r\n                                                                </Flex.Item>\r\n                                                            </Flex>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <div className=\"IDcard IDimg\">\r\n                                                                <img src={item.imgurlone} />\r\n                                                            </div>\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                            <WhiteSpace size=\"sm\" />\r\n                                                        </div>\r\n                                                    </List>\r\n                                                ))}\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                                <WhiteSpace size=\"sm\" />\r\n                                                <Flex>\r\n                                                    <Flex.Item>\r\n                                                        <Pagination\r\n                                                            total={self.state.len + 1}\r\n                                                            className=\"custom-pagination-with-icon\"\r\n                                                            current={self.state.pageIndex + 1}\r\n                                                            locale={{\r\n                                                                prevText: (<Button type=\"primary\" size='small' onClick={() => this.goToPage(-1)}>{i18n.t(\"Prev\")}</Button>),\r\n                                                                nextText: (<Button size='small' onClick={() => this.goToPage(1)}>{i18n.t(\"Next\")}</Button>),\r\n                                                            }}\r\n                                                        />\r\n                                                    </Flex.Item>\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                    <WhiteSpace size=\"sm\" />\r\n                                                </Flex>\r\n                                            </div> : <div>{i18n.t(\"NoUserInformation\")}</div>\r\n                                        }\r\n                                    </div>\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                    <WhiteSpace size=\"sm\" />\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\nexport default Userlist;","H:\\hbank\\src\\pages\\bank\\bank.js",["171","172","173","174","175","176","177","178","179","180","181"],"H:\\hbank\\src\\pages\\worldshare\\worldshare.js",["182","183","184","185","186"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, Card, WhiteSpace, Button, Toast } from 'antd-mobile';\r\nimport { Link } from 'react-router-dom';\r\nimport BigNumber from 'bignumber.js';\r\nimport copy from 'copy-to-clipboard';\r\nimport Nav from '../../component/nav'\r\nimport './worldshare.css';\r\nimport i18n from '../../i18n';\r\nimport logo from '../../images/logo.png'\r\nimport profid from '../../images/profid.png'\r\nimport code from '../../images/code.png'\r\nimport copyimg from '../../images/copy.png'\r\nimport abi from '../../api/abi';\r\n\r\nclass Worldshare extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: {},\r\n            profit: {\r\n                0: \"0\",\r\n                1: \"0\",\r\n                2: \"0\",\r\n            },\r\n            RecommendRevenueIndex: 1,\r\n            InvestmentIndex: 1,\r\n            pagecount: 10,\r\n            InvestmentList: [],\r\n            RecommendRevenueList: [],\r\n            RefferList: {}\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.queryTotalRevenue(obj.mainPKr);\r\n        self.getDkrwDetail(obj.mainPKr);\r\n        self.setState({\r\n            account: obj\r\n        })\r\n    }\r\n\r\n    clockIn(pk, mainPKr) {\r\n        let self = this;\r\n        if (self.state.profit.TodayEarnings != \"0.000\") {\r\n            abi.getUserInfo(mainPKr, function (res) {\r\n                if (res[0].state === \"2\") {\r\n                    abi.dailyTapIn(pk, mainPKr, function (hash) {\r\n                        if (hash != \"\") {\r\n                            abi.startGetTxReceipt(hash, function () {\r\n                                self.queryTotalRevenue(self.state.account.mainPKr);\r\n                            });\r\n                        }\r\n                    })\r\n                } else {\r\n                    Toast.info(`${i18n.t(\"PleaseregisterKYCfirst\")}!`)\r\n                }\r\n            })\r\n        } else {\r\n            Toast.info(`${i18n.t(\"Nowithdrawableincome\")}!`)\r\n        }\r\n    }\r\n\r\n    queryTotalRevenue(mainPKr) {\r\n        let self = this;\r\n        abi.queryTotalRevenue(mainPKr, function (res) {\r\n            let obj = {};\r\n            obj.TotalRevenue = new BigNumber(res[0]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            obj.RecommendedIncome = new BigNumber(res[1]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            obj.TodayEarnings = new BigNumber(res[2]).dividedBy(10 ** 18).toFixed(3, 1);\r\n            self.setState({\r\n                profit: obj\r\n            })\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    getDkrwDetail = (mainPKr) => {\r\n        let self = this;\r\n        abi.dkrwDetail(mainPKr, function (res) {\r\n            let obj = {}\r\n            obj.idLeft = res[0][1];\r\n            obj.idRight = res[0][2];\r\n            obj.reffer = res[0][7];\r\n            self.setState({\r\n                RefferList: obj\r\n            })\r\n        })\r\n    }\r\n\r\n    copycode = (copytext) => {\r\n        copy(copytext)\r\n        Toast.info(`${i18n.t(\"CopySuccessfully\")}!`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"header\">\r\n                        <Flex.Item className=\"tabcontent-box\">\r\n                            <img className=\"logo\" src={logo} alt=\"logo\" />\r\n                            <p className='title'>\r\n                                DeFi{i18n.t(\"assetmanagement\")}\r\n                            </p>\r\n                        </Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <WhiteSpace size=\"lg\" />\r\n                <div className=\"content\">\r\n                    <div className=\"worldshare\">\r\n                        <Card>\r\n                            <Card.Header\r\n                                title={i18n.t(\"Contractinformation\")}\r\n                                thumb={code}\r\n                                extra={\r\n                                    <a style={{ color: 'black' }}\r\n                                        href={`https://dece-cash.github.io/worldshare/?v=3&index=${this.state.account.index}`}\r\n                                        // href={`https://ginkgobank.dece.cash/test/worldshare/?v=3&index=${this.state.account.index}`}\r\n                                        // href={`http://localhost:3001/?v=3&index=${this.state.account.index}`}\r\n                                        rel=\"noopener\"\r\n                                    >{i18n.t(\"investment\")}</a>}\r\n                            />\r\n                            <Card.Body>\r\n                                <div>\r\n                                    <p>\r\n                                        <span>ID   A :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.idLeft}</span>\r\n                                        {\r\n                                            this.state.RefferList.idLeft == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.idLeft)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>ID   B :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.idRight}</span>\r\n                                        {\r\n                                            this.state.RefferList.idRight == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.idRight)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Referrer\")}  ID :</span>\r\n                                        <span>&nbsp;&nbsp;  {this.state.RefferList.reffer}</span>\r\n                                        {\r\n                                            this.state.RefferList.reffer == \"\" ? <img /> : <img className=\"copyimg\" onClick={() => this.copycode(this.state.RefferList.reffer)} src={copyimg} />\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <WhiteSpace size=\"lg\" />\r\n                        <Card>\r\n                            <Card.Header\r\n                                title={i18n.t(\"Incomeinformation\")}\r\n                                thumb={profid}\r\n                                extra={<div onClick={() => this.clockIn(this.state.account.pk, this.state.account.mainPKr)}>{i18n.t(\"Withdrawalincome\")}</div>}\r\n                            />\r\n                            <Card.Body>\r\n                                <div>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Totalstaticincome\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.TotalRevenue}</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Staticincome\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.TodayEarnings}</span>\r\n                                    </p>\r\n                                    <p>\r\n                                        <span>{i18n.t(\"Totalrecommendedrevenue\")}:</span>\r\n                                        <span className=\"profitnum\">{this.state.profit.RecommendedIncome}</span>\r\n                                    </p>\r\n                                    <Flex>\r\n                                        <Flex.Item>\r\n                                            <Link to={{ pathname: `/investmentlist`, state: {} }} >\r\n                                                <Button size=\"small\" >\r\n                                                    {i18n.t(\"Investmentlist\")}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Flex.Item>\r\n                                        <Flex.Item>\r\n                                            <Link to={{ pathname: `/recommendlist`, state: {} }} >\r\n                                                <Button size=\"small\" >\r\n                                                    {i18n.t(\"Recommendedincome\")}\r\n                                                </Button>\r\n                                            </Link>\r\n                                        </Flex.Item>\r\n                                    </Flex>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <WhiteSpace size=\"lg\" />\r\n                    </div>\r\n                </div>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Worldshare;\r\n",["187","188"],"H:\\hbank\\src\\pages\\worldshare\\worldshareapp.js",[],["189","190"],"H:\\hbank\\src\\pages\\rechange\\rechange.js",[],"H:\\hbank\\src\\pages\\worldshare\\investmentlist.js",["191"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport Nav from '../../component/nav'\r\nimport './worldshare.css';\r\nimport i18n from '../../i18n';\r\nimport abi from '../../api/abi';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nclass Investmentlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            account: {},\r\n            datalist: [],\r\n            pagestart: 100000,\r\n            pagecount: 10,\r\n        }\r\n    }\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        console.log(event)\r\n        self.setState({ isLoading: true });\r\n        self.queryUserInvestment(self.state.account.mainPKr, self.state.pagestart, self.state.pagecount + 10, function (res) {\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                pagecount: self.state.pagecount + 10\r\n            });\r\n        });\r\n        self.setState({ isLoading: true });\r\n    }\r\n    componentWillMount() {\r\n        let self = this;\r\n\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.queryUserInvestment(obj.mainPKr, self.state.pagestart, self.state.pagecount, function (res) {\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                account: obj\r\n            });\r\n        });\r\n    }\r\n    queryUserInvestment(mainPKr, pagestart, pagecount, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.queryUserInvestment(mainPKr, pagestart, pagecount, function (res) {\r\n            let list = res[0];\r\n            for (let i = 0; i < list.length; i++) {\r\n                let obj = {};\r\n                obj.investmentAmount = new BigNumber(list[i].investmentAmount).dividedBy(10 ** 18).toFixed(2, 1);\r\n                obj.investmentTime = self.formatTime(list[i].investmentTime * 1000, 'Y.M.D h:m');\r\n                arr.push(obj)\r\n            }\r\n            console.log(arr)\r\n            callback(arr)\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = []\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div >\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.investmentAmount}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.investmentTime}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Investmentlist\")}</Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"investmentamount\")}</span>\r\n                    </Flex.Item>\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"Investmenttime\")}</span>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <div className=\"detailcontent\">\r\n                    <div className=\"detailcontent-box\">\r\n                        <ListView\r\n                            ref={el => this.lv = el}\r\n                            dataSource={this.state.dataSource}\r\n                            renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                            </div>)}\r\n                            renderBodyComponent={() => <MyBody />}\r\n                            renderRow={row}\r\n                            renderSeparator={separator}\r\n                            style={{\r\n                                height: this.state.height,\r\n                                overflow: 'auto',\r\n                            }}\r\n                            onScroll={() => { console.log('scroll'); }}\r\n                            scrollRenderAheadDistance={400}\r\n                            onEndReached={this.onEndReached}\r\n                            onEndReachedThreshold={10}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Investmentlist;\r\n","H:\\hbank\\src\\pages\\worldshare\\recommendlist.js",["192"],"/* eslint-disable jsx-a11y/alt-text */\r\n/* eslint-disable array-callback-return */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from 'react';\r\nimport 'antd-mobile/dist/antd-mobile.css';\r\nimport { Flex, ListView } from 'antd-mobile';\r\nimport Nav from '../../component/nav'\r\nimport './worldshare.css';\r\nimport abi from '../../api/abi';\r\nimport BigNumber from 'bignumber.js';\r\nimport i18n from '../../i18n';\r\n\r\nfunction MyBody(props) {\r\n    return (\r\n        <div className=\"am-list-body my-body\">\r\n            <span style={{ display: 'none' }}>you can custom body wrap element</span>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nclass Recommendlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const getRowData = (dataBlob, sectionID, rowID) => {\r\n            return dataBlob[sectionID][rowID];\r\n        };\r\n\r\n        const dataSource = new ListView.DataSource({\r\n            getRowData,\r\n            rowHasChanged: (row1, row2) => row1 !== row2,\r\n            sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\r\n        });\r\n\r\n        this.state = {\r\n            dataSource,\r\n            isLoading: true,\r\n            height: document.documentElement.clientHeight * 3 / 4,\r\n            account: {},\r\n            datalist: [],\r\n            pagestart: 1000000,\r\n            pagecount: 10,\r\n        }\r\n    }\r\n    onEndReached = (event) => {\r\n        let self = this;\r\n        if (self.state.isLoading && !self.state.hasMore) {\r\n            return;\r\n        }\r\n        console.log(event)\r\n        self.setState({ isLoading: true });\r\n        self.queryUserRecommendRevenue(self.state.account.mainPKr, self.state.pagestart, self.state.pagecount + 10, function (res) {\r\n            console.log(res)\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                pagecount: self.state.pagecount + 10\r\n            });\r\n        });\r\n        self.setState({ isLoading: true });\r\n    }\r\n    componentWillMount() {\r\n        let self = this;\r\n        let obj = JSON.parse(sessionStorage.getItem('account'));\r\n        self.queryUserRecommendRevenue(obj.mainPKr, self.state.pagestart, self.state.pagecount, function (res) {\r\n            self.setState({\r\n                dataSource: self.state.dataSource.cloneWithRows(res),\r\n                isLoading: false,\r\n                account: obj\r\n            });\r\n        });\r\n    }\r\n\r\n    queryUserRecommendRevenue(mainPKr, pagestart, pagecount, callback) {\r\n        let self = this;\r\n        let arr = [];\r\n        abi.queryUserRecommendRevenue(mainPKr, pagestart, pagecount, function (res) {\r\n            console.log(res);\r\n            let list = res[0];\r\n            for (let i = 0; i < list.length; i++) {\r\n                let obj = {};\r\n                obj.rewardAmount = new BigNumber(list[i].rewardAmount).dividedBy(10 ** 18).toFixed(2, 1);\r\n                obj.rewardTime = self.formatTime(list[i].rewardTime * 1000, 'Y.M.D h:m');\r\n                obj.refferCode = list[i].uname;\r\n                arr.push(obj)\r\n            }\r\n            console.log(arr)\r\n            callback(arr)\r\n        })\r\n    }\r\n\r\n    formatNumber(n) {\r\n        n = n.toString()\r\n        return n[1] ? n : '0' + n;\r\n    }\r\n\r\n    formatTime(number, format) {\r\n        let time = new Date(number)\r\n        let newArr = [];\r\n        let formatArr = ['Y', 'M', 'D', 'h', 'm', 's'];\r\n        newArr.push(time.getFullYear());\r\n        newArr.push(this.formatNumber(time.getMonth() + 1));\r\n        newArr.push(this.formatNumber(time.getDate()));\r\n        newArr.push(this.formatNumber(time.getHours()));\r\n        newArr.push(this.formatNumber(time.getMinutes()));\r\n        newArr.push(this.formatNumber(time.getSeconds()));\r\n        for (let i in newArr) {\r\n            format = format.replace(formatArr[i], newArr[i]);\r\n        }\r\n        return format;\r\n    }\r\n\r\n    render() {\r\n        const separator = (sectionID, rowID) => (\r\n            <div\r\n                key={`${sectionID}-${rowID}`}\r\n                style={{\r\n                    backgroundColor: '#F5F5F9',\r\n                    height: 8,\r\n                    borderTop: '1px solid #ECECED',\r\n                    borderBottom: '1px solid #ECECED',\r\n                }}\r\n            />\r\n        );\r\n        const row = (item, sectionID, rowID) => {\r\n            return (\r\n                <div key={rowID}>\r\n                    <div>\r\n                        <div style={{ lineHeight: 1 }}>\r\n                            <Flex className=\"item\">\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.rewardAmount}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.rewardTime}\r\n                                </Flex.Item>\r\n                                <Flex.Item className=\"center\">\r\n                                    {item.refferCode}\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        };\r\n        return (\r\n            <Nav selectedTab=\"3\">\r\n                <div className=\"tabcontent\">\r\n                    <Flex className=\"detailheader\">\r\n                        <Flex.Item className=\"headertitle\">{this.state.cy}{i18n.t(\"Recommendedincome\")}</Flex.Item>\r\n                    </Flex>\r\n                </div>\r\n                <Flex className=\"item\" style={{ marginBottom: \"10px\", position: \"relative\", top: '50px' }} >\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"Referralreward\")}</span>\r\n                    </Flex.Item>\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"Rewardtime\")}</span>\r\n                    </Flex.Item>\r\n                    <Flex.Item className=\"center\">\r\n                        <span>{i18n.t(\"Registrationcode\")}</span>\r\n                    </Flex.Item>\r\n                </Flex>\r\n                <div className=\"detailcontent\">\r\n\r\n                    <div className=\"detailcontent-box\">\r\n                        <ListView\r\n                            ref={el => this.lv = el}\r\n                            dataSource={this.state.dataSource}\r\n                            renderFooter={() => (<div style={{ paddingBottom: 25, textAlign: 'center' }}>\r\n                                {this.state.isLoading ? `${i18n.t(\"Nomoredata\")}` + '...' : `${i18n.t(\"Nomoredata\")}`}\r\n                            </div>)}\r\n                            renderBodyComponent={() => <MyBody />}\r\n                            renderRow={row}\r\n                            renderSeparator={separator}\r\n                            style={{\r\n                                height: this.state.height,\r\n                                overflow: 'auto',\r\n                            }}\r\n                            onScroll={() => { console.log('scroll'); }}\r\n                            scrollRenderAheadDistance={10}\r\n                            onEndReached={this.onEndReached}\r\n                            onEndReachedThreshold={10}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recommendlist;\r\n",["193","194"],"H:\\hbank\\src\\images\\cyicon\\index.js",[],{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":91,"column":25,"nodeType":"201","messageId":"202","endLine":91,"endColumn":27},{"ruleId":"199","severity":1,"message":"200","line":155,"column":51,"nodeType":"201","messageId":"202","endLine":155,"endColumn":53},{"ruleId":"199","severity":1,"message":"200","line":157,"column":59,"nodeType":"201","messageId":"202","endLine":157,"endColumn":61},{"ruleId":"199","severity":1,"message":"200","line":159,"column":68,"nodeType":"201","messageId":"202","endLine":159,"endColumn":70},{"ruleId":"199","severity":1,"message":"200","line":160,"column":72,"nodeType":"201","messageId":"202","endLine":160,"endColumn":74},{"ruleId":"199","severity":1,"message":"200","line":164,"column":63,"nodeType":"201","messageId":"202","endLine":164,"endColumn":65},{"ruleId":"199","severity":1,"message":"200","line":165,"column":67,"nodeType":"201","messageId":"202","endLine":165,"endColumn":69},{"ruleId":"199","severity":1,"message":"200","line":166,"column":71,"nodeType":"201","messageId":"202","endLine":166,"endColumn":73},{"ruleId":"199","severity":1,"message":"200","line":176,"column":51,"nodeType":"201","messageId":"202","endLine":176,"endColumn":53},{"ruleId":"199","severity":1,"message":"200","line":176,"column":69,"nodeType":"201","messageId":"202","endLine":176,"endColumn":71},{"ruleId":"199","severity":1,"message":"200","line":176,"column":87,"nodeType":"201","messageId":"202","endLine":176,"endColumn":89},{"ruleId":"199","severity":1,"message":"200","line":178,"column":60,"nodeType":"201","messageId":"202","endLine":178,"endColumn":62},{"ruleId":"203","severity":1,"message":"204","line":217,"column":87,"nodeType":"201","messageId":"205","endLine":217,"endColumn":88},{"ruleId":"206","severity":1,"message":"207","line":6,"column":5,"nodeType":"208","messageId":"209","endLine":7,"endColumn":6},{"ruleId":"195","replacedBy":"210"},{"ruleId":"197","replacedBy":"211"},{"ruleId":"199","severity":1,"message":"200","line":73,"column":31,"nodeType":"201","messageId":"202","endLine":73,"endColumn":33},{"ruleId":"199","severity":1,"message":"200","line":75,"column":38,"nodeType":"201","messageId":"202","endLine":75,"endColumn":40},{"ruleId":"199","severity":1,"message":"200","line":77,"column":37,"nodeType":"201","messageId":"202","endLine":77,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":79,"column":37,"nodeType":"201","messageId":"202","endLine":79,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":81,"column":37,"nodeType":"201","messageId":"202","endLine":81,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":83,"column":37,"nodeType":"201","messageId":"202","endLine":83,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":85,"column":37,"nodeType":"201","messageId":"202","endLine":85,"endColumn":39},{"ruleId":"199","severity":1,"message":"212","line":92,"column":26,"nodeType":"201","messageId":"202","endLine":92,"endColumn":28},{"ruleId":"199","severity":1,"message":"200","line":95,"column":44,"nodeType":"201","messageId":"202","endLine":95,"endColumn":46},{"ruleId":"199","severity":1,"message":"200","line":2433,"column":28,"nodeType":"201","messageId":"202","endLine":2433,"endColumn":30},{"ruleId":"199","severity":1,"message":"200","line":2476,"column":35,"nodeType":"201","messageId":"202","endLine":2476,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":2487,"column":35,"nodeType":"201","messageId":"202","endLine":2487,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":2596,"column":35,"nodeType":"201","messageId":"202","endLine":2596,"endColumn":37},{"ruleId":"199","severity":1,"message":"200","line":2607,"column":35,"nodeType":"201","messageId":"202","endLine":2607,"endColumn":37},{"ruleId":"195","replacedBy":"213"},{"ruleId":"197","replacedBy":"214"},{"ruleId":"195","replacedBy":"215"},{"ruleId":"197","replacedBy":"216"},{"ruleId":"195","replacedBy":"217"},{"ruleId":"197","replacedBy":"218"},{"ruleId":"199","severity":1,"message":"212","line":57,"column":35,"nodeType":"201","messageId":"202","endLine":57,"endColumn":37},{"ruleId":"195","replacedBy":"219"},{"ruleId":"197","replacedBy":"220"},{"ruleId":"203","severity":1,"message":"204","line":92,"column":99,"nodeType":"201","messageId":"205","endLine":92,"endColumn":100},{"ruleId":"199","severity":1,"message":"200","line":228,"column":46,"nodeType":"201","messageId":"202","endLine":228,"endColumn":48},{"ruleId":"199","severity":1,"message":"200","line":298,"column":58,"nodeType":"201","messageId":"202","endLine":298,"endColumn":60},{"ruleId":"199","severity":1,"message":"200","line":346,"column":70,"nodeType":"201","messageId":"202","endLine":346,"endColumn":72},{"ruleId":"199","severity":1,"message":"200","line":50,"column":31,"nodeType":"201","messageId":"202","endLine":50,"endColumn":33},{"ruleId":"199","severity":1,"message":"200","line":52,"column":38,"nodeType":"201","messageId":"202","endLine":52,"endColumn":40},{"ruleId":"199","severity":1,"message":"200","line":54,"column":37,"nodeType":"201","messageId":"202","endLine":54,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":56,"column":37,"nodeType":"201","messageId":"202","endLine":56,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":58,"column":37,"nodeType":"201","messageId":"202","endLine":58,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":60,"column":37,"nodeType":"201","messageId":"202","endLine":60,"endColumn":39},{"ruleId":"199","severity":1,"message":"200","line":62,"column":37,"nodeType":"201","messageId":"202","endLine":62,"endColumn":39},{"ruleId":"199","severity":1,"message":"212","line":68,"column":26,"nodeType":"201","messageId":"202","endLine":68,"endColumn":28},{"ruleId":"199","severity":1,"message":"200","line":71,"column":47,"nodeType":"201","messageId":"202","endLine":71,"endColumn":49},{"ruleId":"199","severity":1,"message":"200","line":287,"column":106,"nodeType":"201","messageId":"202","endLine":287,"endColumn":108},{"ruleId":"195","replacedBy":"221"},{"ruleId":"197","replacedBy":"222"},{"ruleId":"199","severity":1,"message":"200","line":210,"column":66,"nodeType":"201","messageId":"202","endLine":210,"endColumn":68},{"ruleId":"199","severity":1,"message":"212","line":40,"column":22,"nodeType":"201","messageId":"202","endLine":40,"endColumn":24},{"ruleId":"199","severity":1,"message":"212","line":48,"column":42,"nodeType":"201","messageId":"202","endLine":48,"endColumn":44},{"ruleId":"199","severity":1,"message":"200","line":58,"column":53,"nodeType":"201","messageId":"202","endLine":58,"endColumn":55},{"ruleId":"199","severity":1,"message":"200","line":60,"column":60,"nodeType":"201","messageId":"202","endLine":60,"endColumn":62},{"ruleId":"199","severity":1,"message":"200","line":62,"column":60,"nodeType":"201","messageId":"202","endLine":62,"endColumn":62},{"ruleId":"199","severity":1,"message":"200","line":64,"column":60,"nodeType":"201","messageId":"202","endLine":64,"endColumn":62},{"ruleId":"199","severity":1,"message":"200","line":66,"column":59,"nodeType":"201","messageId":"202","endLine":66,"endColumn":61},{"ruleId":"199","severity":1,"message":"200","line":68,"column":59,"nodeType":"201","messageId":"202","endLine":68,"endColumn":61},{"ruleId":"199","severity":1,"message":"200","line":70,"column":59,"nodeType":"201","messageId":"202","endLine":70,"endColumn":61},{"ruleId":"199","severity":1,"message":"212","line":84,"column":21,"nodeType":"201","messageId":"202","endLine":84,"endColumn":23},{"ruleId":"199","severity":1,"message":"200","line":87,"column":42,"nodeType":"201","messageId":"202","endLine":87,"endColumn":44},{"ruleId":"199","severity":1,"message":"212","line":50,"column":45,"nodeType":"201","messageId":"202","endLine":50,"endColumn":47},{"ruleId":"199","severity":1,"message":"212","line":54,"column":34,"nodeType":"201","messageId":"202","endLine":54,"endColumn":36},{"ruleId":"199","severity":1,"message":"200","line":155,"column":74,"nodeType":"201","messageId":"202","endLine":155,"endColumn":76},{"ruleId":"199","severity":1,"message":"200","line":162,"column":75,"nodeType":"201","messageId":"202","endLine":162,"endColumn":77},{"ruleId":"199","severity":1,"message":"200","line":169,"column":74,"nodeType":"201","messageId":"202","endLine":169,"endColumn":76},{"ruleId":"195","replacedBy":"223"},{"ruleId":"197","replacedBy":"224"},{"ruleId":"195","replacedBy":"225"},{"ruleId":"197","replacedBy":"226"},{"ruleId":"203","severity":1,"message":"204","line":159,"column":83,"nodeType":"201","messageId":"205","endLine":159,"endColumn":84},{"ruleId":"203","severity":1,"message":"204","line":170,"column":83,"nodeType":"201","messageId":"205","endLine":170,"endColumn":84},{"ruleId":"195","replacedBy":"227"},{"ruleId":"197","replacedBy":"228"},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["229"],["230"],"Expected '!==' and instead saw '!='.",["229"],["230"],["229"],["230"],["229"],["230"],["229"],["230"],["229"],["230"],["229"],["230"],["229"],["230"],["229"],["230"],"no-global-assign","no-unsafe-negation"]